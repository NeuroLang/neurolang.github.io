
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_neurosynth_implementation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_neurosynth_implementation.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_neurosynth_implementation.py:


NeuroLang Example based Implementing a NeuroSynth Query
====================================================

.. GENERATED FROM PYTHON SOURCE LINES 9-25

.. code-block:: Python

    import warnings

    warnings.filterwarnings("ignore")

    from pathlib import Path
    from typing import Iterable

    import nibabel
    import nilearn.datasets
    import nilearn.image
    import nilearn.plotting
    import numpy as np
    import pandas as pd
    from neurolang import ExplicitVBROverlay, NeurolangPDL
    from neurolang.frontend.neurosynth_utils import get_ns_mni_peaks_reported








.. GENERATED FROM PYTHON SOURCE LINES 26-28

Data preparation
----------------

.. GENERATED FROM PYTHON SOURCE LINES 28-31

.. code-block:: Python


    data_dir = Path.home() / "neurolang_data"








.. GENERATED FROM PYTHON SOURCE LINES 32-33

Load the MNI atlas and resample it to 4mm voxels

.. GENERATED FROM PYTHON SOURCE LINES 33-39

.. code-block:: Python


    mni_t1 = nibabel.load(
        nilearn.datasets.fetch_icbm152_2009(data_dir=str(data_dir / "icbm"))["t1"]
    )
    mni_t1_4mm = nilearn.image.resample_img(mni_t1, np.eye(3) * 4)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Dataset created in /home/circleci/neurolang_data/icbm/icbm152_2009

    Downloading data from https://osf.io/7pj92/download ...
    Downloaded 1073152 of 63027871 bytes (1.7%,  1.0min remaining)    Downloaded 2129920 of 63027871 bytes (3.4%,   59.5s remaining)    Downloaded 3170304 of 63027871 bytes (5.0%,   58.5s remaining)    Downloaded 4472832 of 63027871 bytes (7.1%,   55.5s remaining)    Downloaded 5783552 of 63027871 bytes (9.2%,   54.6s remaining)    Downloaded 6832128 of 63027871 bytes (10.8%,   54.1s remaining)    Downloaded 7880704 of 63027871 bytes (12.5%,   54.8s remaining)    Downloaded 8921088 of 63027871 bytes (14.2%,   54.0s remaining)    Downloaded 9961472 of 63027871 bytes (15.8%,   53.1s remaining)    Downloaded 10993664 of 63027871 bytes (17.4%,   52.3s remaining)    Downloaded 12288000 of 63027871 bytes (19.5%,   50.9s remaining)    Downloaded 13328384 of 63027871 bytes (21.1%,   49.9s remaining)    Downloaded 14876672 of 63027871 bytes (23.6%,   46.9s remaining)    Downloaded 15908864 of 63027871 bytes (25.2%,   46.1s remaining)    Downloaded 17203200 of 63027871 bytes (27.3%,   44.6s remaining)    Downloaded 18235392 of 63027871 bytes (28.9%,   44.0s remaining)    Downloaded 19521536 of 63027871 bytes (31.0%,   42.6s remaining)    Downloaded 20561920 of 63027871 bytes (32.6%,   41.5s remaining)    Downloaded 21856256 of 63027871 bytes (34.7%,   40.2s remaining)    Downloaded 23158784 of 63027871 bytes (36.7%,   38.7s remaining)    Downloaded 24190976 of 63027871 bytes (38.4%,   37.9s remaining)    Downloaded 25747456 of 63027871 bytes (40.9%,   35.7s remaining)    Downloaded 26779648 of 63027871 bytes (42.5%,   34.8s remaining)    Downloaded 27811840 of 63027871 bytes (44.1%,   34.0s remaining)    Downloaded 28844032 of 63027871 bytes (45.8%,   33.3s remaining)    Downloaded 29892608 of 63027871 bytes (47.4%,   32.4s remaining)    Downloaded 30932992 of 63027871 bytes (49.1%,   31.5s remaining)    Downloaded 31973376 of 63027871 bytes (50.7%,   30.6s remaining)    Downloaded 33013760 of 63027871 bytes (52.4%,   29.6s remaining)    Downloaded 34054144 of 63027871 bytes (54.0%,   28.6s remaining)    Downloaded 35348480 of 63027871 bytes (56.1%,   27.2s remaining)    Downloaded 36642816 of 63027871 bytes (58.1%,   26.0s remaining)    Downloaded 37675008 of 63027871 bytes (59.8%,   25.0s remaining)    Downloaded 38707200 of 63027871 bytes (61.4%,   24.0s remaining)    Downloaded 39739392 of 63027871 bytes (63.1%,   23.0s remaining)    Downloaded 40771584 of 63027871 bytes (64.7%,   22.0s remaining)    Downloaded 41803776 of 63027871 bytes (66.3%,   21.0s remaining)    Downloaded 42835968 of 63027871 bytes (68.0%,   20.1s remaining)    Downloaded 44130304 of 63027871 bytes (70.0%,   18.7s remaining)    Downloaded 45686784 of 63027871 bytes (72.5%,   17.1s remaining)    Downloaded 46727168 of 63027871 bytes (74.1%,   16.0s remaining)    Downloaded 48021504 of 63027871 bytes (76.2%,   14.8s remaining)    Downloaded 49053696 of 63027871 bytes (77.8%,   13.8s remaining)    Downloaded 50085888 of 63027871 bytes (79.5%,   12.8s remaining)    Downloaded 51118080 of 63027871 bytes (81.1%,   11.7s remaining)    Downloaded 52412416 of 63027871 bytes (83.2%,   10.5s remaining)    Downloaded 53706752 of 63027871 bytes (85.2%,    9.2s remaining)    Downloaded 54476800 of 63027871 bytes (86.4%,    8.5s remaining)    Downloaded 55771136 of 63027871 bytes (88.5%,    7.1s remaining)    Downloaded 57065472 of 63027871 bytes (90.5%,    5.9s remaining)    Downloaded 58097664 of 63027871 bytes (92.2%,    4.8s remaining)    Downloaded 59129856 of 63027871 bytes (93.8%,    3.8s remaining)    Downloaded 60416000 of 63027871 bytes (95.9%,    2.6s remaining)    Downloaded 61710336 of 63027871 bytes (97.9%,    1.3s remaining)    Downloaded 63004672 of 63027871 bytes (100.0%,    0.0s remaining) ...done. (69 seconds, 1 min)
    Extracting data from /home/circleci/neurolang_data/icbm/icbm152_2009/e05b733c275cab0eec856067143c9dc9/download..... done.




.. GENERATED FROM PYTHON SOURCE LINES 40-42

Probabilistic Logic Programming in NeuroLang
--------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 42-46

.. code-block:: Python


    nl = NeurolangPDL()









.. GENERATED FROM PYTHON SOURCE LINES 47-48

Adding new aggregation function to build a region overlay

.. GENERATED FROM PYTHON SOURCE LINES 48-60

.. code-block:: Python



    @nl.add_symbol
    def agg_create_region_overlay(
        i: Iterable, j: Iterable, k: Iterable, p: Iterable
    ) -> ExplicitVBROverlay:
        mni_coords = np.c_[i, j, k]
        return ExplicitVBROverlay(
            mni_coords, mni_t1_4mm.affine, p, image_dim=mni_t1_4mm.shape
        )









.. GENERATED FROM PYTHON SOURCE LINES 61-62

Load the NeuroSynth database

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: Python


    peak_data = get_ns_mni_peaks_reported(data_dir)
    ijk_positions = np.round(
        nibabel.affines.apply_affine(
            np.linalg.inv(mni_t1_4mm.affine),
            peak_data[["x", "y", "z"]].values.astype(float),
        )
    ).astype(int)
    peak_data["i"] = ijk_positions[:, 0]
    peak_data["j"] = ijk_positions[:, 1]
    peak_data["k"] = ijk_positions[:, 2]
    peak_data = peak_data[["i", "j", "k", "id"]]

    nl.add_tuple_set(peak_data, name="PeakReported")
    study_ids = nl.load_neurosynth_study_ids(data_dir, "Study")
    nl.add_uniform_probabilistic_choice_over_set(
        study_ids.value, name="SelectedStudy"
    )
    nl.load_neurosynth_term_study_associations(
        data_dir, "TermInStudyTFIDF", tfidf_threshold=1e-3
    )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading data from https://github.com/neurosynth/neurosynth-data/raw/master/data-neurosynth_version-7_coordinates.tsv.gz ...
     ...done. (1 seconds, 0 min)
    Downloading data from https://github.com/neurosynth/neurosynth-data/raw/master/data-neurosynth_version-7_metadata.tsv.gz ...
     ...done. (1 seconds, 0 min)
    Downloading data from https://github.com/neurosynth/neurosynth-data/raw/master/data-neurosynth_version-7_vocab-terms_source-abstract_type-tfidf_features.npz ...
     ...done. (1 seconds, 0 min)
    Downloading data from https://github.com/neurosynth/neurosynth-data/raw/master/data-neurosynth_version-7_vocab-terms_vocabulary.txt ...
     ...done. (0 seconds, 0 min)

    TermInStudyTFIDF: typing.AbstractSet[typing.Tuple[str, str, float]] = (9862924, '001', 0.0553942161114) ...



.. GENERATED FROM PYTHON SOURCE LINES 86-88

##############################################################################
 Probabilistic program and querying

.. GENERATED FROM PYTHON SOURCE LINES 88-106

.. code-block:: Python


    with nl.scope as e:
        e.Activation[e.i, e.j, e.k] = e.PeakReported(
            e.i, e.j, e.k, e.s
        ) & e.SelectedStudy(e.s)
        e.TermAssociation[e.t] = e.SelectedStudy(e.s) & e.TermInStudyTFIDF(
            e.s, e.t, ...
        )
        e.ActivationGivenTerm[e.i, e.j, e.k, e.PROB[e.i, e.j, e.k]] = e.Activation(
            e.i, e.j, e.k
        ) // e.TermAssociation("auditory")
        e.ActivationGivenTermImage[
            agg_create_region_overlay(e.i, e.j, e.k, e.p)
        ] = e.ActivationGivenTerm(e.i, e.j, e.k, e.p)

        img_query = nl.query((e.x,), e.ActivationGivenTermImage(e.x))









.. GENERATED FROM PYTHON SOURCE LINES 107-110

##############################################################################
 Plotting results
 --------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 110-117

.. code-block:: Python


    result_image = img_query.fetch_one()[0].spatial_image()
    img = result_image.get_fdata()
    plot = nilearn.plotting.plot_stat_map(
        result_image, threshold=np.percentile(img[img > 0], 95)
    )
    nilearn.plotting.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_neurosynth_implementation_001.png
   :alt: plot neurosynth implementation
   :srcset: /auto_examples/images/sphx_glr_plot_neurosynth_implementation_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 21.216 seconds)


.. _sphx_glr_download_auto_examples_plot_neurosynth_implementation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_neurosynth_implementation.ipynb <plot_neurosynth_implementation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_neurosynth_implementation.py <plot_neurosynth_implementation.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
