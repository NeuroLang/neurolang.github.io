
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_neurosynth_implementation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_neurosynth_implementation.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_neurosynth_implementation.py:


NeuroLang Example based Implementing a NeuroSynth Query
====================================================

.. GENERATED FROM PYTHON SOURCE LINES 9-18

.. code-block:: default

    from typing import Iterable

    import nibabel as nib
    import numpy as np
    import pandas as pd
    from nilearn import datasets, image, plotting

    from neurolang import ExplicitVBROverlay, NeurolangPDL








.. GENERATED FROM PYTHON SOURCE LINES 19-21

Data preparation
----------------

.. GENERATED FROM PYTHON SOURCE LINES 23-24

Load the MNI atlas and resample it to 4mm voxels

.. GENERATED FROM PYTHON SOURCE LINES 24-28

.. code-block:: default


    mni_t1 = nib.load(datasets.fetch_icbm152_2009()["t1"])
    mni_t1_4mm = image.resample_img(mni_t1, np.eye(3) * 4)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Dataset created in /home/circleci/nilearn_data/icbm152_2009

    Downloading data from https://osf.io/7pj92/download ...
    Downloaded 51347456 of 63027871 bytes (81.5%,    0.2s remaining) ...done. (2 seconds, 0 min)
    Extracting data from /home/circleci/nilearn_data/icbm152_2009/774f5ced148e2fb443738680ac9b85a9/download..... done.




.. GENERATED FROM PYTHON SOURCE LINES 29-30

Load the NeuroSynth database

.. GENERATED FROM PYTHON SOURCE LINES 30-71

.. code-block:: default


    ns_database_fn, ns_features_fn = datasets.utils._fetch_files(
        "neurolang",
        [
            (
                "database.txt",
                "https://github.com/neurosynth/neurosynth-data/raw/master/current_data.tar.gz",
                {"uncompress": True},
            ),
            (
                "features.txt",
                "https://github.com/neurosynth/neurosynth-data/raw/master/current_data.tar.gz",
                {"uncompress": True},
            ),
        ],
    )

    ns_database = pd.read_csv(ns_database_fn, sep="\t")
    ijk_positions = np.round(
        nib.affines.apply_affine(
            np.linalg.inv(mni_t1_4mm.affine),
            ns_database[["x", "y", "z"]].values.astype(float),
        )
    ).astype(int)
    ns_database["i"] = ijk_positions[:, 0]
    ns_database["j"] = ijk_positions[:, 1]
    ns_database["k"] = ijk_positions[:, 2]

    ns_features = pd.read_csv(ns_features_fn, sep="\t")
    ns_docs = ns_features[["pmid"]].drop_duplicates()
    ns_terms = pd.melt(
        ns_features, var_name="term", id_vars="pmid", value_name="TfIdf"
    ).query("TfIdf > 1e-3")[["pmid", "term"]]
    ns_terms.to_csv("term_documents.csv")
    (
        ns_database[["x", "y", "z", "i", "j", "k", "id"]]
        .rename(columns={"id": "pmid"})
        .to_csv("document_activations.csv")
    )






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Downloading data from https://github.com/neurosynth/neurosynth-data/raw/master/current_data.tar.gz ...
     ...done. (0 seconds, 0 min)
    Extracting data from neurolang/ba5a937c77504ec8c350332a54a58f7c/current_data.tar.gz..... done.




.. GENERATED FROM PYTHON SOURCE LINES 72-74

Probabilistic Logic Programming in NeuroLang
--------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 74-78

.. code-block:: default


    nl = NeurolangPDL()









.. GENERATED FROM PYTHON SOURCE LINES 79-80

Adding new aggregation function to build a region overlay

.. GENERATED FROM PYTHON SOURCE LINES 80-90

.. code-block:: default

    @nl.add_symbol
    def agg_create_region_overlay(
        i: Iterable, j: Iterable, k: Iterable, p: Iterable
    ) -> ExplicitVBROverlay:
        voxels = np.c_[i, j, k]
        return ExplicitVBROverlay(
            voxels, mni_t1_4mm.affine, p, image_dim=mni_t1_4mm.shape
        )









.. GENERATED FROM PYTHON SOURCE LINES 91-92

Loading the database

.. GENERATED FROM PYTHON SOURCE LINES 92-98

.. code-block:: default


    activations = nl.add_tuple_set(ns_database, name="activations")
    terms = nl.add_tuple_set(ns_terms, name="terms")
    docs = nl.add_uniform_probabilistic_choice_over_set(ns_docs, name="docs")









.. GENERATED FROM PYTHON SOURCE LINES 99-101

##############################################################################
 Probabilistic program and querying

.. GENERATED FROM PYTHON SOURCE LINES 101-137

.. code-block:: default


    with nl.scope as e:
        e.vox_activation[e.i, e.j, e.k, e.d] = e.activations(
            e.d,
            ...,
            ...,
            ...,
            ...,
            "MNI",
            ...,
            ...,
            ...,
            ...,
            ...,
            ...,
            ...,
            e.i,
            e.j,
            e.k,
        ) & e.docs(e.d)

        e.term_present[e.t, e.d] = e.terms(e.d, e.t) & e.docs(e.d)

        e.marg_term[e.t, e.PROB(e.t)] = e.term_present[e.t, e.d]
        e.probmap[e.i, e.j, e.k, e.PROB[e.i, e.j, e.k]] = (
            e.vox_activation(e.i, e.j, e.k, e.d)
        ) // e.term_present("auditory", e.d)

        e.img[e.agg_create_region_overlay[e.i, e.j, e.k, e.p]] = e.probmap[
            e.i, e.j, e.k, e.p
        ]

        marg_term = nl.query((e.t, e.p), e.marg_term(e.t, e.p))
        img_query = nl.query((e.x,), e.img(e.x))









.. GENERATED FROM PYTHON SOURCE LINES 138-141

##############################################################################
 Plotting results
 --------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 141-148

.. code-block:: default


    result_image = img_query.fetch_one()[0].spatial_image()
    img = result_image.get_fdata()
    plot = plotting.plot_stat_map(
        result_image, threshold=np.percentile(img[img > 0], 95)
    )
    plotting.show()



.. image:: /auto_examples/images/sphx_glr_plot_neurosynth_implementation_001.png
    :alt: plot neurosynth implementation
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  59.920 seconds)


.. _sphx_glr_download_auto_examples_plot_neurosynth_implementation.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_neurosynth_implementation.py <plot_neurosynth_implementation.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_neurosynth_implementation.ipynb <plot_neurosynth_implementation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
