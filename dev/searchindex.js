Search.setIndex({"docnames": ["api", "authors", "auto_examples/index", "auto_examples/plot_cbma_spatial_prior", "auto_examples/plot_load_destrieux_datalog_ir", "auto_examples/plot_load_destrieux_left_hemisphere_gyri", "auto_examples/plot_neurosynth_implementation", "auto_examples/sg_execution_times", "gen_api/modules", "gen_api/neurolang", "gen_api/neurolang.CD_relations", "gen_api/neurolang.NeurolangDL", "gen_api/neurolang.NeurolangPDL", "gen_api/neurolang.aabb_tree", "gen_api/neurolang.commands", "gen_api/neurolang.config", "gen_api/neurolang.datalog", "gen_api/neurolang.datalog.aggregation", "gen_api/neurolang.datalog.basic_representation", "gen_api/neurolang.datalog.chase", "gen_api/neurolang.datalog.chase.general", "gen_api/neurolang.datalog.chase.mgu", "gen_api/neurolang.datalog.chase.negation", "gen_api/neurolang.datalog.chase.relational_algebra", "gen_api/neurolang.datalog.constraints_representation", "gen_api/neurolang.datalog.exceptions", "gen_api/neurolang.datalog.expression_processing", "gen_api/neurolang.datalog.expressions", "gen_api/neurolang.datalog.instance", "gen_api/neurolang.datalog.magic_sets", "gen_api/neurolang.datalog.negation", "gen_api/neurolang.datalog.ontologies_parser", "gen_api/neurolang.datalog.ontologies_rewriter", "gen_api/neurolang.datalog.translate_to_named_ra", "gen_api/neurolang.datalog.wrapped_collections", "gen_api/neurolang.datalog_chase", "gen_api/neurolang.exceptions", "gen_api/neurolang.expression_pattern_matching", "gen_api/neurolang.expression_walker", "gen_api/neurolang.expressions", "gen_api/neurolang.frontend", "gen_api/neurolang.frontend.ast", "gen_api/neurolang.frontend.ast_lark", "gen_api/neurolang.frontend.datalog", "gen_api/neurolang.frontend.datalog.standard_syntax", "gen_api/neurolang.frontend.datalog.sugar", "gen_api/neurolang.frontend.datalog.sugar.spatial", "gen_api/neurolang.frontend.datalog.syntax_preprocessing", "gen_api/neurolang.frontend.deterministic_frontend", "gen_api/neurolang.frontend.drs", "gen_api/neurolang.frontend.drs.chart_parser", "gen_api/neurolang.frontend.drs.drs_builder", "gen_api/neurolang.frontend.drs.english_grammar", "gen_api/neurolang.frontend.drs.exceptions", "gen_api/neurolang.frontend.drs.translate_to_dl", "gen_api/neurolang.frontend.frontend_extensions", "gen_api/neurolang.frontend.neurolang", "gen_api/neurolang.frontend.neurosynth_utils", "gen_api/neurolang.frontend.probabilistic_frontend", "gen_api/neurolang.frontend.query_resolution", "gen_api/neurolang.frontend.query_resolution_datalog", "gen_api/neurolang.frontend.query_resolution_expressions", "gen_api/neurolang.interval_algebra", "gen_api/neurolang.logic", "gen_api/neurolang.logic.expression_processing", "gen_api/neurolang.logic.horn_clauses", "gen_api/neurolang.logic.transformations", "gen_api/neurolang.logic.unification", "gen_api/neurolang.neurolang", "gen_api/neurolang.neurolang_compiler", "gen_api/neurolang.perior_tree", "gen_api/neurolang.probabilistic", "gen_api/neurolang.probabilistic.containment", "gen_api/neurolang.probabilistic.cplogic", "gen_api/neurolang.probabilistic.cplogic.cplogic_to_gm", "gen_api/neurolang.probabilistic.cplogic.gm_provenance_solver", "gen_api/neurolang.probabilistic.cplogic.grounding", "gen_api/neurolang.probabilistic.cplogic.problog_solver", "gen_api/neurolang.probabilistic.cplogic.program", "gen_api/neurolang.probabilistic.cplogic.testing", "gen_api/neurolang.probabilistic.dalvi_suciu_lift", "gen_api/neurolang.probabilistic.distributions", "gen_api/neurolang.probabilistic.exceptions", "gen_api/neurolang.probabilistic.expression_processing", "gen_api/neurolang.probabilistic.expressions", "gen_api/neurolang.probabilistic.magic_sets_processing", "gen_api/neurolang.probabilistic.ppdl", "gen_api/neurolang.probabilistic.probabilistic_ra_utils", "gen_api/neurolang.probabilistic.probabilistic_semiring_solver", "gen_api/neurolang.probabilistic.query_resolution", "gen_api/neurolang.probabilistic.ranking", "gen_api/neurolang.probabilistic.shattering", "gen_api/neurolang.probabilistic.small_dichotomy_theorem_based_solver", "gen_api/neurolang.probabilistic.stratification", "gen_api/neurolang.probabilistic.transforms", "gen_api/neurolang.probabilistic.weighted_model_counting", "gen_api/neurolang.region_solver", "gen_api/neurolang.regions", "gen_api/neurolang.relational_algebra", "gen_api/neurolang.relational_algebra.optimisers", "gen_api/neurolang.relational_algebra.relational_algebra", "gen_api/neurolang.relational_algebra_provenance", "gen_api/neurolang.solver", "gen_api/neurolang.type_system", "gen_api/neurolang.typed_symbol_table", "gen_api/neurolang.utils", "gen_api/neurolang.utils.data_manipulation", "gen_api/neurolang.utils.interactive_parsing", "gen_api/neurolang.utils.orderedset", "gen_api/neurolang.utils.relational_algebra_set", "gen_api/neurolang.utils.relational_algebra_set.abstract", "gen_api/neurolang.utils.relational_algebra_set.dask_helpers", "gen_api/neurolang.utils.relational_algebra_set.dask_sql", "gen_api/neurolang.utils.relational_algebra_set.pandas", "gen_api/neurolang.utils.server", "gen_api/neurolang.utils.server.app", "gen_api/neurolang.utils.server.engines", "gen_api/neurolang.utils.server.queries", "gen_api/neurolang.utils.server.responses", "gen_api/neurolang.utils.testing", "gen_api/neurolang.utils.testing.logic", "gen_api/neurolang.utils.various", "index", "install", "sg_execution_times", "tutorial", "tutorial_logic_programming"], "filenames": ["api.rst", "authors.rst", "auto_examples/index.rst", "auto_examples/plot_cbma_spatial_prior.rst", "auto_examples/plot_load_destrieux_datalog_ir.rst", "auto_examples/plot_load_destrieux_left_hemisphere_gyri.rst", "auto_examples/plot_neurosynth_implementation.rst", "auto_examples/sg_execution_times.rst", "gen_api/modules.rst", "gen_api/neurolang.rst", "gen_api/neurolang.CD_relations.rst", "gen_api/neurolang.NeurolangDL.rst", "gen_api/neurolang.NeurolangPDL.rst", "gen_api/neurolang.aabb_tree.rst", "gen_api/neurolang.commands.rst", "gen_api/neurolang.config.rst", "gen_api/neurolang.datalog.rst", "gen_api/neurolang.datalog.aggregation.rst", "gen_api/neurolang.datalog.basic_representation.rst", "gen_api/neurolang.datalog.chase.rst", "gen_api/neurolang.datalog.chase.general.rst", "gen_api/neurolang.datalog.chase.mgu.rst", "gen_api/neurolang.datalog.chase.negation.rst", "gen_api/neurolang.datalog.chase.relational_algebra.rst", "gen_api/neurolang.datalog.constraints_representation.rst", "gen_api/neurolang.datalog.exceptions.rst", "gen_api/neurolang.datalog.expression_processing.rst", "gen_api/neurolang.datalog.expressions.rst", "gen_api/neurolang.datalog.instance.rst", "gen_api/neurolang.datalog.magic_sets.rst", "gen_api/neurolang.datalog.negation.rst", "gen_api/neurolang.datalog.ontologies_parser.rst", "gen_api/neurolang.datalog.ontologies_rewriter.rst", "gen_api/neurolang.datalog.translate_to_named_ra.rst", "gen_api/neurolang.datalog.wrapped_collections.rst", "gen_api/neurolang.datalog_chase.rst", "gen_api/neurolang.exceptions.rst", "gen_api/neurolang.expression_pattern_matching.rst", "gen_api/neurolang.expression_walker.rst", "gen_api/neurolang.expressions.rst", "gen_api/neurolang.frontend.rst", "gen_api/neurolang.frontend.ast.rst", "gen_api/neurolang.frontend.ast_lark.rst", "gen_api/neurolang.frontend.datalog.rst", "gen_api/neurolang.frontend.datalog.standard_syntax.rst", "gen_api/neurolang.frontend.datalog.sugar.rst", "gen_api/neurolang.frontend.datalog.sugar.spatial.rst", "gen_api/neurolang.frontend.datalog.syntax_preprocessing.rst", "gen_api/neurolang.frontend.deterministic_frontend.rst", "gen_api/neurolang.frontend.drs.rst", "gen_api/neurolang.frontend.drs.chart_parser.rst", "gen_api/neurolang.frontend.drs.drs_builder.rst", "gen_api/neurolang.frontend.drs.english_grammar.rst", "gen_api/neurolang.frontend.drs.exceptions.rst", "gen_api/neurolang.frontend.drs.translate_to_dl.rst", "gen_api/neurolang.frontend.frontend_extensions.rst", "gen_api/neurolang.frontend.neurolang.rst", "gen_api/neurolang.frontend.neurosynth_utils.rst", "gen_api/neurolang.frontend.probabilistic_frontend.rst", "gen_api/neurolang.frontend.query_resolution.rst", "gen_api/neurolang.frontend.query_resolution_datalog.rst", "gen_api/neurolang.frontend.query_resolution_expressions.rst", "gen_api/neurolang.interval_algebra.rst", "gen_api/neurolang.logic.rst", "gen_api/neurolang.logic.expression_processing.rst", "gen_api/neurolang.logic.horn_clauses.rst", "gen_api/neurolang.logic.transformations.rst", "gen_api/neurolang.logic.unification.rst", "gen_api/neurolang.neurolang.rst", "gen_api/neurolang.neurolang_compiler.rst", "gen_api/neurolang.perior_tree.rst", "gen_api/neurolang.probabilistic.rst", "gen_api/neurolang.probabilistic.containment.rst", "gen_api/neurolang.probabilistic.cplogic.rst", "gen_api/neurolang.probabilistic.cplogic.cplogic_to_gm.rst", "gen_api/neurolang.probabilistic.cplogic.gm_provenance_solver.rst", "gen_api/neurolang.probabilistic.cplogic.grounding.rst", "gen_api/neurolang.probabilistic.cplogic.problog_solver.rst", "gen_api/neurolang.probabilistic.cplogic.program.rst", "gen_api/neurolang.probabilistic.cplogic.testing.rst", "gen_api/neurolang.probabilistic.dalvi_suciu_lift.rst", "gen_api/neurolang.probabilistic.distributions.rst", "gen_api/neurolang.probabilistic.exceptions.rst", "gen_api/neurolang.probabilistic.expression_processing.rst", "gen_api/neurolang.probabilistic.expressions.rst", "gen_api/neurolang.probabilistic.magic_sets_processing.rst", "gen_api/neurolang.probabilistic.ppdl.rst", "gen_api/neurolang.probabilistic.probabilistic_ra_utils.rst", "gen_api/neurolang.probabilistic.probabilistic_semiring_solver.rst", "gen_api/neurolang.probabilistic.query_resolution.rst", "gen_api/neurolang.probabilistic.ranking.rst", "gen_api/neurolang.probabilistic.shattering.rst", "gen_api/neurolang.probabilistic.small_dichotomy_theorem_based_solver.rst", "gen_api/neurolang.probabilistic.stratification.rst", "gen_api/neurolang.probabilistic.transforms.rst", "gen_api/neurolang.probabilistic.weighted_model_counting.rst", "gen_api/neurolang.region_solver.rst", "gen_api/neurolang.regions.rst", "gen_api/neurolang.relational_algebra.rst", "gen_api/neurolang.relational_algebra.optimisers.rst", "gen_api/neurolang.relational_algebra.relational_algebra.rst", "gen_api/neurolang.relational_algebra_provenance.rst", "gen_api/neurolang.solver.rst", "gen_api/neurolang.type_system.rst", "gen_api/neurolang.typed_symbol_table.rst", "gen_api/neurolang.utils.rst", "gen_api/neurolang.utils.data_manipulation.rst", "gen_api/neurolang.utils.interactive_parsing.rst", "gen_api/neurolang.utils.orderedset.rst", "gen_api/neurolang.utils.relational_algebra_set.rst", "gen_api/neurolang.utils.relational_algebra_set.abstract.rst", "gen_api/neurolang.utils.relational_algebra_set.dask_helpers.rst", "gen_api/neurolang.utils.relational_algebra_set.dask_sql.rst", "gen_api/neurolang.utils.relational_algebra_set.pandas.rst", "gen_api/neurolang.utils.server.rst", "gen_api/neurolang.utils.server.app.rst", "gen_api/neurolang.utils.server.engines.rst", "gen_api/neurolang.utils.server.queries.rst", "gen_api/neurolang.utils.server.responses.rst", "gen_api/neurolang.utils.testing.rst", "gen_api/neurolang.utils.testing.logic.rst", "gen_api/neurolang.utils.various.rst", "index.rst", "install.rst", "sg_execution_times.rst", "tutorial.rst", "tutorial_logic_programming.rst"], "titles": ["User Guide", "People", "Examples of the NeuroLang language environment.", "Example where a spatial prior is defined based on the distance between voxels and foci in a coordinate-based meta-analysis database", "Datalog Intermediate Representation Example based on the Destrieux Atlas", "Loading and Querying the Destrieux et al. Atlas\u2019 Left Hemisphere", "NeuroLang Example based Implementing a NeuroSynth Query", "Computation times", "neurolang", "neurolang package", "neurolang.CD_relations module", "neurolang.NeurolangDL", "neurolang.NeurolangPDL", "neurolang.aabb_tree module", "neurolang.commands module", "neurolang.config package", "neurolang.datalog", "neurolang.datalog.aggregation module", "neurolang.datalog.basic_representation module", "neurolang.datalog.chase package", "neurolang.datalog.chase.general module", "neurolang.datalog.chase.mgu module", "neurolang.datalog.chase.negation module", "neurolang.datalog.chase.relational_algebra module", "neurolang.datalog.constraints_representation module", "neurolang.datalog.exceptions module", "neurolang.datalog.expression_processing module", "neurolang.datalog.expressions module", "neurolang.datalog.instance module", "neurolang.datalog.magic_sets module", "neurolang.datalog.negation module", "neurolang.datalog.ontologies_parser module", "neurolang.datalog.ontologies_rewriter module", "neurolang.datalog.translate_to_named_ra module", "neurolang.datalog.wrapped_collections module", "neurolang.datalog_chase module", "neurolang.exceptions", "neurolang.expression_pattern_matching", "neurolang.expression_walker", "neurolang.expressions", "neurolang.frontend package", "neurolang.frontend.ast module", "neurolang.frontend.ast_lark module", "neurolang.frontend.datalog package", "neurolang.frontend.datalog.standard_syntax module", "neurolang.frontend.datalog.sugar package", "neurolang.frontend.datalog.sugar.spatial module", "neurolang.frontend.datalog.syntax_preprocessing module", "neurolang.frontend.deterministic_frontend module", "neurolang.frontend.drs package", "neurolang.frontend.drs.chart_parser module", "neurolang.frontend.drs.drs_builder module", "neurolang.frontend.drs.english_grammar module", "neurolang.frontend.drs.exceptions module", "neurolang.frontend.drs.translate_to_dl module", "neurolang.frontend.frontend_extensions module", "neurolang.frontend.neurolang module", "neurolang.frontend.neurosynth_utils module", "neurolang.frontend.probabilistic_frontend module", "neurolang.frontend.query_resolution module", "neurolang.frontend.query_resolution_datalog module", "neurolang.frontend.query_resolution_expressions module", "neurolang.interval_algebra module", "neurolang.logic", "neurolang.logic.expression_processing module", "neurolang.logic.horn_clauses module", "neurolang.logic.transformations module", "neurolang.logic.unification module", "neurolang.neurolang module", "neurolang.neurolang_compiler module", "neurolang.perior_tree module", "neurolang.probabilistic", "neurolang.probabilistic.containment module", "neurolang.probabilistic.cplogic package", "neurolang.probabilistic.cplogic.cplogic_to_gm module", "neurolang.probabilistic.cplogic.gm_provenance_solver module", "neurolang.probabilistic.cplogic.grounding module", "neurolang.probabilistic.cplogic.problog_solver module", "neurolang.probabilistic.cplogic.program module", "neurolang.probabilistic.cplogic.testing module", "neurolang.probabilistic.dalvi_suciu_lift module", "neurolang.probabilistic.distributions module", "neurolang.probabilistic.exceptions module", "neurolang.probabilistic.expression_processing module", "neurolang.probabilistic.expressions module", "neurolang.probabilistic.magic_sets_processing module", "neurolang.probabilistic.ppdl module", "neurolang.probabilistic.probabilistic_ra_utils module", "neurolang.probabilistic.probabilistic_semiring_solver module", "neurolang.probabilistic.query_resolution module", "neurolang.probabilistic.ranking module", "neurolang.probabilistic.shattering module", "neurolang.probabilistic.small_dichotomy_theorem_based_solver module", "neurolang.probabilistic.stratification module", "neurolang.probabilistic.transforms module", "neurolang.probabilistic.weighted_model_counting module", "neurolang.region_solver module", "neurolang.regions module", "neurolang.relational_algebra", "neurolang.relational_algebra.optimisers module", "neurolang.relational_algebra.relational_algebra module", "neurolang.relational_algebra_provenance", "neurolang.solver module", "neurolang.type_system package", "neurolang.typed_symbol_table module", "neurolang.utils package", "neurolang.utils.data_manipulation module", "neurolang.utils.interactive_parsing module", "neurolang.utils.orderedset module", "neurolang.utils.relational_algebra_set package", "neurolang.utils.relational_algebra_set.abstract module", "neurolang.utils.relational_algebra_set.dask_helpers module", "neurolang.utils.relational_algebra_set.dask_sql module", "neurolang.utils.relational_algebra_set.pandas module", "neurolang.utils.server package", "neurolang.utils.server.app module", "neurolang.utils.server.engines module", "neurolang.utils.server.queries module", "neurolang.utils.server.responses module", "neurolang.utils.testing package", "neurolang.utils.testing.logic module", "neurolang.utils.various module", "Welcome to Neurolang\u2019s documentation!", "Installing Neurolang", "Computation times", "Get Started with NeuroLang", "NeuroLang for Logic Programmers"], "terms": {"index": [0, 9, 24, 31, 87, 100, 105, 108], "modul": [0, 8, 9, 15, 19, 37, 40, 43, 45, 49, 73, 98, 105, 109, 114, 119, 123], "search": 0, "page": [0, 92], "thi": [1, 15, 19, 20, 24, 26, 29, 30, 31, 40, 45, 46, 54, 55, 58, 59, 60, 65, 68, 74, 78, 85, 89, 92, 93, 116, 117, 118, 120, 123, 125, 126], "work": [1, 19, 20, 25, 102, 123], "i": [1, 2, 6, 7, 15, 17, 24, 25, 26, 29, 30, 31, 40, 41, 45, 46, 48, 54, 57, 58, 59, 60, 61, 64, 65, 66, 68, 72, 73, 74, 78, 80, 81, 83, 85, 87, 89, 92, 93, 94, 100, 103, 105, 108, 109, 113, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126], "made": [1, 55], "avail": [1, 55, 117], "commun": 1, "amongst": 1, "within": [1, 59, 83, 85, 93, 105, 121], "inria": 1, "pariet": 1, "project": [1, 9, 33, 40, 48, 61, 87, 89, 100, 105, 109, 110, 113], "team": 1, "folk": 1, "particular": [1, 3, 87], "demian": 1, "wassermann": 1, "antonia": 1, "machlouzarid": 1, "shalit": 1, "valentin": 1, "ioven": 1, "gaston": 1, "zanitti": 1, "matia": 1, "schimt": 1, "nikita": 1, "zdainovich": 1, "kshitij": 1, "chawla": 1, "ha": [1, 24, 25, 26, 45, 57, 59, 64, 78, 87, 105, 121], "been": [1, 11, 40, 48, 58, 60, 68, 78, 89], "erc": 1, "start": [1, 8, 9, 43, 44, 62, 65, 105, 107, 108, 118, 122, 126], "grant": 1, "There": [1, 60, 89, 123], "paper": 1, "publish": [1, 19, 23], "yet": 1, "about": [1, 118], "But": 1, "thei": [1, 24, 30, 54, 57, 73, 85, 126], "ar": [1, 14, 19, 20, 24, 25, 26, 29, 30, 40, 41, 53, 54, 57, 58, 59, 60, 61, 64, 65, 66, 68, 72, 74, 78, 80, 83, 87, 89, 93, 94, 100, 105, 109, 113, 117, 123, 125, 126], "upcom": 1, "sever": 1, "public": 1, "have": [1, 11, 12, 18, 34, 40, 45, 48, 57, 58, 60, 61, 65, 68, 89, 105, 109, 113, 123, 126], "produc": [1, 17, 24, 26, 29, 74, 80, 89, 92], "shown": 1, "here": [1, 65], "load": [2, 3, 6, 7, 14, 24, 40, 57, 58, 59, 68, 124, 125, 126], "queri": [2, 3, 7, 9, 11, 12, 17, 19, 23, 24, 26, 29, 32, 40, 43, 44, 45, 47, 48, 58, 64, 65, 66, 68, 72, 78, 80, 83, 85, 87, 89, 90, 91, 92, 93, 94, 95, 102, 105, 109, 113, 114, 118, 122, 123, 124, 125, 126], "destrieux": [2, 7, 124, 125], "et": [2, 7, 19, 23, 29, 124, 125], "al": [2, 7, 19, 23, 29, 124, 125], "atla": [2, 3, 6, 7, 14, 59, 114, 116, 117, 124, 125], "left": [2, 4, 7, 9, 13, 29, 33, 70, 78, 83, 103, 124, 125], "hemispher": [2, 7, 124, 125], "datalog": [2, 7, 8, 9, 11, 12, 40, 48, 53, 54, 58, 59, 61, 65, 68, 72, 73, 76, 78, 80, 86, 94, 117, 124, 125], "intermedi": [2, 7, 11, 17, 18, 24, 26, 27, 39, 40, 41, 45, 48, 68, 98, 124], "represent": [2, 7, 11, 17, 18, 19, 21, 22, 24, 26, 27, 39, 40, 41, 48, 59, 61, 68, 87, 98, 100, 118, 124], "base": [2, 7, 9, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 64, 65, 66, 68, 69, 70, 74, 76, 78, 81, 82, 84, 85, 86, 87, 88, 89, 91, 93, 95, 96, 97, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 116, 117, 118, 122, 123, 124, 125], "implement": [2, 7, 19, 20, 29, 30, 33, 37, 43, 50, 65, 83, 86, 92, 95, 98, 103, 105, 109, 113, 118, 122, 124, 126], "neurosynth": [2, 7, 9, 11, 40, 57, 60, 122, 124], "where": [2, 7, 17, 24, 26, 29, 40, 45, 46, 53, 55, 57, 58, 59, 65, 68, 74, 78, 81, 85, 87, 89, 94, 100, 102, 105, 109, 113, 124], "spatial": [2, 7, 43, 45, 118, 124], "prior": [2, 7, 124], "defin": [2, 7, 24, 26, 29, 30, 41, 45, 46, 65, 74, 93, 94, 100, 117, 124, 125], "distanc": [2, 7, 46, 124], "between": [2, 7, 46, 54, 57, 65, 67, 78, 83, 120, 124], "voxel": [2, 4, 5, 6, 7, 40, 48, 59, 68, 97, 124], "foci": [2, 7, 124], "coordin": [2, 7, 40, 46, 48, 57, 59, 68, 97, 118, 124], "meta": [2, 7, 59, 122, 124], "analysi": [2, 7, 59, 122, 124], "databas": [2, 6, 7, 17, 19, 23, 26, 29, 32, 33, 59, 60, 65, 78, 83, 92, 93, 100, 124, 125], "download": [2, 3, 4, 5, 6, 57, 59], "all": [2, 5, 9, 24, 26, 40, 58, 59, 60, 61, 64, 65, 68, 73, 74, 78, 89, 100, 103, 123, 124, 125, 126], "python": [2, 3, 4, 5, 6, 40, 48, 60, 61, 123, 125], "sourc": [2, 3, 4, 5, 6, 125], "code": [2, 3, 4, 5, 6, 24, 25, 26, 29, 41, 44, 60, 78, 105, 121], "auto_examples_python": 2, "zip": [2, 5, 123], "jupyt": [2, 3, 4, 5, 6], "notebook": [2, 3, 4, 5, 6], "auto_examples_jupyt": 2, "galleri": [2, 3, 4, 5, 6, 122, 124, 125], "gener": [2, 3, 4, 5, 6, 19, 25, 26, 31, 40, 58, 59, 61, 67, 68, 87, 89, 100, 126], "sphinx": [2, 3, 4, 5, 6], "go": [3, 4, 5, 6, 41, 94], "end": [3, 4, 5, 6, 12, 40, 58, 61, 68, 105, 116, 121, 125], "full": [3, 4, 5, 6, 118, 125], "each": [3, 24, 26, 29, 40, 57, 58, 59, 65, 66, 68, 74, 80, 83, 87, 89, 92, 94, 95, 100, 102, 118, 126], "": [3, 4, 5, 6, 11, 12, 17, 19, 23, 26, 28, 29, 33, 40, 45, 48, 51, 55, 57, 58, 59, 60, 61, 64, 65, 68, 73, 74, 78, 80, 83, 85, 87, 89, 92, 100, 105, 109, 113, 123, 125], "probabl": [3, 40, 58, 68, 73, 74, 78, 80, 81, 83, 84, 89, 92, 95], "being": [3, 57, 73, 100, 117, 125], "report": [3, 57, 59], "studi": [3, 6, 57, 59], "calcul": [3, 74, 100, 118], "whether": [3, 18, 26, 29, 34, 60, 64, 72, 83, 100, 105, 109, 113], "focu": 3, "peak": [3, 57, 59], "activ": [3, 6, 102, 123], "The": [3, 14, 18, 24, 26, 29, 31, 53, 54, 55, 57, 59, 65, 73, 74, 78, 80, 83, 85, 87, 89, 95, 99, 100, 105, 109, 113, 117, 118, 120, 125], "how": [3, 29, 65, 117, 126], "far": 3, "from": [3, 5, 6, 7, 14, 19, 23, 24, 26, 29, 31, 33, 40, 48, 53, 57, 58, 59, 60, 61, 64, 65, 68, 73, 78, 80, 83, 84, 87, 89, 93, 94, 100, 116, 120, 123, 124, 125, 126], "happen": [3, 73, 100], "import": [3, 4, 5, 6, 15, 123, 126], "warn": [3, 4, 5, 6], "filterwarn": [3, 4, 5, 6], "ignor": [3, 4, 5, 6], "pathlib": [3, 6], "path": [3, 6, 31, 40, 57, 58, 59, 68, 116, 123], "type": [3, 4, 5, 6, 9, 11, 12, 14, 17, 18, 19, 20, 23, 24, 26, 27, 29, 30, 31, 32, 33, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 57, 58, 59, 60, 61, 64, 65, 66, 68, 73, 74, 76, 78, 84, 85, 86, 87, 88, 89, 91, 92, 93, 95, 96, 99, 100, 102, 103, 104, 117, 118, 123, 126], "iter": [3, 6, 11, 12, 14, 17, 18, 23, 24, 26, 27, 29, 30, 32, 33, 34, 40, 45, 46, 47, 48, 50, 51, 54, 58, 59, 60, 61, 64, 65, 66, 68, 74, 76, 78, 83, 85, 86, 87, 88, 89, 91, 94, 95, 96, 99, 100, 102, 105, 108, 109, 110, 113, 118, 121, 126], "nibabel": [3, 4, 5, 6, 117, 118, 123], "nilearn": [3, 5, 6, 57, 123], "dataset": [3, 4, 5, 6, 57, 59], "imag": [3, 4, 6, 14, 57, 59, 100, 109, 110, 118, 125], "plot": [3, 4, 5, 6], "numpi": [3, 4, 6, 34, 55, 126], "np": [3, 4, 6, 51, 59], "neurolang": [3, 4, 5, 7, 124], "frontend": [3, 5, 6, 8, 9, 11, 68, 126], "explicitvbr": [3, 4, 5, 8, 9, 40, 48, 59, 68, 97, 118], "explicitvbroverlai": [3, 6, 8, 9, 40, 48, 68, 97, 118], "neurolangpdl": [3, 6, 8, 9, 40, 58, 68, 116, 126], "neurosynth_util": [3, 6, 9, 40], "get_ns_mni_peaks_report": [3, 6, 9, 40, 57], "data": [3, 5, 14, 19, 23, 40, 57, 58, 59, 68, 97, 118, 122, 123, 125], "prepar": 3, "data_dir": [3, 6, 57, 59, 116], "home": [3, 5, 6], "neurolang_data": [3, 6], "mni": [3, 6, 57, 59, 117], "resampl": [3, 6], "4mm": [3, 6], "mni_t1": [3, 6], "fetch_icbm152_2009": [3, 6], "str": [3, 4, 5, 6, 40, 48, 52, 57, 58, 59, 60, 61, 68, 96, 100, 105, 107, 109, 110, 113, 117, 118, 121], "icbm": [3, 6], "t1": [3, 6, 103], "mni_t1_2mm": 3, "resample_img": [3, 6], "ey": [3, 6], "3": [3, 6, 29, 46, 50, 59, 60, 83, 105, 109, 113, 125, 126], "2": [3, 5, 6, 12, 26, 29, 40, 41, 45, 50, 54, 58, 59, 60, 61, 68, 72, 74, 78, 89, 92, 100, 105, 109, 113, 126], "probabilist": [3, 5, 8, 9, 12, 29, 40, 45, 68, 116, 122, 125, 126], "logic": [3, 8, 9, 26, 47, 54, 59, 60, 61, 72, 80, 83, 87, 89, 92, 94, 95, 102, 105, 119, 122], "program": [3, 11, 12, 18, 19, 20, 24, 25, 26, 27, 29, 40, 48, 58, 59, 60, 61, 65, 68, 73, 74, 80, 83, 85, 86, 87, 89, 92, 93, 95, 122, 123, 126], "nl": [3, 5, 6, 59, 60, 116, 126], "ad": [3, 6, 29, 59, 65, 73, 83, 87, 89, 94, 100, 116], "new": [3, 6, 26, 29, 40, 58, 68, 73, 81, 83, 92, 100, 126], "aggreg": [3, 6, 9, 25, 34, 88, 95, 100, 105, 109, 110, 113, 116], "function": [3, 5, 6, 11, 12, 19, 20, 24, 25, 31, 37, 38, 39, 40, 46, 48, 55, 58, 59, 60, 61, 65, 66, 67, 68, 81, 84, 86, 89, 100, 101, 103, 105, 109, 113, 120], "build": [3, 6, 61], "region": [3, 5, 6, 8, 9, 10, 11, 12, 13, 40, 48, 58, 60, 68, 96, 118, 125], "overlai": [3, 6, 40, 48, 68, 97], "add_symbol": [3, 5, 6, 40, 59, 126], "def": [3, 4, 5, 6, 118, 126], "agg_create_region_overlai": [3, 6], "j": [3, 6, 17, 29, 80, 92], "k": [3, 6, 55, 97, 125], "p": [3, 6, 17, 18, 26, 27, 29, 40, 45, 57, 58, 65, 68, 74, 78, 80, 81, 83, 85, 89, 92, 93, 95], "c_": [3, 4, 6], "return": [3, 4, 5, 6, 11, 12, 24, 26, 29, 31, 40, 41, 48, 53, 57, 58, 59, 60, 61, 64, 65, 67, 68, 73, 78, 80, 83, 87, 89, 93, 94, 95, 97, 100, 102, 105, 108, 109, 113, 116, 117, 118, 126], "affin": [3, 4, 5, 6, 40, 48, 59, 68, 97], "image_dim": [3, 4, 6, 40, 48, 68, 97], "shape": [3, 4, 6], "peak_data": [3, 6, 57], "ijk_posit": [3, 6], "round": [3, 6], "apply_affin": [3, 6], "linalg": [3, 6], "inv": [3, 6], "x": [3, 4, 5, 6, 17, 18, 26, 27, 29, 45, 46, 55, 57, 58, 60, 61, 65, 74, 78, 80, 81, 83, 85, 89, 92, 93, 94, 95, 100, 125, 126], "y": [3, 6, 17, 26, 29, 45, 57, 58, 60, 81, 83, 85, 89, 92, 93, 94, 100, 125, 126], "z": [3, 6, 17, 45, 57, 93, 100, 126], "valu": [3, 6, 9, 15, 18, 24, 28, 34, 40, 46, 48, 57, 58, 59, 60, 61, 68, 74, 78, 81, 87, 89, 97, 100, 102, 103, 105, 108, 109, 110, 113, 116, 118], "astyp": [3, 4, 6], "float": [3, 6, 34, 40, 46, 55, 57, 58, 59, 60, 68, 70], "int": [3, 4, 6, 17, 29, 34, 57, 59, 60, 61, 70, 100, 105, 107, 109, 110, 113, 116, 117, 118, 126], "0": [3, 4, 5, 6, 7, 13, 19, 20, 35, 40, 48, 50, 57, 59, 60, 61, 68, 70, 74, 78, 95, 97, 105, 109, 113, 118, 124, 126], "1": [3, 4, 5, 6, 12, 17, 19, 20, 23, 29, 33, 35, 40, 41, 45, 48, 50, 57, 58, 59, 60, 61, 65, 68, 73, 74, 78, 80, 83, 89, 92, 97, 100, 105, 109, 113, 118, 123, 126], "id": [3, 6, 19, 23, 57, 59, 116, 117], "add_tuple_set": [3, 6, 40, 59, 60, 126], "name": [3, 4, 5, 6, 11, 12, 14, 15, 19, 23, 29, 40, 41, 44, 48, 58, 59, 60, 61, 68, 73, 100, 126], "focusreport": 3, "study_id": [3, 6], "load_neurosynth_study_id": [3, 6, 40, 59], "add_uniform_probabilistic_choice_over_set": [3, 6, 9, 40, 58, 68], "selectedstudi": [3, 6], "load_neurosynth_term_study_associ": [3, 6, 40, 59], "terminstudytfidf": [3, 6], "tfidf_threshold": [3, 6, 57, 59], "1e": [3, 6], "hstack": 3, "meshgrid": 3, "arang": 3, "dim": [3, 9, 13, 59, 70, 97], "get_fdata": [3, 4, 6], "swapax": 3, "reshap": 3, "t": [3, 6, 17, 26, 29, 40, 45, 48, 61, 67, 74, 78, 102, 123, 125], "environ": [3, 11, 12, 40, 48, 58, 59, 60, 68, 122, 123, 126], "e": [3, 5, 6, 60, 61, 65, 66, 85, 93, 100, 107, 125, 126], "voxelreport": 3, "max": [3, 17, 118, 125], "exp": [3, 29, 54, 55, 65, 66, 83, 86, 100], "d": [3, 28, 29, 46, 50, 80, 85, 100, 125], "5": [3, 5, 17, 19, 23, 33, 50, 100, 105, 109, 113, 126], "i1": [3, 46, 62], "j1": [3, 46], "k1": [3, 46], "i2": [3, 46, 62], "j2": [3, 46], "k2": [3, 46], "euclidean": [3, 46], "termassoci": [3, 6], "probmap": 3, "prob": [3, 6, 45, 58, 78, 85], "emot": 3, "img": [3, 6], "img_queri": [3, 6], "result": [3, 4, 5, 19, 23, 40, 53, 57, 58, 59, 60, 64, 65, 68, 73, 76, 80, 89, 92, 95, 100, 117, 118], "result_imag": [3, 6], "fetch_on": [3, 6, 9, 18, 34, 105, 109, 110, 113], "spatial_imag": [3, 4, 5, 6, 9, 40, 48, 59, 68, 97], "plot_stat_map": [3, 6], "threshold": [3, 6, 57], "percentil": [3, 6], "95": [3, 6], "show": [3, 6], "total": [3, 4, 5, 6, 7, 116, 124], "run": [3, 5, 6, 117, 118, 123], "time": [3, 4, 5, 6, 15, 78, 92, 100, 123], "script": [3, 4, 5, 6, 123], "minut": [3, 4, 5, 6], "16": [3, 4, 7, 92, 124], "958": [3, 7, 124], "second": [3, 4, 5, 6, 26, 60, 89, 102, 105, 116, 120, 121], "plot_cbma_spatial_prior": [3, 7, 124], "ipynb": [3, 4, 5, 6], "py": [3, 4, 5, 6, 7, 122, 123, 124], "upload": [4, 5], "sulci": 4, "execut": [4, 5, 7, 60, 98, 100, 105, 117, 121, 123, 124], "some": [4, 15, 41, 46, 65, 116, 122, 123, 126], "simpl": [4, 5], "matplotlib": [4, 5, 118, 123], "pyplot": [4, 5], "plt": [4, 5], "nib": [4, 5], "chase": [4, 11, 12, 17, 35, 40, 58, 60, 68, 73, 76], "expression_walk": [4, 8, 9], "ew": 4, "express": [4, 8, 9, 11, 12, 17, 18, 24, 26, 29, 30, 32, 33, 37, 40, 41, 43, 44, 45, 46, 47, 48, 50, 51, 53, 58, 59, 60, 64, 65, 66, 67, 68, 74, 78, 80, 83, 87, 88, 89, 91, 92, 94, 95, 98, 99, 100, 102, 105, 109, 113, 120, 125], "region_solv": [4, 8, 9], "datalogprogram": [4, 11, 18, 24, 26, 29, 30, 55, 59, 60, 76, 78, 85, 86], "implic": [4, 9, 17, 18, 24, 26, 27, 29, 30, 31, 40, 45, 46, 49, 51, 54, 60, 61, 65, 66, 78, 80, 83, 85, 89, 92, 93, 94, 95], "translatetolog": [4, 17, 26, 27, 64, 76], "up": [4, 29, 66, 123], "ir": [4, 40, 41, 58, 59, 68], "shortcut": 4, "constant": [4, 18, 25, 26, 29, 40, 43, 45, 46, 59, 61, 64, 72, 73, 74, 78, 89, 94, 100, 102], "s_": 4, "symbol": [4, 8, 9, 11, 12, 14, 18, 24, 26, 29, 30, 40, 43, 44, 45, 46, 48, 58, 59, 60, 61, 64, 66, 68, 69, 73, 76, 78, 83, 86, 87, 89, 94, 95, 100, 102, 117, 118, 126], "imp_": 4, "fact_": 4, "eb_": 4, "expressionblock": [4, 24, 26, 65], "atlas_destrieux": [4, 5], "fetch_atlas_destrieux_2009": [4, 5], "map": [4, 5, 28, 29, 87, 89, 93, 100], "image_data": 4, "style": [4, 125], "region_dict": 4, "label": [4, 5, 14, 31, 40, 57, 58, 59, 68, 74, 78, 80, 89, 92, 95, 97, 125], "continu": [4, 53], "transpos": 4, "nonzero": 4, "r": [4, 5, 19, 23, 33, 45, 60, 100, 123, 125], "plot_roi": [4, 5], "l": [4, 5, 19, 23, 60, 125], "s_temporal_sup": 4, "displai": [4, 105, 118, 121], "_slicer": 4, "orthoslic": 4, "object": [4, 13, 15, 17, 18, 19, 20, 21, 22, 23, 28, 31, 32, 34, 41, 42, 50, 52, 54, 55, 59, 61, 69, 70, 74, 81, 94, 97, 98, 100, 107, 110, 116, 117, 118], "0x7f1e12747ee0": 4, "make": [4, 53, 74, 78, 89, 125], "destrieux_fact": 4, "item": [4, 28, 105, 109, 113, 118], "class": [4, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 74, 76, 78, 81, 84, 85, 86, 87, 88, 89, 91, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 113, 116, 117, 118, 126], "regionsolv": [4, 8, 9, 58, 96], "expressionbasicevalu": [4, 33, 58, 76, 102], "function_lh": 4, "self": [4, 29, 92, 118], "bool": [4, 5, 26, 29, 57, 58, 59, 60, 61, 62, 64, 66, 70, 80, 87, 89, 92, 100, 105, 109, 113, 117, 118], "startswith": [4, 5, 125], "function_rh": 4, "superior_sts_l": 4, "anatomical_superior_of": 4, "region_l_st": 4, "name_": 4, "r1": [4, 46], "print": [4, 126], "datalog_program": [4, 19, 20, 22, 35, 76], "\u03bb": 4, "unknown": [4, 8, 9, 17, 18, 34, 40, 58, 59, 60, 65, 68, 78, 103], "c": [4, 17, 45, 52, 55, 81, 85, 123, 126], "and_": [4, 61], "callabl": [4, 11, 12, 17, 40, 48, 55, 58, 59, 60, 68, 103, 105, 109, 113], "type_system": [4, 8, 9, 17, 18, 34, 40, 58, 59, 60, 68], "dl": [4, 19, 23, 103], "walk": [4, 14, 17, 18, 23, 24, 26, 27, 29, 30, 32, 33, 41, 45, 46, 47, 51, 54, 58, 61, 64, 65, 66, 74, 76, 78, 85, 86, 87, 88, 89, 91, 95, 96, 99, 100, 102], "solut": [4, 11, 12, 40, 58, 60, 68, 89, 95], "build_chase_solut": [4, 19, 20, 22, 35, 76], "extract": [4, 5, 6, 18, 24, 26, 64, 87], "first": [4, 26, 29, 40, 45, 47, 58, 59, 60, 65, 68, 78, 92, 102, 105, 108, 120, 121, 126], "element": [4, 12, 28, 40, 45, 48, 58, 59, 60, 61, 68, 78, 100, 105, 108, 109, 110, 113, 126], "rsbv": 4, "replaceexpressionsbyvalu": 4, "unwrapped_it": [4, 18, 34], "figur": [4, 15, 24, 26, 118], "titl": [4, 57], "419": [4, 7, 124], "plot_load_destrieux_datalog_ir": [4, 7, 124], "exampl": [5, 7, 26, 31, 40, 58, 59, 60, 68, 74, 78, 89, 100, 105, 109, 113, 118, 122, 124, 125], "neurolangdl": [5, 8, 9, 40, 48, 68, 116, 126], "initialis": [5, 126], "engin": [5, 60, 105, 114, 117], "fact": [5, 9, 12, 18, 24, 27, 30, 40, 43, 44, 45, 54, 58, 59, 60, 61, 68, 74, 76, 78, 83, 86, 87, 89, 126], "list": [5, 11, 12, 19, 20, 24, 26, 31, 40, 41, 48, 50, 58, 59, 60, 65, 68, 89, 93, 100, 105, 109, 113, 118], "atlas_label": [5, 59], "add_atlas_set": [5, 40, 59], "destrieux_atla": [5, 125], "creat": [5, 6, 11, 12, 29, 40, 48, 58, 59, 60, 68, 114, 116, 117, 118, 123], "circleci": [5, 6], "nilearn_data": 5, "destrieux_2009": 5, "http": [5, 6, 19, 23, 59, 83, 123], "www": 5, "nitrc": 5, "org": [5, 19, 23, 59, 83], "fr": 5, "php": 5, "11942": 5, "destrieux2009": 5, "tgz": 5, "done": [5, 6, 118], "min": [5, 6, 118], "2a2e5a5707983d509d9319c692c867ab": 5, "abstractset": [5, 6, 40, 58, 59, 60, 68, 74, 96, 100, 126], "tupl": [5, 6, 12, 17, 19, 20, 29, 35, 40, 46, 50, 58, 59, 60, 61, 67, 68, 70, 73, 78, 80, 87, 89, 92, 95, 100, 105, 118, 121, 125, 126], "background": 5, "vbr": [5, 118], "76": 5, "109": 5, "64": 5, "75": 5, "92": 5, "73": 5, "74": 5, "add": [5, 9, 12, 13, 17, 18, 28, 29, 30, 34, 40, 55, 58, 59, 60, 68, 70, 78, 94, 95, 100, 105, 108, 109, 110, 113, 116, 126], "util": [5, 8, 9, 26, 123], "prefix": [5, 105, 107], "superior": 5, "tempor": 5, "suluc": 5, "anterior": 5, "central": 5, "sulcu": [5, 125], "scope": [5, 6, 11, 12, 40, 48, 58, 59, 60, 68, 125], "on_left_hemispher": 5, "visualis": 5, "subplot": 5, "nrow": 5, "len": [5, 126], "ncol": 5, "figsiz": 5, "10": [5, 83, 125], "ax": 5, "50": [5, 7, 118, 124], "294": [5, 7, 124], "plot_load_destrieux_left_hemisphere_gyri": [5, 7, 124], "panda": [6, 14, 57, 105, 109, 123], "pd": [6, 57, 118], "mni_t1_4mm": 6, "4": [6, 7, 19, 23, 29, 33, 46, 50, 57, 59, 60, 65, 92, 105, 109, 113, 124, 126], "icbm152_2009": 6, "osf": 6, "io": 6, "7pj92": 6, "e05b733c275cab0eec856067143c9dc9": 6, "mni_coord": 6, "peakreport": 6, "github": [6, 123], "com": [6, 123], "raw": 6, "master": [6, 123], "neurosynth_vers": 6, "7_coordin": 6, "tsv": [6, 57], "gz": [6, 57], "7_metadata": 6, "7_vocab": 6, "terms_sourc": 6, "abstract_typ": 6, "tfidf_featur": [6, 57], "npz": [6, 57], "terms_vocabulari": 6, "txt": 6, "9862924": 6, "001": 6, "0553942161114": 6, "activationgiventerm": 6, "auditori": 6, "activationgiventermimag": 6, "17": [6, 7, 124], "047": [6, 7, 124], "plot_neurosynth_implement": [6, 7, 124], "02": [7, 124], "40": [7, 124], "718": [7, 124], "file": [7, 40, 57, 58, 68, 123, 124], "auto_exampl": 7, "mem": [7, 124], "mb": [7, 124], "01": [7, 124], "00": [7, 124], "packag": [8, 123], "subpackag": 8, "config": [8, 9, 123], "neurolangconfigpars": [8, 9, 15], "submodul": 8, "relational_algebra": [8, 9, 19], "neurolangtypeexcept": [8, 9, 103], "get_arg": [8, 9, 103], "get_generic_typ": [8, 9, 103], "infer_typ": [8, 9, 103], "infer_type_builtin": [8, 9, 103], "infer_type_iter": [8, 9, 103], "infer_type_map": [8, 9, 103], "is_consist": [8, 9, 103], "is_leq_inform": [8, 9, 103], "is_leq_informative_parameterized_right": [8, 9, 103], "is_leq_informative_union": [8, 9, 103], "is_parameter": [8, 9, 103], "is_parametr": [8, 9, 103], "is_typ": [8, 9, 103], "replace_type_vari": [8, 9, 103], "replace_type_variable_fix_python36_37": [8, 9, 103], "typing_callable_from_annotated_funct": [8, 9, 103], "unify_typ": [8, 9, 103], "namedrelationalalgebrafrozenset": [8, 9, 34, 40, 58, 60, 68, 73, 80, 92, 100, 105, 109, 110, 113], "orderedset": [8, 9, 26, 64, 105], "relationalalgebrafrozenset": [8, 9, 34, 60, 105, 109, 110, 113, 118], "relationalalgebraset": [8, 9, 18, 34, 46, 98, 100, 105, 109, 110, 113], "relationalalgebrastringexpress": [8, 9, 105, 109, 113], "log_perform": [8, 9, 105, 121], "powerset": [8, 9, 105, 121], "cd_relat": [8, 9], "cardinal_rel": [8, 9, 10], "aabb_tre": [8, 9, 40, 48, 68, 97], "aabb": [8, 9, 13, 70], "node": [8, 9, 13, 19, 20, 26, 41, 70, 74], "tree": [8, 9, 13, 41, 53, 70], "aabb_from_vertic": [8, 9, 13], "command": [8, 9, 43, 44, 60, 105, 121], "commandsmixin": [8, 9, 14, 58], "datalog_chas": [8, 9], "chasenod": [8, 9, 19, 20, 35], "datalogchas": [8, 9, 35], "datalogchasegener": [8, 9, 35], "datalogchasemgumixin": [8, 9, 35], "datalogchaserelationalalgebramixin": [8, 9, 35], "except": [8, 9, 19, 20, 28, 37, 40, 49, 65, 94, 102, 103, 105, 108, 109, 110, 113, 118], "expression_pattern_match": [8, 9], "interval_algebra": [8, 9], "befor": [8, 9, 60, 62, 73, 105, 121, 123], "convers": [8, 9, 43, 45, 62], "dure": [8, 9, 53, 62], "equal": [8, 9, 26, 45, 46, 62, 83, 105, 109, 113, 120], "finish": [8, 9, 62, 105, 117, 121], "get_intervals_rel": [8, 9, 62], "meet": [8, 9, 60, 62, 123], "negat": [8, 9, 19, 25, 26, 27, 32, 40, 61, 62, 64, 65, 66, 92, 94, 125], "overlap": [8, 9, 13, 62, 70], "v_befor": [8, 9, 62], "v_dure": [8, 9, 62], "v_equal": [8, 9, 62], "v_finish": [8, 9, 62], "v_meet": [8, 9, 62], "v_overlap": [8, 9, 62], "v_start": [8, 9, 62], "neurolang_compil": [8, 9], "neurolangintermediaterepresentationcompil": [8, 9, 69], "perior_tre": [8, 9], "boundari": [8, 9, 70], "boundedaabb": [8, 9, 70], "methdispatch": [8, 9, 70], "implicitvbr": [8, 9, 97], "planarvolum": [8, 9, 97], "pointset": [8, 9, 97], "sphericalvolum": [8, 9, 97], "volumetricbrainregion": [8, 9, 40, 48, 68, 97], "region_differ": [8, 9, 97], "region_intersect": [8, 9, 97], "region_set_from_masked_data": [8, 9, 97], "region_union": [8, 9, 97], "take_principal_region": [8, 9, 97], "relational_algebra_proven": [8, 9], "solver": [8, 9, 12, 30, 65, 69, 95, 98], "booleanoperationssolv": [8, 9, 102], "booleanrewritesolv": [8, 9, 102], "firstorderlogicsolv": [8, 9, 102], "genericsolv": [8, 9, 102], "neurolangpredicateexcept": [8, 9, 102], "numericoperationssolv": [8, 9, 102], "typed_symbol_t": [8, 9], "typedsymbolt": [8, 9, 59, 104], "disable_expression_type_print": [9, 15], "disable_probabilistic_solver_check_un": [9, 15], "enable_expression_type_print": [9, 15], "enable_probabilistic_solver_check_un": [9, 15], "expression_type_print": [9, 15], "get_probabilistic_solver_check_un": [9, 15], "get_structural_knowledge_namespac": [9, 15], "set_query_backend": [9, 15, 123], "set_structural_knowledge_namespac": [9, 15], "switch_backend": [9, 15], "switch_expression_type_print": [9, 15], "bounding_box": [9, 40, 48, 68, 97], "build_tre": [9, 40, 48, 68, 97], "generate_bounding_box": [9, 40, 48, 68, 97], "to_ijk": [9, 40, 48, 68, 97], "to_xyz": [9, 40, 48, 68, 97], "add_probabilistic_choice_from_tupl": [9, 40, 58, 68, 73, 78], "add_probabilistic_facts_from_tupl": [9, 40, 58, 68, 73, 78], "current_program": [9, 11, 12, 40, 48, 58, 60, 68, 126], "load_ontologi": [9, 40, 58, 68], "solve_al": [9, 40, 58, 60, 68, 126], "neurolang_symbol": [9, 40, 48, 61], "dr": [9, 40], "ast": [9, 40, 44], "astnod": [9, 40, 41], "astwalk": [9, 40, 41], "ast_lark": [9, 40], "larkastconvert": [9, 40, 42], "deterministic_frontend": [9, 40], "frontend_extens": [9, 40], "numpyfunctionsmixin": [9, 40, 55, 58], "studyid": [9, 40, 57, 59], "tfidf": [9, 40, 57, 59], "fetch_feature_data": [9, 40, 57], "fetch_neurosynth_peak_data": [9, 40, 57], "fetch_study_metadata": [9, 40, 57], "get_ns_term_study_associ": [9, 40, 57], "probabilistic_frontend": [9, 40], "regionfrontendcplogicsolv": [9, 40, 58], "query_resolut": [9, 40, 102], "builder": [9, 11, 12, 40], "mixin": [9, 17, 40, 47, 55], "neurosynthmixin": [9, 40, 59, 60], "querybuilderbas": [9, 40, 48, 59, 60, 61], "querysymbolsproxi": [9, 40, 59], "regionmixin": [9, 40, 59, 60], "query_resolution_datalog": [9, 40], "querybuilderdatalog": [9, 11, 12, 40, 48, 58, 60, 68], "query_resolution_express": [9, 40, 59], "resolut": [9, 19, 20, 26, 40, 78, 89, 92, 116], "exist": [9, 40, 41, 59, 60, 61, 64, 67, 93, 94, 125], "oper": [9, 40, 60, 61, 62, 64, 66, 73, 94, 98, 100, 102, 120], "rightimpl": [9, 24, 40, 61], "translateexpressiontofrontendexpress": [9, 40, 61], "op_bind": [9, 40, 61], "rop_bind": [9, 40, 61], "ariti": [9, 18, 34, 105, 109, 110, 113], "column": [9, 18, 19, 23, 26, 34, 40, 43, 45, 57, 73, 74, 87, 89, 99, 100, 105, 109, 110, 113, 118], "create_view_from": [9, 18, 34, 105, 109, 110, 113], "cross_product": [9, 18, 34, 105, 109, 110, 113], "dee": [9, 18, 34, 105, 109, 110, 113], "dum": [9, 18, 34, 105, 109, 110, 113], "equijoin": [9, 18, 34, 99, 100, 105, 109, 110, 113], "explod": [9, 34, 105, 109, 110, 113], "extended_project": [9, 34, 88, 95, 100, 105, 109, 110, 113], "groupbi": [9, 18, 34, 100, 105, 109, 110, 113], "left_naturaljoin": [9, 34, 105, 109, 110, 113], "naturaljoin": [9, 34, 100, 105, 109, 110, 113], "projection_to_unnam": [9, 34, 105, 109, 110, 113], "rename_column": [9, 34, 100, 105, 109, 110, 113], "replace_nul": [9, 34, 88, 95, 100, 105, 109, 110, 113], "to_unnam": [9, 34, 105, 109, 110, 113], "copi": [9, 18, 28, 34, 105, 108, 109, 110, 113, 123], "discard": [9, 18, 28, 34, 105, 108, 109, 110, 113], "issubset": [9, 105, 108], "issuperset": [9, 105, 108], "replac": [9, 26, 45, 66, 83, 85, 105, 108], "as_numpy_arrai": [9, 18, 34, 105, 109, 110, 113], "as_pandas_datafram": [9, 18, 34, 105, 109, 113], "is_empti": [9, 18, 28, 34, 105, 109, 110, 113], "itervalu": [9, 18, 34, 105, 109, 110, 113], "might_have_dupl": [9, 18, 34, 105, 109, 113], "select": [9, 33, 59, 99, 100, 105, 109, 110, 113], "selection_column": [9, 33, 105, 109, 110, 113], "relational_algebra_set": [9, 105], "relationalalgebracolumnint": [9, 105, 109, 110], "relationalalgebracolumnstr": [9, 105, 109, 110], "server": [9, 105], "test": [9, 73, 105, 123], "data_manipul": [9, 105], "parse_region_label_map": [9, 105, 106], "interactive_pars": [9, 105], "completeresult": [9, 105, 107], "larkcomplet": [9, 105, 107], "variou": [9, 59, 105], "center": [9, 13, 40, 48, 59, 68, 70, 97, 118], "contain": [9, 13, 24, 26, 40, 46, 57, 58, 59, 60, 66, 68, 70, 73, 74, 78, 83, 87, 89, 92, 94, 98, 105, 109, 113, 118], "lb": [9, 13, 70, 97], "limit": [9, 13, 46, 70, 97, 117], "ub": [9, 13, 70, 97], "union": [9, 13, 24, 26, 27, 29, 32, 40, 41, 58, 59, 60, 64, 65, 66, 68, 70, 80, 83, 85, 89, 92, 93, 94, 100, 105, 109, 113, 116, 118], "volum": [9, 13, 59, 70], "width": [9, 13, 40, 48, 68, 70, 97], "children": [9, 13, 19, 20, 35, 41], "is_leaf": [9, 13, 70], "right": [9, 13, 24, 33, 60, 70, 83, 103, 125], "add_in_direct": [9, 13], "add_left": [9, 13], "add_right": [9, 13], "expand_region_box": [9, 13, 70], "query_overlapping_region": [9, 13], "query_regions_axdir": [9, 13, 70], "query_regions_contained_in_box": [9, 13, 70], "load_atla": [9, 14], "load_csv": [9, 14], "instanc": [9, 14, 17, 19, 20, 22, 23, 24, 25, 26, 29, 35, 55, 59, 83, 116, 125], "compil": [9, 18, 24, 69, 95, 100], "pop_scop": [9, 18, 24, 30, 58, 69, 76, 78, 86, 102], "push_scop": [9, 18, 24, 30, 58, 69, 76, 78, 86, 102], "symbol_t": [9, 11, 12, 18, 24, 40, 48, 58, 59, 60, 61, 68, 69, 76, 80, 86, 87, 88, 89, 90, 91, 100, 102], "adjust_direct": [9, 70], "adjust_posit": [9, 70], "adjust_to_bound": [9, 70], "cardinal_til": [9, 70], "contains_tupl": [9, 70], "direction_matrix": [9, 70], "expand": [9, 70], "expand_object": [9, 70], "expand_tupl": [9, 70], "intersect": [9, 65, 70, 100], "function_regexp": [9, 58, 96], "function_region_union": [9, 58, 96], "type_nam": [9, 96], "project_point_to_plan": [9, 97], "from_spatial_image_label": [9, 40, 48, 68, 97], "radiu": [9, 59, 97], "remove_empty_bounding_box": [9, 40, 48, 68, 97], "to_explicit_vbr": [9, 40, 48, 68, 97], "to_ijk_set": [9, 40, 48, 68, 97], "to_xyz_set": [9, 40, 48, 68, 97], "rewrite_boolean_and": [9, 102], "rewrite_boolean_and_l": [9, 102], "rewrite_boolean_and_r": [9, 102], "rewrite_boolean_invers": [9, 102], "rewrite_boolean_or": [9, 102], "rewrite_boolean_or_l": [9, 102], "rewrite_boolean_or_r": [9, 102], "bring_constants_up_left": [9, 102], "cast_binari": [9, 102], "cast_unari": [9, 102], "conjunction_composition_du": [9, 102], "conjunction_definition_du": [9, 102], "conjunction_distribut": [9, 102], "dual_oper": [9, 102], "neg_disj_to_conj": [9, 102], "partial_binary_evalu": [9, 102], "simplify_double_invers": [9, 102], "existential_pred": [9, 43, 44, 64, 66, 102], "new_set": [9, 18, 24, 30, 58, 76, 78, 86, 102], "quantifier_head_symbols_and_adom": [9, 102], "universal_pred": [9, 102], "plural_type_nam": [9, 102], "set_symbol_t": [9, 102], "create_scop": [9, 104], "set_readonli": [9, 104], "symbols_by_typ": [9, 104], "reference_region": 10, "direct": [10, 13, 70, 97], "refine_overlap": 10, "fals": [10, 12, 15, 30, 40, 44, 48, 57, 58, 59, 60, 61, 68, 80, 84, 86, 89, 91, 92, 95, 97, 99, 103, 104, 105, 109, 113, 117, 118], "stop_at": 10, "none": [10, 11, 13, 15, 17, 18, 19, 20, 22, 23, 24, 26, 28, 29, 31, 34, 35, 40, 44, 48, 55, 57, 58, 59, 60, 61, 67, 68, 69, 70, 73, 74, 76, 83, 84, 86, 88, 89, 94, 95, 97, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 116, 118, 121], "program_ir": [11, 12, 40, 48, 58, 59, 60, 68], "determinist": [11, 12, 40, 48, 68, 74, 78, 87, 89, 93], "regionfrontenddatalogsolv": [11, 40, 48, 68], "attribut": [11, 12, 13, 14, 15, 17, 18, 19, 20, 23, 24, 26, 27, 29, 30, 32, 33, 34, 35, 40, 45, 46, 47, 48, 50, 51, 54, 57, 58, 59, 60, 61, 64, 65, 66, 68, 69, 70, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 89, 91, 92, 95, 96, 97, 99, 100, 102, 105, 109, 110, 113, 116], "current": [11, 12, 25, 26, 40, 48, 58, 59, 60, 68, 73, 117], "dynam": [11, 12, 40, 48, 58, 59, 60, 68, 126], "context": [11, 12, 40, 48, 58, 59, 60, 61, 68, 105, 121], "can": [11, 12, 17, 29, 31, 40, 48, 54, 58, 59, 60, 61, 65, 68, 74, 83, 85, 92, 93, 94, 100, 116, 123, 125, 126], "us": [11, 12, 14, 15, 17, 19, 20, 23, 24, 26, 29, 31, 40, 45, 48, 54, 58, 59, 60, 61, 65, 66, 68, 74, 78, 83, 84, 92, 93, 100, 105, 109, 113, 116, 117, 118, 120, 121, 122, 123, 125], "write": [11, 12, 40, 48, 58, 59, 60, 68, 123], "correspond": [11, 12, 14, 24, 26, 29, 40, 41, 48, 58, 59, 60, 61, 68, 83, 97, 118], "region_nam": [11, 12, 40, 48, 58, 59, 60, 68], "region_set_nam": [11, 12, 40, 48, 58, 59, 60, 68], "set_typ": [11, 12, 40, 48, 58, 59, 60, 68], "projector": [11, 12, 40, 48, 58, 59, 60, 68], "through": [11, 12, 40, 41, 48, 58, 59, 60, 61, 68, 89, 93, 95, 99, 100], "method": [11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 44, 45, 46, 47, 48, 50, 51, 52, 54, 55, 57, 58, 59, 60, 61, 64, 65, 66, 68, 69, 70, 74, 76, 78, 81, 84, 85, 86, 87, 88, 89, 91, 95, 96, 97, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 116, 117, 118, 123], "magic_sets_rewrite_program": [11, 12, 40, 48, 58, 60, 68], "__init__": [11, 12], "capabl": [11, 12, 40, 58, 59, 60, 68], "paramet": [11, 12, 24, 26, 29, 30, 40, 41, 57, 58, 59, 60, 64, 65, 68, 73, 74, 80, 83, 87, 89, 92, 93, 94, 95, 100, 102, 105, 109, 113, 116, 117, 118, 120, 121], "usual": 11, "blank": 11, "chase_class": [11, 12, 19, 20, 40, 58, 60, 68], "option": [11, 12, 26, 29, 40, 57, 58, 59, 60, 68, 83, 105, 108, 117, 121], "comput": [11, 12, 29, 46, 60, 72, 81, 89, 92, 100, 123, 125], "default": [11, 12, 15, 29, 40, 57, 58, 59, 60, 66, 68, 87, 89, 92, 105, 114, 118, 121, 123], "see": [11, 12, 40, 48, 58, 59, 60, 61, 65, 68, 118, 122], "descript": [11, 12, 40, 48, 58, 59, 60, 61, 68], "probabilistic_solv": [12, 40, 58, 68], "solve_succ_queri": [12, 40, 58, 68, 80, 92, 95], "solve_succ_query_sdd_direct": [12, 40, 58, 68, 95], "probabilistic_marg_solv": [12, 40, 58, 68], "solve_marg_queri": [12, 40, 58, 68, 80, 92, 95], "check_qbased_pfact_tuple_un": [12, 40, 58, 68, 89], "complement": [12, 40, 58, 59, 60, 68], "extension": [12, 18, 24, 26, 40, 58, 59, 60, 68, 74, 89], "choic": [12, 40, 58, 68, 74, 78, 83, 84, 87], "sove": [12, 40, 58, 68], "front": [12, 40, 58, 61, 68], "order": [12, 26, 47, 55, 57, 59, 64, 65, 66, 83, 92, 100, 102, 120, 125], "indic": [12, 103, 105, 109, 113], "prioriti": [12, 102], "usag": 12, "lifted_solve_succ_queri": 12, "wmc_solve_succ_queri": 12, "lifted_solve_marg_queri": 12, "wmc_solve_marg_queri": 12, "properti": [13, 14, 17, 18, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 40, 45, 46, 47, 48, 51, 54, 58, 59, 60, 61, 64, 65, 66, 68, 69, 70, 74, 76, 78, 81, 84, 85, 86, 87, 88, 89, 91, 95, 96, 97, 99, 100, 102, 105, 109, 110, 113, 116, 120], "other": [13, 31, 40, 41, 43, 45, 58, 59, 60, 68, 70, 78, 84, 100, 105, 108, 109, 110, 113, 116, 120, 123], "box": [13, 70], "parent": [13, 65, 70, 74, 126], "height": [13, 70], "region_id": [13, 70], "added_box": [13, 70], "axi": [13, 70], "vertic": 13, "arg": [14, 17, 19, 23, 24, 26, 27, 29, 30, 32, 33, 34, 45, 46, 47, 51, 54, 58, 60, 64, 65, 66, 70, 73, 78, 84, 86, 88, 89, 91, 95, 96, 99, 100, 102, 117], "kwarg": [14, 17, 18, 23, 24, 26, 27, 29, 30, 32, 33, 34, 45, 46, 47, 51, 54, 58, 64, 65, 66, 78, 84, 86, 88, 89, 91, 95, 96, 97, 99, 100, 102, 117], "patternwalk": [14, 17, 24, 26, 30, 45, 46, 47, 64, 65, 66, 74, 78, 86, 87, 88, 89, 95, 96, 99, 100, 102], "pattern": [14, 17, 18, 23, 24, 26, 27, 29, 30, 32, 33, 37, 45, 46, 47, 51, 54, 58, 61, 64, 65, 66, 74, 76, 78, 85, 86, 87, 88, 89, 91, 95, 96, 99, 100, 102], "hold": [14, 17, 18, 23, 24, 26, 27, 29, 30, 32, 33, 45, 46, 47, 51, 54, 58, 61, 64, 65, 66, 74, 76, 78, 85, 86, 87, 88, 89, 91, 92, 95, 96, 99, 100, 102, 116], "an": [14, 17, 18, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 40, 41, 45, 46, 47, 48, 51, 53, 54, 58, 59, 60, 61, 64, 65, 66, 74, 76, 78, 80, 83, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 99, 100, 102, 103, 105, 108, 109, 110, 113, 116, 118, 123, 125], "triplet": [14, 17, 18, 23, 24, 26, 27, 29, 30, 32, 33, 45, 46, 47, 51, 54, 58, 61, 64, 65, 66, 74, 76, 78, 85, 86, 87, 88, 89, 91, 95, 96, 99, 100, 102], "guard": [14, 17, 18, 23, 24, 26, 27, 29, 30, 32, 33, 45, 46, 47, 51, 54, 58, 61, 64, 65, 66, 74, 76, 78, 85, 86, 87, 88, 89, 91, 95, 96, 99, 100, 102], "action": [14, 17, 18, 23, 24, 26, 27, 29, 30, 32, 33, 45, 46, 47, 51, 54, 58, 61, 64, 65, 66, 74, 76, 78, 85, 86, 87, 88, 89, 91, 95, 96, 99, 100, 102], "pattern_match_express": [14, 17, 18, 23, 24, 26, 27, 29, 30, 32, 33, 45, 46, 47, 51, 54, 58, 61, 64, 65, 66, 74, 76, 78, 85, 86, 87, 88, 89, 91, 95, 96, 99, 100, 102], "pattern_match_expression_paramet": [14, 17, 18, 23, 24, 26, 27, 29, 30, 32, 33, 45, 46, 47, 51, 54, 58, 61, 64, 65, 66, 74, 76, 78, 85, 86, 87, 88, 89, 91, 95, 96, 99, 100, 102], "pattern_match_expression_tupl": [14, 17, 18, 23, 24, 26, 27, 29, 30, 32, 33, 45, 46, 47, 51, 54, 58, 61, 64, 65, 66, 74, 76, 78, 85, 86, 87, 88, 89, 91, 95, 96, 99, 100, 102], "pattern_match_tupl": [14, 17, 18, 23, 24, 26, 27, 29, 30, 32, 33, 45, 46, 47, 51, 54, 58, 61, 64, 65, 66, 74, 76, 78, 85, 86, 87, 88, 89, 91, 95, 96, 99, 100, 102], "process": [14, 17, 18, 24, 26, 29, 31, 40, 58, 60, 65, 68, 85], "fetch": [14, 117], "its": [14, 24, 26, 45, 57, 59, 65, 74, 83, 93, 100, 102, 118, 123], "rais": [14, 26, 28, 40, 48, 58, 59, 61, 68, 93, 105, 108, 109, 110, 113, 118], "invalidcommandexpress": 14, "invalid": 14, "error": [14, 25, 118, 123], "occur": [14, 65, 123], "while": [14, 53], "tabular": [14, 125], "given": [14, 26, 29, 59, 60, 61, 65, 74, 83, 93, 94, 105, 109, 113, 117], "url": 14, "read_csv": 14, "relat": [14, 19, 23, 59, 73, 74, 76, 80, 83, 84, 87, 89, 92, 98, 99, 100], "ani": [14, 17, 18, 23, 24, 26, 27, 29, 30, 32, 33, 40, 41, 44, 45, 46, 47, 48, 50, 51, 54, 58, 59, 60, 61, 64, 65, 66, 68, 74, 76, 78, 84, 85, 86, 87, 88, 89, 91, 95, 99, 100, 102, 118, 120, 126], "dict_typ": 15, "dict": [15, 24, 29, 40, 41, 50, 58, 59, 60, 68, 83, 87, 105, 109, 113, 117, 118], "allow_no_valu": 15, "delimit": 15, "comment_prefix": 15, "inline_comment_prefix": 15, "strict": 15, "true": [15, 18, 26, 29, 34, 40, 55, 57, 58, 59, 60, 61, 64, 65, 68, 80, 81, 83, 84, 86, 87, 89, 92, 95, 103, 104, 117, 118, 126], "empty_lines_in_valu": 15, "default_sect": 15, "interpol": 15, "convert": [15, 41, 45, 53, 57, 65, 94, 99, 100], "configpars": 15, "getboolean": 15, "getfloat": 15, "optionxform": 15, "backend": [15, 40, 48, 61], "conveni": [15, 50, 100, 125], "set": [15, 17, 18, 24, 25, 26, 28, 29, 34, 40, 45, 46, 58, 59, 60, 64, 65, 68, 70, 73, 74, 78, 80, 83, 85, 87, 89, 91, 92, 94, 95, 100, 105, 107, 109, 110, 113, 116, 123, 125, 126], "chang": [15, 66], "enough": 15, "switch": 15, "sinc": [15, 123], "evalu": [15, 40, 41, 92, 102], "out": [15, 24, 26, 40, 48, 55, 59, 68, 97], "which": [15, 25, 26, 29, 53, 54, 57, 59, 65, 73, 74, 78, 80, 83, 85, 87, 89, 92, 93, 95, 100, 116, 117, 118, 123, 125, 126], "so": [15, 65, 73], "we": [15, 89, 92, 93, 123, 125, 126], "need": [15, 24, 26, 57, 65, 93, 117, 120, 123, 126], "reimport": 15, "after": [15, 73, 78], "support": [17, 24, 54, 81, 105, 108, 118, 126], "accord": [17, 24, 29, 80], "For": [17, 29, 65, 74, 89, 92, 100, 102, 118, 125, 126], "encod": [17, 74, 83, 118], "count": [17, 65, 95, 126], "q": [17, 18, 26, 27, 45, 50, 60, 65, 78, 89, 92, 94], "aggregationappl": 17, "number": [17, 19, 20, 29, 35, 40, 50, 57, 58, 60, 61, 68, 94, 100, 109, 110, 116, 126], "green": 17, "huang": 17, "b": [17, 40, 45, 58, 68, 74, 78, 85, 100], "loo": 17, "w": 17, "zhou": 17, "recurs": [17, 19, 20, 26, 41, 65, 72, 102], "fnt": 17, "105": 17, "195": 17, "2012": [17, 80], "builtinaggregationmixin": [17, 58], "function_count": [17, 58], "constant_max": 17, "_arrayfunctiondispatch": 17, "constant_mean": 17, "mean": [17, 40, 58, 68, 125], "constant_std": 17, "std": 17, "constant_sum": 17, "sum": [17, 40, 58, 68, 78, 100], "chaseaggregationmixin": 17, "stratifiedchas": 17, "check_constraint": [17, 19, 20, 22, 35, 76], "compute_result_set": [17, 19, 20, 22, 23, 35, 76], "eliminate_already_comput": [17, 19, 20, 22, 23, 35, 76], "instance_upd": [17, 19, 20, 22], "rule": [17, 19, 20, 22, 23, 24, 25, 26, 29, 31, 35, 40, 43, 44, 45, 46, 49, 50, 54, 60, 72, 74, 76, 78, 80, 83, 85, 86, 89, 92, 93, 94, 95], "substitut": [17, 19, 20, 21, 22, 23, 67], "restriction_inst": [17, 19, 20, 22, 23], "consequ": [17, 18, 19, 20, 23, 24, 26, 27, 30, 31, 60, 61, 89, 92, 95], "datalogwithaggregationmixin": [17, 58], "statement_intensional_aggreg": [17, 58], "translatetologicwithaggreg": [17, 58], "build_conjunct": [17, 26, 27, 58, 64, 76], "build_conjunction_from_expression_block": [17, 26, 27, 58], "build_disjunct": [17, 26, 27, 58, 64, 76], "build_neg": [17, 26, 27, 58, 64, 76], "transform_function_application_consequent_to_aggreg": [17, 58], "translate_logic_oper": [17, 26, 27, 58, 64, 76], "translate_true_impl": [17, 26, 27, 58], "is_builtin_aggregation_functor": 17, "functor": [17, 22, 24, 26, 31, 33, 83, 84, 86], "intent": [18, 24, 26, 40, 58, 60, 68, 74, 93], "builtin": [18, 24, 30, 58, 76, 78, 86, 103], "datalogprogrammixin": [18, 24], "expressionwalk": [18, 23, 24, 26, 29, 45, 51, 54, 61, 66, 78, 85, 86, 88, 89, 91, 95, 99, 100], "included_const": [18, 24, 30, 58, 76, 78, 86, 102], "included_funct": [18, 24, 30, 58, 76, 78, 86, 102], "add_extensional_predicate_from_tupl": [18, 24, 30, 58, 76, 78, 86], "add_included_constants_and_functions_to_symbol_t": [18, 24, 30, 58, 76, 78, 86, 102], "extensional_databas": [18, 24, 30, 58, 73, 76, 78, 86], "intensional_databas": [18, 24, 30, 58, 76, 78, 86], "predicate_term": [18, 24, 30, 58, 76, 78, 86], "process_express": [18, 23, 24, 26, 29, 30, 33, 45, 51, 54, 58, 61, 66, 76, 78, 85, 86, 88, 89, 91, 95, 99, 100, 102], "process_iterable_argu": [18, 23, 24, 26, 29, 30, 33, 45, 51, 54, 58, 61, 66, 76, 78, 85, 86, 88, 89, 91, 95, 99, 100, 102], "statement_intension": [18, 24, 30, 58, 76, 78, 86], "protected_keyword": [18, 24, 30, 40, 58, 73, 76, 78, 86], "cast": [18, 24, 27, 29, 30, 40, 44, 45, 50, 51, 55, 57, 58, 59, 65, 68, 74, 84, 86, 87, 100], "change_typ": [18, 24, 27, 29, 30, 44, 45, 50, 51, 65, 74, 84, 86, 87, 100], "get_wrapped_attribut": [18, 24, 27, 29, 30, 44, 45, 50, 51, 65, 74, 84, 86, 87, 100], "anteced": [18, 24, 25, 26, 27, 29, 30, 46, 60, 61, 78], "logicoper": [18, 24, 27, 65, 87, 94], "form": [18, 27, 29, 30, 45, 46, 60, 65, 66, 74, 80, 89, 92, 94, 95, 118], "nullconst": 18, "auto_infer_typ": 18, "verify_typ": [18, 84, 86], "undefin": 18, "unionofconjunctivequeri": 18, "wrappedrelationalalgebraset": [18, 34], "row_typ": [18, 19, 20, 34, 118], "verify_row_typ": [18, 34], "wrappedrelationalalgebrasetmixin": [18, 34], "flag": [18, 34, 105, 109, 113], "manual": [18, 34, 105, 109, 113], "might": [18, 34, 105, 109, 113, 123, 126], "duplic": [18, 34, 105, 109, 113], "is_constant_tuple_or_tuple_of_const": [18, 34], "is_de": [18, 34, 105, 109, 110, 113], "is_dum": [18, 34, 105, 109, 110, 113], "unwrap": [18, 34], "chasegener": [19, 20, 22, 76], "naiv": [19, 20], "algorithm": [19, 20, 23, 25, 29, 32, 33, 65], "aggregate_tuple_type_into_row_typ": [19, 20, 22, 35, 76], "build_chase_tre": [19, 20, 22, 35, 76], "build_nodes_from_rul": [19, 20, 22, 35, 76], "chase_step": [19, 20, 22, 23, 35, 76], "compose_all_subtitut": [19, 20, 22, 35, 76], "compose_substitutions_ignoring_conflict": [19, 20, 22, 35, 76], "compose_substitutions_no_conflict": [19, 20, 22, 35, 76], "compute_instance_upd": [19, 20, 22, 35, 76], "compute_new_tuple_and_typ": [19, 20, 22, 35, 76], "evaluate_builtin": [19, 20, 22, 35, 76], "evaluate_builtins_pred": [19, 20, 22, 35, 76], "extract_rule_pred": [19, 20, 22, 35, 76], "extract_variable_argu": [19, 20, 22, 35, 76], "get_args_to_project": [19, 20, 22, 35, 76], "infer_iterable_subtyp": [19, 20, 22, 35, 76], "is_containment_of_symbol_in_const": [19, 20, 22, 35, 76], "is_equality_between_constant_and_symbol": [19, 20, 22, 35, 76], "unify_builtin_substitut": [19, 20, 22, 35, 76], "unify_builtin_substitution_contain": [19, 20, 22, 35, 76], "unify_builtin_substitution_equ": [19, 20, 22, 35, 76], "tuple_typ": [19, 20], "chase_set": [19, 20], "static": [19, 20, 21, 22, 23, 26, 33, 34, 46, 59, 93, 97, 98, 99, 102], "new_substitut": [19, 20], "subs_kei": [19, 20], "new_tupl": [19, 20], "builtin_pred": [19, 20, 22], "predicates_to_evalu": [19, 20], "predic": [19, 20, 21, 22, 25, 26, 29, 40, 43, 44, 49, 51, 58, 59, 60, 61, 64, 65, 66, 68, 73, 74, 78, 83, 87, 93, 94, 102], "builtin_predicates_": [19, 20, 22], "evaluated_pred": [19, 20], "chasemgumixin": [19, 21, 22, 35], "obtain_substitut": [19, 21, 22, 23, 35, 76], "unify_substitut": [19, 21, 22], "args_to_project": [19, 21, 22, 23], "rule_predicates_iter": [19, 21, 22, 23], "chasena": [19, 20, 35, 76], "execute_chas": [19, 20, 22, 35, 76], "chasenamedrelationalalgebramixin": [19, 23, 76], "conjunct": [19, 23, 25, 26, 27, 29, 30, 32, 40, 43, 44, 45, 46, 54, 61, 64, 65, 66, 74, 78, 80, 83, 92, 94], "solv": [19, 23, 24, 26, 29, 80, 85, 89, 92, 93, 95, 117, 126], "8": [19, 23, 33, 78, 105, 109, 113, 123], "abiteboul": [19, 23, 33, 65, 100, 125], "_": [19, 23], "algebra": [19, 23, 80, 87, 89, 92, 98, 99, 100], "hull": [19, 23, 33, 65, 100, 125], "v": [19, 23, 29, 33, 74, 78, 100, 125], "vianu": [19, 23, 33, 65, 100, 125], "foundat": [19, 23, 33, 65, 100, 125], "addison": [19, 23, 33, 100, 125], "weslei": [19, 23, 33, 100, 125], "1995": [19, 23, 33, 100, 125], "rewrite_antecedent_equ": [19, 23, 35, 76], "rewrite_constants_in_consequ": [19, 23, 35, 76], "rewrite_rule_consequent_constants_to_equ": [19, 23, 35, 76], "translate_conjunction_to_named_ra": [19, 23, 35, 76], "new_arg": [19, 23, 103], "new_equ": [19, 23], "alia": [19, 20, 35, 50, 58, 96], "field": [19, 20, 35, 50, 55], "chasenonrecurs": [19, 20], "non": [19, 20, 25, 26, 29, 72, 74, 80, 92, 100, 102], "chaserelationalalgebrapluscerimixin": [19, 22, 23, 35], "ceri": [19, 23], "unnam": [19, 23, 100], "posit": [19, 23, 24, 29, 65, 72, 94], "g": [19, 23, 32, 60, 61, 93, 125], "gottlob": [19, 23, 32], "lavazza": [19, 23], "proceed": [19, 23, 92], "12th": [19, 23], "intern": [19, 23], "confer": [19, 23], "veri": [19, 23, 123, 125], "larg": [19, 23, 59], "morgan": [19, 23, 125], "kaufmann": [19, 23], "inc": [19, 23], "san": [19, 23], "francisco": [19, 23], "ca": [19, 23], "usa": [19, 23, 92], "1986": [19, 23], "acm": [19, 23, 29, 32, 80, 92], "citat": [19, 23], "cfm": [19, 23], "645913": [19, 23], "671468": [19, 23], "vldb": [19, 23, 92], "86": [19, 23, 29], "pp": [19, 23, 29], "395": [19, 23], "402": [19, 23], "compute_substitut": [19, 22, 23], "translate_pred": [19, 22, 23], "translate_predicate_process_argu": [19, 22, 23], "translate_predicate_process_argument_symbol": [19, 22, 23], "translate_to_ra_plu": [19, 22, 23], "projected_var_nam": [19, 23], "pred_ra": [19, 23], "local_select": [19, 23], "local_column": [19, 23], "global_column": [19, 23], "chasesemina": [19, 20, 22], "semi": [19, 20], "linear": [19, 20, 26], "per_rule_upd": [19, 20, 22], "chasestratifi": [19, 20], "pick_chase_instance_for_stratum": [19, 20, 35], "stratum": [19, 20], "neurolangnonlinearprogramexcept": [19, 20], "neurolangexcept": [19, 20, 65, 82, 102, 103], "neurolangprogramhasloopsexcept": [19, 20], "mgu": [19, 67], "datalogchaseneg": [19, 22], "datalogchasenegationgener": [19, 22], "check_non_linear": [19, 22], "evaluate_negative_builtin": [19, 22], "unify_negative_builtin_substitut": [19, 22], "datalogchasenegationmgumixin": [19, 22], "obtain_negative_substitut": [19, 22], "unify_negative_substitut": [19, 22], "datalogchasenegationrelationalalgebramixin": [19, 22], "negativefactconstraint": [19, 22], "namedrelationalalgebraoptimis": [19, 23], "head_functor": 22, "recursive_cal": 22, "negative_pred": 22, "pushinselect": [23, 89, 95, 99], "push_and_rename_in_naturaljoin": [23, 89, 95, 99], "push_selection_in_extended_project": [23, 89, 95, 99], "push_selection_in_groupbi": [23, 89, 95, 99], "push_selection_in_left": [23, 89, 95, 99], "push_selection_in_leftnaturaljoin_left": [23, 89, 95, 99], "push_selection_in_leftnaturaljoin_right": [23, 89, 95, 99], "push_selection_in_outernaturaljoin_left": [23, 89, 95, 99], "push_selection_in_outernaturaljoin_right": [23, 89, 95, 99], "push_selection_in_project": [23, 89, 95, 99], "push_selection_in_replace_nul": [23, 89, 95, 99], "push_selection_in_right": [23, 89, 95, 99], "constraint": [24, 31, 40, 43, 44, 58, 61, 68], "datalogconstraintsmixin": 24, "add_existential_rul": [24, 58], "add_logic_constraint": [24, 58], "categorized_constraint": 24, "formula": [24, 26, 27, 33, 46, 65, 92, 94, 100, 120], "existential_rul": 24, "get_constraint": 24, "dictionari": [24, 31, 40, 58, 60, 68, 102], "kei": [24, 78, 87, 102, 105, 109, 113, 114, 116], "__constraints__": [24, 58], "set_constraint": 24, "receiv": [24, 65], "organ": 24, "charg": [24, 31], "both": [24, 31, 100], "tabl": [24, 57, 59, 60, 78, 81, 87, 89, 102, 117, 126], "global": [24, 44], "variabl": [24, 26, 29, 46, 59, 64, 65, 66, 72, 74, 78, 81, 83, 89, 92, 94, 125], "categorized_contraint": 24, "xrewrit": [24, 32], "optim": [24, 29, 32, 123], "associ": [24, 57, 59, 74, 83, 125], "datalogconstraintsprogram": [24, 58], "same": [24, 40, 46, 57, 58, 65, 68, 72, 94, 100, 102, 120, 126], "bodi": [24, 26, 29, 45, 59, 65, 80, 84, 93], "head": [24, 26, 29, 45, 49, 50, 54, 65, 74, 78, 83, 89, 93, 102], "invert": [24, 30, 61], "reachable_cod": [24, 26], "reachabl": [24, 26, 126], "edb": [24, 26], "idb": [24, 26, 93], "aggregatedvariablereplacedbyconstanterror": 25, "forbiddenexpressionerror": 25, "boundaggregationapplicationerror": 25, "invalidmagicseterror": 25, "magic": [25, 29, 85], "doe": [25, 65, 74], "argument": [25, 29, 43, 44, 45, 60, 61, 65, 67, 73, 102, 105, 108, 121], "bound": [25, 29, 46], "typic": [25, 40, 58, 59, 60, 68], "signal": 25, "cannot": [25, 85, 117], "appli": [25, 65, 73, 92, 100], "subclass": [25, 61, 118], "should": [25, 29, 57, 59, 72, 73, 78, 80, 83, 89, 92, 93, 95, 100, 120], "specifi": [25, 29, 40, 58, 59, 60, 68, 118], "reason": 25, "why": 25, "present": [25, 105, 108, 117], "negationinmagicsetsrewriteerror": 25, "noconstantpredicatefounderror": 25, "onli": [25, 26, 45, 54, 57, 60, 64, 65, 66, 74, 78, 83, 89, 92, 94, 102, 118, 125], "least": [25, 26, 29], "one": [25, 26, 29, 31, 32, 45, 57, 60, 66, 74, 85, 87, 89, 92, 93, 100, 117], "nonconjunctiveantecedentinmagicsetserror": 25, "collapseconjunctiveanteced": 26, "collapseconjunct": [26, 54, 66], "implication_with_collapsable_conjunctive_anteced": 26, "equalitysymbollefthandsidenormalisemixin": [26, 58], "reverse_equ": [26, 58], "sort_antecedent_equ": [26, 58], "flattenqueryinnonrecursiveucq": 26, "flatten": 26, "ucq": [26, 94], "builtin_appl": 26, "negation_function_appl": 26, "query_pred": [26, 87, 95], "fa": [26, 51, 100], "qpred": 26, "freshenfreevari": 26, "implication_with_free_vari": 26, "headconstanttobodyequ": 26, "transform": [26, 40, 44, 45, 48, 68, 85, 89, 97], "whose": [26, 40, 58, 68, 78, 94, 100], "term": [26, 30, 43, 44, 45, 57, 59, 78, 89, 100, 109, 110], "equival": [26, 45, 65, 66, 94, 100], "A": [26, 29, 32, 40, 45, 48, 53, 54, 61, 74, 83, 85, 89, 92, 93, 94, 102, 105, 109, 113, 116, 118, 125], "fresh": [26, 29, 40, 44, 45, 58, 59, 66, 68, 86, 87, 89, 94], "_f_": 26, "implication_with_constant_term_in_head": 26, "headrepeatedvariabletobodyequ": 26, "repeat": [26, 66, 83, 89, 92, 100], "without": [26, 65, 72, 92], "repetit": 26, "implication_with_repeated_variable_in_head": 26, "removeduplicatedantecedentpred": 26, "implication_with_duplicated_antecedent_pred": 26, "translatetodatalogsemant": 26, "unifyvariableequ": 26, "unifyvariableequalitiesmixin": 26, "add_equality_with_const": 26, "add_equality_with_symbol": 26, "build_substitutions_from_equ": 26, "extract_and_unify_var_eqs_in_impl": 26, "extract_variable_equ": 26, "eq_set": 26, "symb": 26, "const": 26, "all_body_preds_in_set": 26, "predicate_set": 26, "check": [26, 30, 64, 65, 123], "functor_set": 26, "prediacte_set": 26, "any_body_preds_in_set": 26, "conjunct_formula": 26, "f1": [26, 45], "f2": [26, 45], "two": [26, 31, 45, 60, 67, 83, 89, 94, 120, 123, 125, 126], "conjunct_if_need": 26, "more": [26, 54, 105, 121, 125, 126], "than": [26, 78, 103, 116, 120], "If": [26, 29, 40, 45, 48, 57, 59, 60, 61, 65, 67, 73, 89, 92, 117, 123], "empti": [26, 65], "pass": [26, 29, 41, 57, 83, 102, 118], "instead": [26, 74, 93, 123], "dependency_matrix": 26, "depend": [26, 60, 76, 78, 85, 93, 126], "matrix": [26, 40, 48, 57, 68, 70, 97], "subset": 26, "meant": 26, "repres": [26, 40, 41, 48, 58, 61, 65, 68, 74, 83, 87, 98, 100, 103], "won": 26, "symbolnotfounderror": 26, "found": [26, 59], "idb_symbol": 26, "ndarrai": [26, 59], "row": [26, 57, 74, 118], "origin": [26, 97], "It": [26, 30, 57, 61, 74, 78, 98, 116, 117, 118, 120, 123], "adjac": 26, "graph": 26, "enforce_conjunctive_anteced": 26, "extract_logic_atom": [26, 64], "atom": [26, 40, 45, 48, 61, 64, 65, 66, 83, 87, 91, 92], "know": [26, 64], "format": [26, 59, 60, 64, 66], "lexicograph": [26, 64, 83], "extract_logic_free_vari": [26, 64], "assum": [26, 64, 66, 125], "free": [26, 64, 65, 72, 94], "extract_logic_pred": [26, 64], "flatten_queri": 26, "construct": [26, 59, 73, 78, 83], "todo": [26, 74], "handl": [26, 45], "disjunct": [26, 32, 64, 65, 66, 80, 94], "implication_has_existential_variable_in_anteced": 26, "existenti": [26, 59, 64, 65, 66, 92, 94, 125], "is_aggregation_pred": 26, "is_aggregation_rul": 26, "is_conjunctive_express": 26, "is_conjunctive_expression_with_nested_pred": 26, "is_ground_pred": 26, "is_linear_rul": 26, "analys": [26, 93], "is_rule_with_builtin": 26, "known_builtin": [26, 83], "is_symb_to_const_equ": 26, "is_to_be_sorted_equ": 26, "is_var_equality_to_var_or_const": 26, "maybe_deconjunct_single_pr": 26, "remov": [26, 28, 66, 73, 89, 94, 105, 108, 109, 110, 113], "singl": [26, 74, 83, 87, 100], "remain": [26, 40, 49, 50, 58, 65, 68, 120], "unchang": 26, "multipl": [26, 40, 53, 57, 58, 68, 74, 83, 100], "alreadi": [26, 65, 73, 125], "maybe_disjunct": 26, "program_has_loop": 26, "program_represent": 26, "remove_conjunction_dupl": 26, "stratifi": [26, 29, 93], "datalog_inst": 26, "block": [26, 29, 65, 74, 116], "stratif": 26, "boolean": [26, 74], "strata": [26, 93], "wa": [26, 45, 65, 89, 102], "stratisfi": 26, "last": 26, "stratify_obtain_facts_stratum": 26, "to_process": 26, "seen": [26, 61, 83], "stratify_obtain_new_stratum": 26, "narylogicoper": [27, 66, 94], "unarylogicoper": 27, "expression_block": [27, 95], "frozeninst": 28, "frozenmapinst": 28, "as_map": 28, "as_set": 28, "like": [28, 85, 118, 123, 125], "provid": [28, 46, 59], "view": 28, "frozensetinst": 28, "mapinst": 28, "mutablemap": [28, 104], "setinst": 28, "mutableset": [28, 105, 108, 110], "do": [28, 40, 48, 58, 61, 65, 68, 105, 108, 109, 110, 113, 120, 123], "absent": [28, 105, 108, 109, 110, 113], "rewrit": [29, 32, 54, 85, 99], "f": [29, 78, 89, 94], "bancilhon": 29, "maier": [29, 125], "sagiv": 29, "ullman": [29, 100], "pod": [29, 92], "15": [29, 117], "adornedsymbol": 29, "adorn": 29, "lefttorightsip": 29, "sip": 29, "balbin": 29, "h": 29, "iif": 29, "liter": 29, "isaac": 29, "graem": 29, "port": 29, "kotagiri": 29, "ramamohanarao": 29, "krishnamurthi": 29, "meenakshi": 29, "1991": 29, "effici": [29, 92, 126], "bottom": 29, "log": [29, 55, 105, 121], "11": 29, "305": 29, "replaceadornedsymbolwalk": 29, "replace_adorned_symbol": 29, "abc": 29, "sidewai": 29, "inform": [29, 31, 61, 103, 118, 125], "strategi": 29, "formal": [29, 100, 125], "describ": [29, 59, 100], "what": 29, "anoth": [29, 65, 83, 85, 93], "creates_arc": 29, "adorned_head": 29, "arc": 29, "try": [29, 118], "call": [29, 31, 41, 74, 117, 118, 123], "_create_arc": 29, "tail": 29, "adorn_anteced": 29, "rewritten_rul": 29, "adorn_cod": 29, "rewritten": [29, 83, 94], "techniqu": 29, "sips_class": 29, "create_balbin_magic_rul": 29, "adorned_rul": 29, "ensembl": 29, "pm": 29, "includ": [29, 47, 57, 98], "pseudo": 29, "ra": [29, 89, 105, 109, 113], "create_magic_query_init": 29, "constant_pred": [29, 43, 44], "initi": [29, 30, 83, 85, 117], "magic_p": 29, "t_d": 29, "vector": [29, 97], "adornedexpress": 29, "edb_with_prob_symbol": 29, "magic_pred": 29, "bf": 29, "otherwis": [29, 60, 65, 74, 117], "magic_rewrit": 29, "311": 29, "reachable_adorned_cod": 29, "datalogprogramneg": 30, "datalogprogramnegationmixin": [30, 58, 78], "negation_const": [30, 58, 78], "negative_fact": [30, 58, 78], "possibl": [30, 40, 58, 66, 68, 74, 89, 94, 123], "when": [30, 45, 59, 80, 85, 92, 93, 100, 105, 116, 118, 121], "normal": [30, 65, 66, 94, 100], "negativefact": 30, "neg": [30, 66, 94, 95], "compos": 30, "necessari": 30, "is_conjunctive_neg": 30, "ontologypars": 31, "connector_symbol": [31, 40, 58, 68], "load_format": 31, "xml": 31, "deriv": [31, 40, 58, 60, 68], "ontologi": [31, 40, 58, 68, 125], "entiti": 31, "level": [31, 45, 65, 105, 121], "parse_ontologi": 31, "main": [31, 126], "One": [31, 74], "restrict": [31, 65], "somevaluesfrom": 31, "rest": 31, "ontolog": [31, 32], "extractfreevariablesrightimplicationwalk": 32, "extractfreevariableswalk": [32, 64, 66], "extract_variables_fa": [32, 64, 66], "extract_variables_q": [32, 64, 66], "extract_variables_": [32, 64, 66], "extract_variables_symbol": [32, 64, 66], "logic_oper": [32, 64, 65, 66], "quantifi": [32, 59, 64, 65, 66, 92, 94, 102, 125], "walk_binary_logic_express": [32, 64, 65, 66], "walk_nari": [32, 64, 65, 66, 91], "ontologyrewrit": 32, "union_of_constraint": 32, "factorization_step": 32, "rewriting_step": 32, "propos": 32, "orsi": 32, "pieri": 32, "transact": 32, "system": [32, 92, 100, 103, 122, 123], "vol": 32, "39": 32, "mai": [32, 78, 83, 105, 109, 113, 123], "2014": [32, 92], "q0": 32, "sigma": 32, "rename_count": 32, "translatetonamedra": 33, "partial": [33, 102], "classify_formulas_obtain_named_function_appl": 33, "classify_formulas_obtain_nam": 33, "eval_lambda": [33, 58, 76, 102], "evaluate_funct": [33, 58, 76, 102], "evaluate_function_infer_typ": [33, 58, 76, 102], "evaluate_project": [33, 58, 76, 102], "generate_ra_express": 33, "is_col_to_const_equ": 33, "obtain_negative_column": 33, "process_destroy_formula": 33, "process_equality_formula": 33, "process_equality_formulas_as_extended_project": 33, "process_equality_formulas_const": 33, "process_extended_projection_formula": 33, "process_negative_formula": 33, "process_positive_formula": 33, "process_selection_formula": 33, "translate_builtin_fa": 33, "translate_builtin_fa_const": 33, "translate_conjunct": 33, "translate_disjunct": 33, "translate_eq": 33, "translate_eq_c_c": 33, "translate_eq_c_fa": 33, "translate_eq_c_": 33, "translate_eq_fa_": 33, "translate_eq_s_c": 33, "translate_existential_pred": 33, "translate_fa": 33, "translate_neg": 33, "classified_formula": 33, "named_arg": 33, "neg_formula": 33, "output": [33, 59, 89], "named_column": 33, "wrappednamedrelationalalgebrafrozenset": 34, "wrappednamedrelationalalgebrafrozensetmixin": 34, "wrappedrelationalalgebrasetbasemixin": 34, "wrappedrelationalalgebrafrozenset": 34, "wrappedrelationalalgebrafrozensetmixin": 34, "val": 34, "wrappedtypemap": 34, "backend_2_python": 34, "row_map": 34, "float64": 34, "integ": [34, 105, 108], "named_tuple_as_dict": 34, "match": [37, 73, 85, 87, 105, 109, 113], "auxiliari": [39, 65], "affine_matrix": [40, 48, 68, 97], "prebuild_tre": [40, 48, 59, 68, 97], "voxels_ijk": [40, 48, 68, 97], "ijk": [40, 48, 68, 97], "world": [40, 48, 58, 68, 97], "background_valu": [40, 48, 68, 97], "type_": [40, 58, 59, 60, 68, 103, 104], "attach": [40, 53, 58, 68, 74, 78, 89], "In": [40, 58, 61, 65, 68, 83, 92, 93, 100, 123, 126], "note": [40, 58, 68, 83, 89, 100, 123, 126], "contrari": [40, 58, 59, 68], "among": [40, 58, 68], "mutual": [40, 58, 68, 83], "exclus": [40, 58, 68, 83, 122], "detail": [40, 58, 68, 118], "constitut": [40, 58, 68], "must": [40, 58, 65, 68, 78, 89, 92, 95, 100, 105, 109, 113], "infer": [40, 58, 59, 60, 68, 80, 83, 89, 92, 103], "fe": [40, 58, 59, 60, 68], "distributiondoesnotsumtooneerror": [40, 58, 68, 82], "independ": [40, 58, 68, 74, 87], "uniform": [40, 58, 68], "over": [40, 50, 58, 65, 68, 126], "everi": [40, 41, 45, 58, 68, 103], "assign": [40, 58, 68], "declar": [40, 41, 58, 59, 60, 61, 68, 78, 125], "connector_symbol_nam": [40, 58, 68], "pars": [40, 41, 49, 50, 53, 58, 68, 118, 123], "store": [40, 57, 58, 68, 78], "them": [40, 54, 58, 68, 85], "randomli": [40, 58, 59, 68], "predicate_nam": [40, 58, 60, 68], "content": [40, 58, 60, 68, 122], "abstract": [40, 41, 58, 68, 105, 109, 116], "similar": [40, 58, 68], "though": [40, 58, 68], "differ": [40, 57, 58, 68, 74, 83, 88, 95, 98, 100], "natur": [40, 43, 53, 58, 68], "query_build": [40, 48, 59, 61], "symbol_nam": [40, 48, 59, 61], "Its": [40, 48, 61, 83], "most": [40, 48, 61, 67, 116], "recurr": [40, 48, 61], "valueerror": [40, 48, 59, 61, 105, 108], "doesn": [40, 48, 61, 67], "sugar": [40, 43], "convertattrstoselectbycolumn": [40, 43, 45], "recognisessugar": [40, 43, 45], "selectbyfirstcolumn": [40, 43, 45], "translatecolumnstoatom": [40, 43, 45], "translateheadconstantstoequ": [40, 43, 45], "translateprobabilisticquerymixin": [40, 43, 45, 58], "translatequerybasedprobabilisticfactmixin": [40, 43, 45, 58], "translatessugartoselectbycolumn": [40, 43, 45], "translateselectbyfirstcolumn": [40, 43, 45], "standard_syntax": [40, 43], "datalogtransform": [40, 43, 44], "externalsymbol": [40, 43, 44], "parse_rul": [40, 43, 44], "parser": [40, 43, 44], "syntax_preprocess": [40, 43], "probfol2datalogmixin": [40, 43, 47, 58], "chart_pars": [40, 49], "chart": [40, 49, 50], "chartpars": [40, 49, 50], "dictlexicon": [40, 49, 50, 52], "grammar": [40, 49, 50, 51, 53], "lexicon": [40, 49, 50], "rootrul": [40, 49, 50], "token": [40, 49, 50, 52, 53, 60], "drs_builder": [40, 49], "drs2fol": [40, 49, 51], "drsbuilder": [40, 49, 51], "indent": [40, 49, 51, 118], "english_grammar": [40, 49], "englishbaselexicon": [40, 49, 52], "case": [40, 45, 49, 52, 54, 65, 78, 89, 93, 100, 122, 123, 125], "gen": [40, 49, 52], "num": [40, 49, 52], "ambiguoussentenceexcept": [40, 49, 53], "couldnotparseexcept": [40, 49, 53], "grammarexcept": [40, 49, 53], "parsedatalogpredicateexcept": [40, 49, 53], "parseexcept": [40, 49, 53], "tokenizeexcept": [40, 49, 53], "translatetodatalogexcept": [40, 49, 53], "translate_to_dl": [40, 49], "transformintoconjunctionofdatalogsent": [40, 49, 54], "translatetodatalog": [40, 49, 54], "constant_co": [40, 55], "constant_exp": [40, 55], "constant_log": [40, 55], "constant_log10": [40, 55], "constant_sin": [40, 55], "constant_tan": [40, 55], "function_anatomical_anterior_of": [40, 58], "function_anatomical_inferior_of": [40, 58], "function_anatomical_posterior_of": [40, 58], "function_anatomical_superior_of": [40, 58], "function_anterior_of": [40, 58], "function_inferior_of": [40, 58], "function_left_of": [40, 58], "function_overlap": [40, 58], "function_posterior_of": [40, 58], "function_right_of": [40, 58], "function_superior_of": [40, 58], "load_neurosynth_mni_peaks_report": [40, 59], "del_symbol": [40, 59], "get_symbol": [40, 59, 114, 117], "new_symbol": [40, 59], "add_region": [40, 59], "add_region_set": [40, 59], "create_region": [40, 59], "make_implicit_regions_explicit": [40, 59], "new_region_symbol": [40, 59], "sphere": [40, 59], "add_constraint": [40, 60, 126], "compute_datalog_program_for_autocomplet": [40, 60], "execute_datalog_program": [40, 60], "predicate_parameter_nam": [40, 60], "reset_program": [40, 60], "help": [40, 61, 123], "operator_repr": [40, 61], "foral": [40, 61, 92, 125], "right_impl": [40, 61], "walk_function_appl": [40, 61, 64], "syntax": [41, 43, 45, 60, 78, 123, 125], "text": [41, 43, 44, 50, 60, 83, 107], "languag": [41, 53, 83, 85, 93, 122, 125], "walker": [41, 85, 89, 100], "abl": [41, 125], "translat": [41, 45, 47, 53, 61, 65, 80, 89, 100], "input": [41, 59, 94], "child": [41, 126], "itself": [41, 59, 74, 78], "els": [41, 72, 118], "simpli": [41, 93, 123], "s_sugar": [43, 45], "application_column_sugar": [43, 45], "conjunction_column_sugar": [43, 45], "implication_column_sugar": [43, 45], "head_constants_to_equ": [43, 45], "conditional_queri": [43, 45, 58], "rewrite_conditional_queri": [43, 45], "within_language_prob_queri": [43, 45, 58, 73, 78], "query_based_probchoice_wannab": [43, 45, 58], "query_based_probfact_wannab": [43, 45, 58], "replace_s_getattr_by_first_column": [43, 45], "implication_select_by_left_head": [43, 45], "detecteuclideandistanceboundmatrix": [43, 45, 46], "translateeuclideandistanceboundmatrixmixin": [43, 45, 46, 58], "cmd_arg": [43, 44], "cmd_identifi": [43, 44, 60], "comparison": [43, 44, 46, 120], "condit": [43, 44, 49, 51, 74, 81, 84, 89, 92, 95], "div_term": [43, 44], "ext_identifi": [43, 44], "factor": [43, 44, 66], "head_pred": [43, 44], "id_appl": [43, 44], "identifi": [43, 44, 60, 80], "identifier_regexp": [43, 44, 60], "keyword_arg": [43, 44], "keyword_item": [43, 44], "lambda_appl": [43, 44], "lambda_express": [43, 44], "minus_op": [43, 44], "minus_signed_id": [43, 44], "mul_term": [43, 44], "neg_float": [43, 44], "neg_int": [43, 44], "negated_pred": [43, 44], "plus_op": [43, 44], "pos_arg": [43, 44], "pos_float": [43, 44], "pos_int": [43, 44], "pos_item": [43, 44], "pow_factor": [43, 44], "probabilistic_fact": [43, 44, 58, 73, 78], "probabilistic_rul": [43, 44], "signed_int_ext_identifi": [43, 44], "sing_factor": [43, 44], "sing_op": [43, 44], "sing_term": [43, 44], "statement": [43, 44, 102], "statement_funct": [43, 44], "translate_impl": [43, 47, 58, 65], "translate_marg_queri": [43, 47, 58], "local": [44, 123], "interact": [44, 107], "syntact": 45, "processor": 45, "set_symbol": 45, "column_posit": 45, "definit": [45, 53, 74, 83, 84, 100, 125], "getattr": 45, "recognis": 45, "selector": 45, "specif": [45, 59, 72, 74, 94, 118, 123, 125, 126], "fresh0": 45, "fresh1": 45, "fresh2": 45, "impl": [45, 51, 66, 85, 89], "p1": 45, "p2": 45, "eq": [45, 95], "any_other_express": [45, 46], "get_distance_upper_bound": [45, 46], "get_range_pred_for_coord": [45, 46], "get_var_to_euclidean_equ": [45, 46], "euclidean_spatial_bound": [45, 46, 58], "safe_range_pred_to_coord_set": [45, 46, 58], "solve_spatial_bound": [45, 46, 58], "upper_bound_to_max_dist": [45, 46, 58], "detect": 46, "special": [46, 103], "reserv": [46, 60], "dimension": 46, "space": [46, 57, 59], "upper": 46, "point": [46, 70, 97, 100, 126], "therebi": 46, "consid": [46, 61, 83, 94], "rang": [46, 65, 105, 109, 113], "r2": 46, "coord_arg": 46, "range_pr": 46, "functionappl": [46, 84, 86, 91, 94, 100, 102], "first_coord_arrai": 46, "arrai": [46, 53, 59, 70, 126], "second_coord_arrai": 46, "max_dist": 46, "upper_bound": 46, "marg": [47, 89, 92, 95], "imp": [47, 65], "edg": [49, 50, 74], "complet": [49, 50, 100, 105, 107, 123], "unif": [49, 50, 89, 103], "used_edg": [49, 50], "recogn": [49, 50], "get_mean": [49, 50, 52], "next_token": [49, 50], "yield_comma": [49, 50], "yield_quot": [49, 50], "yield_word": [49, 50], "unary_conjunct": [49, 51], "comma_and": [49, 51], "float_dr": [49, 51], "indefinite_noun_phras": [49, 51], "join_dr": [49, 51], "lit_noun_phras": [49, 51], "proper_nam": [49, 51], "quoted_pred": [49, 51], "sentence_list": [49, 51], "simple_and": [49, 51], "single_sentence_list": [49, 51], "var_apposit": [49, 51], "var_noun_phras": [49, 51], "nom": [49, 52], "notnom": [49, 52], "femal": [49, 52], "male": [49, 52], "thing": [49, 52], "plural": [49, 52], "singular": [49, 52], "translate_block": [49, 54], "translate_logical_sent": [49, 54], "translate_sent": [49, 54], "string": [50, 53, 54, 60, 100, 105, 109, 113, 118], "word": [50, 57, 60, 123], "constitu": 50, "quot": 50, "span": 50, "refer": [51, 78, 100], "conj": 51, "sl": 51, "tab": 51, "sentenc": [53, 54, 65], "interpret": [53, 54, 59, 60, 126], "problem": 53, "got": 53, "imposs": [53, 78], "embed": 53, "fragment": 53, "insid": [53, 64, 65], "control": 53, "stage": 53, "distributeimplicationswithconjunctivehead": [54, 66], "distributeuniversalquantifi": [54, 66], "allow": [54, 78, 80, 100, 123, 126], "flexibl": [54, 100], "wai": [54, 123], "becaus": [54, 57, 65, 74], "properli": 54, "distribut": [54, 66, 74, 123], "distribute_implication_with_conjunctive_head": [54, 66], "distribute_universal_quantifi": [54, 66], "common": 55, "mathemat": [55, 125], "neurolangfrontend": 55, "constant_x": 55, "same_kind": 55, "dtype": 55, "subok": 55, "signatur": 55, "extobj": 55, "ufunc": 55, "co": 55, "log10": 55, "sin": 55, "tan": 55, "imaginari": [57, 100, 109, 110], "part": [57, 59, 83, 89, 93, 100, 109, 110], "complex": [57, 100, 109, 110, 125], "real": [57, 100, 109, 110], "version": [57, 59], "7": [57, 59, 74], "verbos": [57, 125], "convert_study_id": [57, 59], "datafram": [57, 105, 109, 113, 118], "featur": 57, "vocabulari": 57, "compress": 57, "spars": 57, "onc": [57, 100, 123], "reconstruct": 57, "dens": [57, 59], "per": 57, "well": [57, 60, 93, 116, 118, 123], "size": [57, 92, 118], "n": [57, 74, 80, 92, 95], "directori": [57, 59, 123], "save": [57, 59, 123], "param": [57, 118], "_fetch_fil": 57, "metadata": [57, 59, 118], "also": [57, 65, 117, 123, 125, 126], "therefor": 57, "pr": 57, "table_id": 57, "table_num": 57, "peak_id": 57, "own": 57, "line": [57, 123], "These": 57, "doi": [57, 83, 125], "author": 57, "year": 57, "journal": 57, "talaraich": 57, "pair": [57, 83, 100, 105, 109, 113], "With": [57, 126], "come": 57, "kept": 57, "minimum": [57, 59], "querybasedprobfacttodetrul": [58, 89], "cplogicmixin": [58, 73, 78], "typedsymboltablemixin": 58, "pchoice_pred_symb": [58, 73, 78, 83], "pfact_pred_symb": [58, 73, 78], "predicate_symbol": [58, 73, 78], "probabilistic_predicate_symbol": [58, 73, 78], "marg_impl": [58, 73, 78], "pchoice_pred_symb_set_symb": [58, 73, 78], "pfact_pred_symb_set_symb": [58, 73, 78], "query_based_probafact": [58, 89], "union_with_probabilistic_fact": [58, 73, 78], "union_with_query_based_pfact": [58, 89], "within_language_marg_queri": [58, 73, 78], "within_language_succ_queri": [58, 73, 78], "__pchoice_pred_symb_set_symb__": [58, 78], "__pfact_pred_symb_set_symb__": [58, 78], "manag": [59, 105, 116, 117, 121, 123], "manipul": 59, "brain": [59, 118], "platform": 59, "scale": 59, "autom": 59, "synthesi": 59, "magnet": 59, "reson": 59, "fmri": 59, "cbma": 59, "pmid": 59, "tf": 59, "idf": 59, "logic_program": 59, "decor": 59, "overrid": 59, "automat": 59, "latter": [59, 60], "p_ir": [59, 60], "l1": [59, 60], "l2": [59, 60], "nan": [59, 60], "l3": [59, 60], "quantified_vari": 59, "univers": [59, 65, 66, 125], "cosid": 59, "satisfi": 59, "proposit": [59, 125], "quatifi": 59, "delet": 59, "could": [59, 60, 87, 118, 123, 125], "stai": 59, "exit": 59, "yield": [59, 78, 116], "mode": 59, "fly": 59, "leq": 59, "retriev": 59, "via": 59, "either": [59, 100, 116, 123, 125], "correct": 59, "disappear": 59, "known": 59, "atlas": 59, "etc": 59, "dataobjimag": 59, "group": [59, 83, 100], "dataobj": 59, "ofinterest": 59, "region_set": [59, 96, 97], "interest": 59, "put": [59, 116], "notimplementederror": 59, "now": [59, 102, 123, 126], "spheric": 59, "3d": 59, "basic_represent": 60, "autocompletion_cod": 60, "classic": [60, 125], "next": 60, "accept": 60, "autocomplet": 60, "prog_complet": 60, "prog": 60, "sign": 60, "lambda": 60, "bolean": 60, "regular": 60, "against": 60, "query_express": 60, "get": [60, 83, 103, 117, 118, 122, 123], "obtain": [60, 65, 67, 89, 93, 95, 126], "perform": [60, 105, 121, 123, 125], "inferenti": 60, "three": 60, "modal": 60, "memori": [60, 105, 109, 113, 117, 126], "read": 60, "descrpit": 60, "clear": 60, "those": [61, 65, 94], "ergonom": 61, "manner": [61, 116, 125, 126], "attent": 61, "paid": 61, "enunci": 61, "truth": 61, "anyth": 61, "even": 61, "altern": [61, 125, 126], "infix": 61, "applic": [61, 67, 100, 102, 118, 123], "built": [61, 78, 126], "or_": [61, 95], "verifi": [61, 66], "denot": [61, 92], "op": 61, "interv": 62, "other_region_interv": 62, "walklogicprogramaggregatingset": [64, 65, 66], "extractlogicatom": 64, "extract_predicates_fa": 64, "extractlogicpred": 64, "hasexistentialpred": 64, "nari": 64, "logicsolv": 64, "evaluate_conjunct": 64, "evaluate_disjunct": 64, "evaluate_impl": 64, "evaluate_implication_false_anteced": 64, "evaluate_implication_false_consequ": 64, "evaluate_implication_true_anteced": 64, "evaluate_implication_true_consequ": 64, "evaluate_neg": 64, "invers": 64, "ormat": 64, "has_existential_quantifi": 64, "logicexpress": [64, 94], "is_logic_function_appl": 64, "function_appl": [64, 67], "horn": 65, "claus": 65, "hornclaus": 65, "fol": 65, "safe": [65, 80, 87, 116], "furthermor": 65, "theori": [65, 83], "behind": 65, "mostli": 65, "taken": 65, "chapter": [65, 100], "convertsrnftohornclaus": 65, "convert_srnf_to_horn_claus": 65, "negated_atom": 65, "negated_existenti": [65, 66], "fol2datalogmixin": 65, "fol2datalogtranslationexcept": 65, "hornfact": 65, "movenegationstoatomsorexistentialquantifi": 65, "movenegationstoatom": [65, 66], "negated_conjunct": [65, 66], "negated_disjunct": [65, 66], "negated_univers": [65, 66], "remove_double_neg": [65, 66], "remove_singl": [65, 66], "walk_const": [65, 66, 91], "walk_funct": [65, 66, 91], "walk_impl": [65, 66, 91], "walk_neg": [65, 66, 91], "walk_quantifi": [65, 66, 91], "walk_symbol": [65, 66, 91], "neurolangtranslatetohornclauseexcept": 65, "rangerestrictedvari": 65, "follow": [65, 74, 78, 92, 123, 126], "involv": [65, 100], "translatehornclausestodatalog": 65, "logicexpressionwalk": [65, 66, 91], "horn_fact": 65, "horn_rul": 65, "_answer_": 65, "requir": [65, 89, 123, 126], "appear": [65, 93, 125], "stack": 65, "remaind": 65, "introduc": [65, 85], "care": [65, 89, 105, 109, 113], "ensur": 65, "To": [65, 125], "alongsid": [65, 74], "precis": 65, "ones": [65, 83], "alter": 65, "overal": 65, "convert_to_srnf": 65, "fol_query_to_datalog_program": 65, "throw": 65, "is_safe_rang": 65, "range_restricted_vari": 65, "translate_horn_clauses_to_datalog": 65, "straightforward": 65, "checkconjunctivequerywithneg": 66, "f_app": 66, "collapseconjunctionsmixin": 66, "collapsedisjunct": 66, "collapsedisjunctionsmixin": 66, "desambiguatequantifiedvari": 66, "varial": 66, "nary_logic_oper": [66, 94], "distributeconjunct": 66, "rotat": 66, "split": [66, 94, 125], "distributedisjunct": 66, "uq": 66, "eliminateimpl": 66, "occurr": 66, "remove_impl": 66, "extractboundvari": 66, "process_function_appl": 66, "process_symbol": 66, "extractconjunctivequerywithneg": 66, "pure_conjunct": 66, "extractfolfreevari": 66, "fonegelogicexpress": 66, "fo": 66, "abort_impl": 66, "abort_universal_pred": 66, "factorquantifiersmixin": 66, "conjunction_with_quantifi": 66, "disjunction_with_quantifi": 66, "freshenvariableswhenquantifi": 66, "free_vari": 66, "replace_variable_in_quantifi": 66, "walk_through_impl": 66, "guaranteeconjunct": 66, "identitywalk": 66, "guarantee_conjunct": 66, "guaranteedisjunct": 66, "makeexistentialsimplicit": 66, "makeuniversalsimplicit": 66, "movenegationstoatomsmixin": 66, "movenegationstoatomsinfoneg": 66, "movenegationstoatomssimpleoperationsmixin": 66, "pulluniversalupfromneg": 66, "move": 66, "furthest": 66, "removetrivialoperationsmixin": 66, "pullexistentialupfromneg": 66, "On": [66, 123], "movequantifiersup": 66, "prenex": 66, "movequantifiersupfoneg": 66, "pushexistentialsdown": 66, "pushexistentialsdownmixin": 66, "dont_push_when_it_can_be_unsaf": 66, "nested_existenti": 66, "push_eliminate_trivial_oper": 66, "push_existential_down": 66, "push_existential_down_disjunct": 66, "remove_trivial_existenti": 66, "pushquantifiersdown": 66, "pushuniversalsdownmixin": 66, "push_universal_down_conjunct": 66, "push_universal_down_disjunct": 66, "remove_trivial_univers": 66, "pushuniversalsdown": 66, "removeduplicatedconjunctsdisjunct": 66, "removeexistentialonvari": 66, "variables_to_elimin": 66, "removeexistentialpred": 66, "removetrivialoper": 66, "removeuniversalpred": 66, "replacefreesymbolwalk": 66, "symbol_replac": 66, "replacesymbolwalk": 66, "replace_free_vari": 66, "stop_if_bound": 66, "usedquantifi": 66, "convert_to_pnf_with_cnf_matrix": 66, "convert_to_pnf_with_dnf_matrix": 66, "nary_op_has_duplicated_formula": 66, "nary_op": 66, "apply_substitut": 67, "apply_substitution_argu": 67, "compose_substitut": 67, "subs1": 67, "subs2": 67, "merge_substitut": 67, "most_general_unifi": 67, "expression1": 67, "expression2": 67, "unifi": [67, 94, 125], "most_general_unifier_argu": 67, "args1": 67, "args2": 67, "most_general_unifier_extract_argu": 67, "intermediate_represent": 69, "bounded_area": 70, "another_box": 70, "func": 70, "is_contain": 72, "q1": [72, 94], "q2": [72, 94], "caveat": 72, "judg": 72, "is_contained_rul": 72, "build_always_true_provenance_rel": 73, "prob_col": 73, "proven": [73, 80, 89, 92, 95], "re": [73, 89, 123, 126], "columnstr": [73, 74, 100], "provenancealgebraset": [73, 80, 89, 92, 95], "fresh_name_rel": 73, "ra_set": [73, 83], "rename_columns_for_args_to_match": 73, "src_arg": 73, "dst_arg": 73, "renam": [73, 100, 105, 109, 110, 113], "target": 73, "relationalalgebraoper": [73, 87, 89, 100], "unsolv": 73, "nest": 73, "scheme": 73, "cplogic_to_gm": 73, "andplatenod": [73, 74], "bernoulliplatenod": [73, 74], "cplogicgroundingtographicalmodeltransl": [73, 74], "add_plate_nod": [73, 74], "block_of_ground": [73, 74], "extensional_set_ground": [73, 74], "intensional_rule_ground": [73, 74], "probabilistic_choice_ground": [73, 74], "probfact_set_ground": [73, 74], "graphicalmodel": [73, 74], "get_nod": [73, 74], "get_parent_node_symbol": [73, 74], "narychoiceplatenod": [73, 74], "narychoiceresultplatenod": [73, 74], "platenod": [73, 74], "probabilisticplatenod": [73, 74], "is_extensional_ground": [73, 74], "gm_provenance_solv": 73, "ground": [73, 74, 83, 84, 94], "build_extensional_ground": [73, 76], "build_ground": [73, 76], "build_pchoice_ground": [73, 76], "build_pfact_grounding_from_set": [73, 76], "build_probabilistic_ground": [73, 76], "build_rule_ground": [73, 76], "cplogic_to_datalog": [73, 76], "get_grounding_depend": [73, 76], "get_grounding_pred_symb": [73, 76], "get_grounding_pred": [73, 76], "ground_cplogic_program": [73, 76], "remove_probability_column": [73, 76], "topological_sort_ground": [73, 76], "topological_sort_groundings_util": [73, 76], "problog_solv": 73, "probabilistic_choic": [73, 78], "query_based_probabilistic_choic": [73, 78], "query_based_probabilistic_fact": [73, 78], "query_based_probabilistic_pred": [73, 78], "cplogicprogram": [73, 78, 80, 87, 89, 92, 93, 95], "node_symbol": 74, "random": [74, 81, 83], "sens": 74, "cpd": 74, "let": [74, 83, 92, 118, 125], "y_1": 74, "y_n": 74, "AND": [74, 102], "y_i": 74, "probability_column": [74, 87], "bernoulli": 74, "although": 74, "factori": 74, "margin": 74, "batch": 74, "extra": [74, 95], "would": 74, "_p_": 74, "parent_node_symbol": 74, "ari": 74, "chosen": 74, "cp": [74, 80, 83, 89, 92, 95], "event": [74, 83], "a_1": 74, "p_1": 74, "a_n": 74, "p_n": 74, "respect": 74, "p_2": 74, "a_2": 74, "pred_symb": [76, 83], "tuple_set": 76, "cpl_program": [76, 80, 87, 89, 92, 95], "dl_instanc": 76, "grounding_cl": 76, "st_item": 76, "grounded_exp": 76, "visit": 76, "extend": [78, 83, 89, 100], "semant": [78, 94, 105, 109, 113], "problog": 78, "probabilsit": 78, "9": [78, 83], "or_x": 78, "arithmet": [78, 100], "ins": 78, "lower": 78, "enforc": [78, 83], "thu": 78, "discov": 78, "fulli": 78, "backward": 78, "compat": [78, 103, 118], "probabilisticfact": [78, 84], "plan": [80, 87, 89], "liftabl": 80, "segment": 80, "nonlift": [80, 87], "dalvi": [80, 92], "suciu": [80, 92], "dichotomi": [80, 92], "59": 80, "87": 80, "cpl": [80, 89, 92, 95], "run_relational_algebra_solv": [80, 89, 92, 95], "succ": [80, 92, 95], "discretedistribut": 81, "expect": [81, 100], "fun": 81, "tabledistribut": 81, "conditioned_on": 81, "forbiddenconditionalquerynoprob": 82, "unsupportedqueryerror": 82, "forbiddenconditionalquerynonconjunct": 82, "malformedprobabilistictupleerror": 82, "noteasilyshatterableerror": 82, "unsupportedsolvererror": 82, "nothierarchicalqueryexcept": 82, "repeatedtuplesinprobabilisticrelationerror": 82, "n_repeated_tupl": 82, "n_tupl": 82, "messag": [82, 105, 121], "uncomparabledistributionserror": 82, "unsupportedprobabilisticqueryerror": 82, "add_to_union": 83, "to_add": 83, "unino": 83, "new_union": 83, "build_probabilistic_fact_set": 83, "pfact": 83, "check_probabilistic_choice_set_probabilities_sum_to_on": 83, "const_or_symb_as_python_typ": 83, "construct_within_language_succ_result": 83, "provset": 83, "get_probchoice_variable_equ": 83, "sort": [83, 118], "get_within_language_prob_query_prob_term": 83, "group_preds_by_functor": 83, "filter_set": 83, "filter": 83, "group_probabilistic_facts_by_pred_symb": 83, "is_builtin": 83, "pred": 83, "is_probabilistic_fact": 83, "alpha": 83, "x_1": 83, "dot": 83, "x_n": 83, "top": [83, 123], "venneken": 83, "joost": 83, "marc": 83, "deneck": 83, "mauric": 83, "bruynoogh": 83, "causal": 83, "practic": 83, "2009": [83, 100], "245": 83, "308": 83, "1017": 83, "s1471068409003767": 83, "is_probabilistic_predicate_symbol": 83, "is_query_based_probpred": 83, "is_within_language_prob_queri": 83, "lift_optimization_for_choice_pred": 83, "separate_deterministic_probabilistic_cod": 83, "query_pr": 83, "det_symbol": 83, "prob_symbol": 83, "union_contains_probabilistic_fact": 83, "within_language_succ_query_to_intensional_rul": 83, "probabilisticbinarylogicoper": 84, "binarylogicoper": 84, "probabilisticchoic": 84, "probabilisticpred": 84, "probabilisticchoiceground": 84, "differenti": 84, "probabilisticqueri": 84, "validate_argu": [84, 86], "replacewlqwalk": 85, "wlq_express": 85, "d2": 85, "look": 85, "replace_probabilistic_pred": 85, "replace_probabilistic_queri": 85, "expr": 85, "probabilistic_postprocess_magic_rul": 85, "magic_rul": 85, "wlq": [85, 93], "someth": 85, "post": [85, 93], "step": [85, 123, 126], "update_rules_with_new_prob_express": 85, "rules_to_upd": 85, "wlq_expr": 85, "ppdlmixin": 86, "ppdl_rule": 86, "ppdldeltasymbol": 86, "dist_nam": 86, "n_term": 86, "ppdldeltaterm": 86, "get_dterm": 86, "datom": 86, "get_dterm_index": 86, "is_ppdl_rul": 86, "deterministicfactset": 87, "getprobabilisticsetatom": 87, "resolve_symbol": 87, "non_liftable_queri": 87, "lift": [87, 92], "probabilisticchoiceset": 87, "probabilisticfactset": 87, "classify_and_wrap_symbol": 87, "ra_set_dict": 87, "wrapper": 87, "generate_probabilistic_symbol_table_for_queri": 87, "wrap": 87, "cplogic": 87, "relationship": 87, "is_atom_a_deterministic_rel": 87, "is_atom_a_probabilistic_choice_rel": 87, "is_atom_a_probabilistic_fact_rel": 87, "probsemiringsolv": 88, "probsemiringsolvermixin": 88, "relationalalgebrasolv": [88, 100], "arithmetic_string_express": [88, 95, 100], "concatenate_constant_column": [88, 95, 100], "cycle_in_build_provenance_algebra_set": [88, 95], "deterministic_fact_set": [88, 95], "deterministic_fact_set_gener": 88, "eliminate_superfluous_project": [88, 95], "empty_deterministic_fact_set": 88, "name_columns_int_rap": [88, 95], "name_columns_rap": [88, 95], "number_columns_rap": [88, 95], "probabilistic_choice_set": [88, 95], "probabilistic_choice_set_to_symbol": 88, "probabilistic_fact_set": [88, 95], "probabilistic_fact_set_invalid": [88, 95], "projection_rap": [88, 95], "projection_rap_columnint": [88, 95], "projection_rap_columnint_subset": [88, 95], "prov_arithmetic_oper": [88, 95, 100], "prov_concatenate_constant_column": [88, 95], "prov_extended_project": [88, 95], "prov_naturaljoin": [88, 95], "prov_naturaljoin_invers": 88, "prov_product": [88, 95], "prov_rename_column": [88, 95], "prov_union": [88, 95], "push_projection_in_determinist": 88, "ra_const": [88, 95, 100], "ra_differ": [88, 95, 100], "ra_equijoin": [88, 95, 100], "ra_full_outer_naturaljoin": [88, 95, 100], "ra_intersect": [88, 95, 100], "ra_left_naturaljoin": [88, 95, 100], "ra_name_column": [88, 95, 100], "ra_naturaljoin": [88, 95, 100], "ra_number_column": [88, 95, 100], "ra_product": [88, 95, 100], "ra_project": [88, 95, 100], "ra_rename_column": [88, 95, 100], "ra_symbol": [88, 95, 100], "ra_union": [88, 95, 100], "selection_between_column": [88, 95, 100], "selection_by_const": [88, 95, 100], "selection_general_selection_by_const": [88, 95, 100], "selection_provenance_set": [88, 95], "selection_rap_eq_columnint": [88, 95], "selection_rap_eq_columnint_columnint": [88, 95], "set_destroi": [88, 95, 100], "buildprovenancealgebrasetwalkintomixin": 88, "relationalalgebraprovenancecountingsolvermixin": 88, "deterministic_set": [88, 95], "det_fact_set": 88, "prob_choice_set": [88, 95], "prob_fact_set": [88, 95], "probsemiringtorelationalalgebrasolv": [88, 89], "resolvesymbolmixin": 88, "symbol_from_t": [88, 102], "addneededproject": 89, "needed_project": 89, "add_project": 89, "filterzeroprob": 89, "add_zero_filt": 89, "floatarithmeticsimplifi": 89, "simplify_mul_left": 89, "simplify_mul_right": 89, "take": [89, 95], "proper": 89, "_f1_": 89, "_f2_": 89, "sure": 89, "expos": [89, 120], "user": [89, 118, 122, 123], "her": 89, "raqueryoptimis": [89, 95], "eliminatetrivialproject": [89, 99], "renameoptim": [89, 95, 99], "simplifyextendedprojectionswithconst": [89, 99], "pushunnamedselectionsup": [89, 99], "convert_extended_projection_2_project": [89, 99], "convert_extended_projection_2_renam": [89, 99], "convert_rename_column": [89, 95, 99], "eliminate_trivial_nested_project": [89, 99], "eliminate_trivial_nested_unnamed_project": [89, 99], "eliminate_trivial_number_column": [89, 95, 99], "eliminate_trivial_project": [89, 99], "eliminate_trivial_projection_number_column": [89, 95, 99], "eliminate_trivial_selection_number_column": [89, 95, 99], "invert_selection_ord": [89, 99], "merge_nested_rename_column": [89, 95, 99], "merge_rename_column_group_bi": [89, 95, 99], "merge_rename_columns_extended_project": [89, 95, 99], "nested_extended_projection_const": [89, 99], "nested_extended_projection_leftnaturaljoin_const": [89, 99], "nested_extended_projection_leftnaturaljoin_constantr": [89, 99], "nested_extended_projection_naturaljoin_constant_l": [89, 99], "nested_extended_projection_naturaljoin_constantr": [89, 99], "nested_extended_projection_outernaturaljoin_const": [89, 99], "nested_extended_projection_outernaturaljoin_constantr": [89, 99], "push_computed_columns_up": [89, 99], "push_computed_columns_up_flip": [89, 99], "push_computed_columns_up_left": [89, 99], "push_computed_columns_up_out": [89, 99], "push_rename_past_groupbi": [89, 95, 99], "push_rename_past_project": [89, 95, 99], "push_rename_past_select": [89, 95, 99], "push_replace_null_in_ext_proj": [89, 99], "push_selection_above_name_column": [89, 99], "push_selection_above_project": [89, 99], "remove_trivial_renam": [89, 95, 99], "replace_trivial_agg_groupbi": [89, 99], "simplify_projection_extended_project": [89, 99], "simplify_renames_nam": [89, 95, 99], "split_rename_left_naturaljoin": [89, 95, 99], "split_rename_naturaljoin": [89, 95, 99], "split_rename_outer_naturaljoin": [89, 95, 99], "standardize_projected_column": [89, 99], "switch_rename_replace_nul": [89, 95, 99], "compute_probabilistic_solut": 89, "det_edb": 89, "pfact_db": 89, "pchoice_edb": 89, "prob_idb": 89, "succ_prob_solv": 89, "marg_prob_solv": 89, "compute_projections_needed_to_reintroduce_head_term": 89, "ra_queri": 89, "flat_queri": 89, "unified_queri": 89, "functionapplicationlistmemb": [89, 100], "binari": [89, 102], "generate_provenance_query_solv": 89, "solver_class": 89, "rap": 89, "namedalgebraset": 89, "lift_solve_marg_queri": 89, "succ_solv": 89, "partially_rank_queri": 90, "verify_that_the_query_is_rank": 90, "normalizenotequ": 91, "flip_ne_argu": 91, "relationalalgebraselectionconjunct": 91, "selection_conjunct": 91, "shatterequ": 91, "symbol_set": 91, "shatter_inequ": 91, "shatter_symbol": 91, "atom_to_constant_to_ra_condit": 91, "conditions_per_symbol": 91, "ucq_queri": 91, "sets_per_symbol": 91, "shatter_const": 91, "shatter_al": 91, "hierarch": 92, "small": 92, "theorem": 92, "join": 92, "Then": [92, 99, 123, 126], "polynomi": 92, "hard": 92, "robert": 92, "fink": 92, "dan": 92, "olteanu": 92, "33rd": 92, "sigmod": 92, "sigact": 92, "sigart": 92, "symposium": 92, "principl": 92, "14": 92, "144": 92, "155": 92, "york": 92, "ny": 92, "nilesh": 92, "523": 92, "544": 92, "2007": 92, "extract_atom_sets_and_detect_self_join": 92, "is_hierarchical_without_self_join": 92, "sai": [92, 125, 126], "get_list_of_intensional_rul": 93, "want": [93, 123, 126], "reachable_code_from_queri": 93, "find": 93, "answer": 93, "necessarili": 93, "formul": 93, "stratify_program": 93, "isol": 93, "strat": 93, "separ": [93, 118], "unsupportedprogramerror": 93, "add_existentials_except": 94, "exclud": 94, "quantif": 94, "convert_rule_to_ucq": 94, "convert_to_cnf_existential_ucq": 94, "cnf": 94, "convert_to_dnf_existential_ucq": 94, "dnf": 94, "minimise_formulas_contain": 94, "compon": 94, "containment_op": 94, "head_var": 94, "minimize_component_conjunct": 94, "qn": 94, "qi": 94, "qj": 94, "minimis": 94, "minimize_component_disjunct": 94, "minimize_ucq_in_cnf": 94, "minimize_ucq_in_dnf": 94, "split_positive_negative_formula": 94, "n_ary_log": 94, "unify_existential_vari": 94, "reduc": [94, 99], "possibli": 94, "weight": 95, "model": 95, "approach": 95, "knowledg": 95, "deterministicfactsettransl": 95, "deterministic_fact_set_const": 95, "eliminatesuperfluousprojectionmixin": 95, "sddwmcsemiringsolv": 95, "relationalalgebraprovenanceexpressionsemringsolv": 95, "generate_sdd_express": 95, "get_new_bernoulli_vari": 95, "wmc_weight": 95, "adjusted_prob": 95, "tag_express": 95, "previous_express": 95, "semiringraptosdd": 95, "var_count": 95, "symbols_to_liter": 95, "mul": 95, "wmcsemiringsolv": 95, "build_global_sdd_model_row": 95, "literal_prob": 95, "generate_probability_t": 95, "generate_weight": 95, "symbol_prob": 95, "literals_to_symbol": 95, "model_count_and_per_row_prob": 95, "initial_var_count": 95, "perform_wmc": 95, "sdd_compil": 95, "sdd_program": 95, "prob_set_program": 95, "prob_set_result": 95, "prepare_initial_queri": 95, "sdd_compilation_and_wmc": 95, "sdd_solver_global_model": 95, "set_prob": 95, "sdd_solver_per_individual_row": 95, "per_row_model": 95, "solve_succ_query_boolean_diagram": 95, "regexp": 96, "1000": 97, "points_ijk": 97, "image_shap": 97, "optimis": 98, "commutejoinsavoidcrossproduct": 99, "commute_left": 99, "commute_right": 99, "productsimplif": 99, "single_product": 99, "product": [99, 100], "relationalalgebraoptimis": 99, "rewriteselect": 99, "mix": [99, 100], "equi": 99, "composit": 99, "get_ar": 99, "merge_select": 99, "selection_between_columns_product": 99, "selection_by_constant_on_product": 99, "selection_on_equijoin": 99, "selection_on_equijoin_column": 99, "selection_push_right": 99, "selection_selection_swap": 99, "selection_shorten_right": 99, "sort_formula_arg": 99, "split_relations_column": 99, "swap_formula_arg": 99, "push": 99, "down": 99, "reach": 99, "flip": 99, "binaryrelationalalgebraoper": 100, "relation_left": 100, "relation_right": 100, "columnint": 100, "denomin": [100, 109, 110], "ration": [100, 109, 110], "lowest": [100, 109, 110], "numer": [100, 109, 110], "concatenateconstantcolumn": 100, "column_nam": 100, "column_valu": 100, "unaryrelationalalgebraoper": 100, "newli": 100, "destroi": 100, "src_column": [100, 105, 109, 110, 113], "dst_column": [100, 105, 109, 110, 113], "collect": 100, "concaten": 100, "concept": [100, 125], "destruct": 100, "20": [100, 105, 121], "onto": 100, "columns_left": 100, "columns_right": 100, "extendedproject": 100, "projection_list": 100, "section": 100, "garcia": 100, "molina": 100, "hector": 100, "jeffrei": 100, "jennif": 100, "widom": 100, "book": 100, "fullouternaturaljoin": 100, "fun_exp": 100, "member": 100, "effect": 100, "impli": 100, "destin": [100, 126], "groupbyaggreg": 100, "aggregate_funct": [100, 105, 109, 110, 113], "leftnaturaljoin": 100, "naryrelationalalgebraoper": 100, "namecolumn": 100, "give": [100, 102], "resolv": [100, 123], "numbercolumn": 100, "interfac": 100, "agg_op": 100, "concat_op": 100, "proj_op": 100, "arithmetic_op": 100, "name_column": 100, "number_column": 100, "renamecolumn": 100, "src": [100, 105, 108, 109, 110, 113], "dst": [100, 105, 108, 109, 110, 113], "shall": 100, "replaceconstantcolumnstrbysymbol": 100, "column_int": 100, "column_str": 100, "replacenul": 100, "stringarithmeticwalk": 100, "basic": 100, "length": [100, 117, 118], "arithmetic_oper": 100, "negative_valu": 100, "operation_sum": 100, "process_constant_column_int": 100, "process_constant_column_str": 100, "process_constant_float": 100, "process_constant_int": 100, "process_constant_str": 100, "translatable_numpy_oper": 100, "cst_col_int": 100, "cst_col_str": 100, "cst": 100, "get_expression_column": 100, "int2columnint_const": 100, "col": 100, "is_arithmetic_oper": 100, "is_translatable_oper": 100, "str2columnstr_const": 100, "OR": 102, "potenti": 102, "did": 102, "modifi": 102, "wip": 102, "domain": 102, "undeterminedtyp": 102, "typedsymboltableevalu": 102, "siek": 103, "vachharajani": 103, "gradual": 103, "2008": 103, "_final": 103, "_immut": 103, "less": [103, 125], "typ": 103, "deep": 103, "recursive_callback": 103, "type1": 103, "type2": 103, "type_hint": 103, "type_var": 103, "annot": 103, "t2": 103, "enclosing_scop": 104, "readonli": 104, "include_subtyp": 104, "group_column": [105, 109, 110, 113], "classmethod": [105, 109, 110, 113], "join_indic": [105, 109, 110, 113], "eval_express": [105, 109, 110, 113], "6": [105, 109, 113], "sequenc": [105, 108], "stop": [105, 108], "recommend": [105, 108, 123], "you": [105, 109, 113, 118, 123], "break": [105, 109, 113], "select_criteria": [105, 109, 110, 113], "selet_criteria": [105, 109, 113], "criteria": [105, 109, 113], "col0": [105, 109, 113], "col1": [105, 109, 113], "col2": [105, 109, 113], "logger": [105, 121], "init_messag": [105, 121], "init_arg": [105, 121], "end_messag": [105, 121], "end_arg": [105, 121], "init": [105, 121], "elaps": [105, 121], "info": [105, 121], "relationalalgebracolumn": [105, 109, 110], "dask_help": [105, 109], "dask_sql": [105, 109], "app": [105, 114, 118], "destrieuxengineconf": [105, 114, 116], "neurolangengineconfigur": [105, 114, 116, 117], "neurolangengineset": [105, 114, 116], "neurosynthengineconf": [105, 114, 116], "add_ploting_funct": [105, 114, 116], "init_frontend": [105, 114, 116], "load_destrieux_atla": [105, 114, 116], "load_neurosynth_data": [105, 114, 116], "lrucachedict": [105, 114, 117], "neurolangquerymanag": [105, 114, 117], "respons": [105, 114], "customqueryresultsencod": [105, 114, 118], "queryresult": [105, 114, 118], "base64_encode_nifti": [105, 114, 118], "base64_encode_spati": [105, 114, 118], "calculate_image_cent": [105, 114, 118], "serializevbr": [105, 114, 118], "serialize_mplt_thumbnail": [105, 114, 118], "logic_exp_commutative_equ": [105, 119, 120], "po": [105, 107], "to_dictionari": [105, 107], "token_opt": [105, 107], "compute_options_no_error": [105, 107], "compute_options_unexpected_char": [105, 107], "labeled_im": 106, "selected_label": 106, "lark": 107, "interactivepars": 107, "unexpectedcharact": 107, "add_engin": [114, 116], "brain_mask": [114, 116], "cancel": [114, 117, 118], "get_atla": [114, 117], "get_result": [114, 117], "submit_queri": [114, 117], "get_function_metadata": [114, 118], "get_result_item": [114, 118], "get_result_item_column": [114, 118], "get_result_item_valu": [114, 118], "set_error_detail": [114, 118], "set_results_detail": [114, 118], "combin": [116, 125], "keep": [116, 117], "track": [116, 117], "semaphor": 116, "acquir": 116, "releas": 116, "concurr": 116, "increas": 116, "timeout": 116, "contextmanag": 116, "until": 116, "At": 116, "back": 116, "invok": 116, "mni_mask": 116, "nifti1imag": [116, 117], "cache_len": 117, "ordereddict": 117, "eject": 117, "lru": 117, "mani": 117, "pool": 117, "thread": 117, "worker": 117, "submit": 117, "results_cach": 117, "uuid": [117, 118], "futur": [117, 118, 123], "attempt": 117, "task": 117, "engine_typ": 117, "request": [117, 118], "cach": 117, "job": 117, "dispatch": 117, "threadpool": 117, "executor": 117, "skipkei": 118, "ensure_ascii": 118, "check_circular": 118, "allow_nan": 118, "sort_kei": 118, "jsonencod": 118, "obj": 118, "serializ": 118, "o": 118, "typeerror": 118, "arbitrari": 118, "asc": 118, "get_valu": 118, "tornado": 118, "json": 118, "serial": 118, "get_item_valu": 118, "df": 118, "slice": 118, "base64": 118, "nifti2imag": 118, "spatialimag": 118, "image_row": 118, "seri": 118, "volumetr": [118, 125], "hash": 118, "thumbnail": 118, "click": [118, 123], "mpltfigurehandl": 118, "purpos": 120, "exp1": 120, "exp2": 120, "compar": 120, "commut": 120, "pure": 120, "apart": 120, "specialis": 122, "neuroimag": 122, "determin": 122, "our": [122, 125], "sphx_glr_auto_examples_plot_sulcal_queri": 122, "instal": 122, "guid": 122, "programm": 122, "scipi": 123, "scikit": 123, "learn": 123, "joblib": 123, "scientif": 123, "troubl": 123, "pythonxi": 123, "press": 123, "win": 123, "cmd": 123, "enter": 123, "ex": 123, "pip": 123, "u": 123, "correctli": 123, "navig": 123, "doubl": 123, "ubuntu": 123, "debian": 123, "ask": 123, "your": 123, "administr": 123, "sometim": 123, "sklearn": 123, "access": 123, "ctrl": 123, "alt": 123, "consol": 123, "pop": [123, 125], "git": 123, "latest": 123, "shell": 123, "clone": 123, "readili": 123, "updat": 123, "pull": 123, "root": 123, "realli": 123, "still": 123, "snapshot": 123, "link": 123, "unzip": 123, "archiv": 123, "previou": 123, "again": 123, "setup": 123, "everyth": 123, "By": 123, "librari": 123, "howev": 123, "reli": 123, "dask": 123, "sql": 123, "benefit": 123, "parallel": 123, "improv": 123, "slow": 123, "guarante": 123, "faster": 123, "maven": 123, "along": 123, "java": 123, "machin": 123, "sudo": 123, "apt": 123, "Or": 123, "conda": 123, "forg": 123, "ve": 123, "repositori": 123, "final": [123, 125, 126], "enabl": 123, "edit": 123, "configur": 123, "locat": 123, "under": 123, "ini": 123, "explor": [125, 126], "heterogen": 125, "sound": 125, "abiteboul1995": 125, "maier2018": 125, "whole": 125, "idea": 125, "assert": 125, "gyru": 125, "formalis": 125, "operatornam": 125, "_hemispher": 125, "_gyru": 125, "leftarrow": 125, "wedg": 125, "_label": 125, "shorten": 125, "_atla": 125, "notat": 125, "drop": 125, "arrow": 125, "lead": 125, "left_hemisphere_gyru": 125, "merit": 125, "cortex": 125, "_region": 125, "_sulcu": 125, "vee": 125, "written": 125, "begin": 125, "neurlang": 125, "left_hemisphere_region": 125, "left_hemisphere_sulcu": 125, "good": 125, "maximum": 125, "As": 125, "countri": 125, "_popul": 125, "_per": 125, "_countri": 125, "provinc": 125, "popul": 125, "_provinc": 125, "max_population_per_countri": 125, "population_per_country_provinc": 125, "tekl": 125, "kifer": 125, "m": 125, "warren": 125, "histori": 125, "outlook": 125, "ed": 125, "liu": 125, "100": 125, "machineri": 125, "claypool": 125, "2018": 125, "1145": 125, "3191315": 125, "3191317": 125, "basi": 126, "extens": 126, "came": 126, "python_embedded_": 126, "datalog_": 126, "connect": 126, "pleas": 126, "creation": 126, "suppos": 126, "distinct": 126, "agg_count": 126, "arriv": 126, "count_arriv": 126, "tgd": 126, "person": 126, "john": 126, "carl": 126, "mari": 126, "pat": 126, "anna": 126, "pete": 126, "has_par": 126, "chri": 126, "has_grand_par": 126}, "objects": {"": [[9, 0, 0, "-", "neurolang"]], "neurolang": [[10, 0, 0, "-", "CD_relations"], [11, 2, 1, "", "NeurolangDL"], [12, 2, 1, "", "NeurolangPDL"], [13, 0, 0, "-", "aabb_tree"], [14, 0, 0, "-", "commands"], [15, 0, 0, "-", "config"], [16, 0, 0, "-", "datalog"], [35, 0, 0, "-", "datalog_chase"], [36, 0, 0, "-", "exceptions"], [37, 0, 0, "-", "expression_pattern_matching"], [38, 0, 0, "-", "expression_walker"], [39, 0, 0, "-", "expressions"], [40, 0, 0, "-", "frontend"], [62, 0, 0, "-", "interval_algebra"], [63, 0, 0, "-", "logic"], [68, 0, 0, "-", "neurolang"], [69, 0, 0, "-", "neurolang_compiler"], [70, 0, 0, "-", "perior_tree"], [71, 0, 0, "-", "probabilistic"], [96, 0, 0, "-", "region_solver"], [97, 0, 0, "-", "regions"], [98, 0, 0, "-", "relational_algebra"], [101, 0, 0, "-", "relational_algebra_provenance"], [102, 0, 0, "-", "solver"], [103, 0, 0, "-", "type_system"], [104, 0, 0, "-", "typed_symbol_table"], [105, 0, 0, "-", "utils"]], "neurolang.CD_relations": [[10, 1, 1, "", "cardinal_relation"]], "neurolang.NeurolangDL": [[11, 3, 1, "", "__init__"]], "neurolang.NeurolangPDL": [[12, 3, 1, "", "__init__"]], "neurolang.aabb_tree": [[13, 2, 1, "", "AABB"], [13, 2, 1, "", "Node"], [13, 2, 1, "", "Tree"], [13, 1, 1, "", "aabb_from_vertices"]], "neurolang.aabb_tree.AABB": [[13, 4, 1, "", "center"], [13, 3, 1, "", "contains"], [13, 4, 1, "", "dim"], [13, 4, 1, "", "lb"], [13, 4, 1, "", "limits"], [13, 3, 1, "", "overlaps"], [13, 4, 1, "", "ub"], [13, 3, 1, "", "union"], [13, 4, 1, "", "volume"], [13, 4, 1, "", "width"]], "neurolang.aabb_tree.Node": [[13, 4, 1, "", "children"], [13, 4, 1, "", "is_leaf"], [13, 4, 1, "", "left"], [13, 4, 1, "", "right"]], "neurolang.aabb_tree.Tree": [[13, 3, 1, "", "add"], [13, 3, 1, "", "add_in_direction"], [13, 3, 1, "", "add_left"], [13, 3, 1, "", "add_right"], [13, 3, 1, "", "expand_region_box"], [13, 3, 1, "", "query_overlapping_regions"], [13, 3, 1, "", "query_regions_axdir"], [13, 3, 1, "", "query_regions_contained_in_box"]], "neurolang.commands": [[14, 2, 1, "", "CommandsMixin"]], "neurolang.commands.CommandsMixin": [[14, 3, 1, "", "load_atlas"], [14, 3, 1, "", "load_csv"], [14, 5, 1, "", "type"]], "neurolang.config": [[15, 2, 1, "", "NeurolangConfigParser"]], "neurolang.config.NeurolangConfigParser": [[15, 3, 1, "", "disable_expression_type_printing"], [15, 3, 1, "", "disable_probabilistic_solver_check_unate"], [15, 3, 1, "", "enable_expression_type_printing"], [15, 3, 1, "", "enable_probabilistic_solver_check_unate"], [15, 3, 1, "", "expression_type_printing"], [15, 3, 1, "", "get_probabilistic_solver_check_unate"], [15, 3, 1, "", "get_structural_knowledge_namespace"], [15, 3, 1, "", "set_query_backend"], [15, 3, 1, "", "set_structural_knowledge_namespace"], [15, 3, 1, "", "switch_backend"], [15, 3, 1, "", "switch_expression_type_printing"]], "neurolang.datalog": [[17, 0, 0, "-", "aggregation"], [18, 0, 0, "-", "basic_representation"], [19, 0, 0, "-", "chase"], [24, 0, 0, "-", "constraints_representation"], [25, 0, 0, "-", "exceptions"], [26, 0, 0, "-", "expression_processing"], [27, 0, 0, "-", "expressions"], [28, 0, 0, "-", "instance"], [29, 0, 0, "-", "magic_sets"], [30, 0, 0, "-", "negation"], [31, 0, 0, "-", "ontologies_parser"], [32, 0, 0, "-", "ontologies_rewriter"], [33, 0, 0, "-", "translate_to_named_ra"], [34, 0, 0, "-", "wrapped_collections"]], "neurolang.datalog.aggregation": [[17, 2, 1, "", "BuiltinAggregationMixin"], [17, 2, 1, "", "ChaseAggregationMixin"], [17, 2, 1, "", "DatalogWithAggregationMixin"], [17, 2, 1, "", "TranslateToLogicWithAggregation"], [17, 1, 1, "", "is_builtin_aggregation_functor"]], "neurolang.datalog.aggregation.BuiltinAggregationMixin": [[17, 5, 1, "", "constant_max"], [17, 5, 1, "", "constant_mean"], [17, 5, 1, "", "constant_std"], [17, 5, 1, "", "constant_sum"], [17, 3, 1, "", "function_count"]], "neurolang.datalog.aggregation.ChaseAggregationMixin": [[17, 3, 1, "", "check_constraints"], [17, 3, 1, "", "compute_result_set"], [17, 3, 1, "", "eliminate_already_computed"]], "neurolang.datalog.aggregation.DatalogWithAggregationMixin": [[17, 3, 1, "", "statement_intensional_aggregation"], [17, 5, 1, "", "type"]], "neurolang.datalog.aggregation.TranslateToLogicWithAggregation": [[17, 3, 1, "", "transform_function_application_consequent_to_aggregation"], [17, 5, 1, "", "type"]], "neurolang.datalog.basic_representation": [[18, 2, 1, "", "DatalogProgram"], [18, 2, 1, "", "Fact"], [18, 2, 1, "", "Implication"], [18, 2, 1, "", "NullConstant"], [18, 2, 1, "", "Undefined"], [18, 2, 1, "", "UnionOfConjunctiveQueries"], [18, 2, 1, "", "WrappedRelationalAlgebraSet"]], "neurolang.datalog.basic_representation.DatalogProgram": [[18, 5, 1, "", "protected_keywords"], [18, 5, 1, "", "type"]], "neurolang.datalog.basic_representation.Fact": [[18, 4, 1, "", "fact"], [18, 5, 1, "", "type"]], "neurolang.datalog.basic_representation.Implication": [[18, 5, 1, "", "type"]], "neurolang.datalog.basic_representation.NullConstant": [[18, 5, 1, "", "type"]], "neurolang.datalog.basic_representation.Undefined": [[18, 5, 1, "", "type"]], "neurolang.datalog.basic_representation.WrappedRelationalAlgebraSet": [[18, 3, 1, "", "unwrap"]], "neurolang.datalog.chase": [[19, 2, 1, "", "ChaseGeneral"], [19, 2, 1, "", "ChaseMGUMixin"], [19, 2, 1, "", "ChaseNaive"], [19, 2, 1, "", "ChaseNamedRelationalAlgebraMixin"], [19, 2, 1, "", "ChaseNode"], [19, 2, 1, "", "ChaseNonRecursive"], [19, 2, 1, "", "ChaseRelationalAlgebraPlusCeriMixin"], [19, 2, 1, "", "ChaseSemiNaive"], [19, 2, 1, "", "ChaseStratified"], [19, 6, 1, "", "NeuroLangNonLinearProgramException"], [19, 6, 1, "", "NeuroLangProgramHasLoopsException"], [20, 0, 0, "-", "general"], [21, 0, 0, "-", "mgu"], [22, 0, 0, "-", "negation"], [23, 0, 0, "-", "relational_algebra"]], "neurolang.datalog.chase.ChaseGeneral": [[19, 3, 1, "", "aggregate_tuple_type_into_row_type"], [19, 3, 1, "", "build_chase_solution"], [19, 3, 1, "", "build_chase_tree"], [19, 3, 1, "", "build_nodes_from_rules"], [19, 3, 1, "", "chase_step"], [19, 3, 1, "", "check_constraints"], [19, 3, 1, "", "compose_all_subtitutions"], [19, 3, 1, "", "compose_substitutions_ignoring_conflicts"], [19, 3, 1, "", "compose_substitutions_no_conflict"], [19, 3, 1, "", "compute_instance_update"], [19, 3, 1, "", "compute_new_tuple_and_type"], [19, 3, 1, "", "compute_result_set"], [19, 3, 1, "", "eliminate_already_computed"], [19, 3, 1, "", "evaluate_builtins"], [19, 3, 1, "", "evaluate_builtins_predicates"], [19, 3, 1, "", "extract_rule_predicates"], [19, 3, 1, "", "extract_variable_arguments"], [19, 3, 1, "", "get_args_to_project"], [19, 3, 1, "", "infer_iterable_subtype"], [19, 3, 1, "", "is_containment_of_symbol_in_constant"], [19, 3, 1, "", "is_equality_between_constant_and_symbol"], [19, 3, 1, "", "unify_builtin_substitution"], [19, 3, 1, "", "unify_builtin_substitution_containment"], [19, 3, 1, "", "unify_builtin_substitution_equality"]], "neurolang.datalog.chase.ChaseMGUMixin": [[19, 3, 1, "", "obtain_substitutions"], [19, 3, 1, "", "unify_substitution"]], "neurolang.datalog.chase.ChaseNaive": [[19, 3, 1, "", "execute_chase"]], "neurolang.datalog.chase.ChaseNamedRelationalAlgebraMixin": [[19, 3, 1, "", "chase_step"], [19, 3, 1, "", "compute_result_set"], [19, 3, 1, "", "eliminate_already_computed"], [19, 3, 1, "", "obtain_substitutions"], [19, 3, 1, "", "rewrite_antecedent_equalities"], [19, 3, 1, "", "rewrite_constants_in_consequent"], [19, 3, 1, "", "rewrite_rule_consequent_constants_to_equalities"], [19, 3, 1, "", "translate_conjunction_to_named_ra"]], "neurolang.datalog.chase.ChaseNode": [[19, 5, 1, "", "children"], [19, 5, 1, "", "instance"]], "neurolang.datalog.chase.ChaseNonRecursive": [[19, 3, 1, "", "check_constraints"], [19, 3, 1, "", "execute_chase"]], "neurolang.datalog.chase.ChaseRelationalAlgebraPlusCeriMixin": [[19, 3, 1, "", "compute_substitutions"], [19, 3, 1, "", "obtain_substitutions"], [19, 3, 1, "", "translate_predicate"], [19, 3, 1, "", "translate_predicate_process_argument"], [19, 3, 1, "", "translate_predicate_process_argument_symbol"], [19, 3, 1, "", "translate_to_ra_plus"]], "neurolang.datalog.chase.ChaseSemiNaive": [[19, 3, 1, "", "check_constraints"], [19, 3, 1, "", "execute_chase"], [19, 3, 1, "", "per_rule_update"]], "neurolang.datalog.chase.ChaseStratified": [[19, 3, 1, "", "build_chase_solution"], [19, 3, 1, "", "pick_chase_instance_for_stratum"]], "neurolang.datalog.chase.general": [[20, 2, 1, "", "ChaseGeneral"], [20, 2, 1, "", "ChaseNaive"], [20, 2, 1, "", "ChaseNode"], [20, 2, 1, "", "ChaseNonRecursive"], [20, 2, 1, "", "ChaseSemiNaive"], [20, 2, 1, "", "ChaseStratified"], [20, 6, 1, "", "NeuroLangNonLinearProgramException"], [20, 6, 1, "", "NeuroLangProgramHasLoopsException"]], "neurolang.datalog.chase.general.ChaseGeneral": [[20, 3, 1, "", "aggregate_tuple_type_into_row_type"], [20, 3, 1, "", "build_chase_solution"], [20, 3, 1, "", "build_chase_tree"], [20, 3, 1, "", "build_nodes_from_rules"], [20, 3, 1, "", "chase_step"], [20, 3, 1, "", "check_constraints"], [20, 3, 1, "", "compose_all_subtitutions"], [20, 3, 1, "", "compose_substitutions_ignoring_conflicts"], [20, 3, 1, "", "compose_substitutions_no_conflict"], [20, 3, 1, "", "compute_instance_update"], [20, 3, 1, "", "compute_new_tuple_and_type"], [20, 3, 1, "", "compute_result_set"], [20, 3, 1, "", "eliminate_already_computed"], [20, 3, 1, "", "evaluate_builtins"], [20, 3, 1, "", "evaluate_builtins_predicates"], [20, 3, 1, "", "extract_rule_predicates"], [20, 3, 1, "", "extract_variable_arguments"], [20, 3, 1, "", "get_args_to_project"], [20, 3, 1, "", "infer_iterable_subtype"], [20, 3, 1, "", "is_containment_of_symbol_in_constant"], [20, 3, 1, "", "is_equality_between_constant_and_symbol"], [20, 3, 1, "", "unify_builtin_substitution"], [20, 3, 1, "", "unify_builtin_substitution_containment"], [20, 3, 1, "", "unify_builtin_substitution_equality"]], "neurolang.datalog.chase.general.ChaseNaive": [[20, 3, 1, "", "execute_chase"]], "neurolang.datalog.chase.general.ChaseNode": [[20, 5, 1, "", "children"], [20, 5, 1, "", "instance"]], "neurolang.datalog.chase.general.ChaseNonRecursive": [[20, 3, 1, "", "check_constraints"], [20, 3, 1, "", "execute_chase"]], "neurolang.datalog.chase.general.ChaseSemiNaive": [[20, 3, 1, "", "check_constraints"], [20, 3, 1, "", "execute_chase"], [20, 3, 1, "", "per_rule_update"]], "neurolang.datalog.chase.general.ChaseStratified": [[20, 3, 1, "", "build_chase_solution"], [20, 3, 1, "", "pick_chase_instance_for_stratum"]], "neurolang.datalog.chase.mgu": [[21, 2, 1, "", "ChaseMGUMixin"]], "neurolang.datalog.chase.mgu.ChaseMGUMixin": [[21, 3, 1, "", "obtain_substitutions"], [21, 3, 1, "", "unify_substitution"]], "neurolang.datalog.chase.negation": [[22, 2, 1, "", "DatalogChaseNegation"], [22, 2, 1, "", "DatalogChaseNegationGeneral"], [22, 2, 1, "", "DatalogChaseNegationMGUMixin"], [22, 2, 1, "", "DatalogChaseNegationRelationalAlgebraMixin"], [22, 2, 1, "", "NegativeFactConstraints"]], "neurolang.datalog.chase.negation.DatalogChaseNegationGeneral": [[22, 3, 1, "", "chase_step"], [22, 3, 1, "", "check_non_linear"], [22, 3, 1, "", "evaluate_negative_builtins"], [22, 3, 1, "", "extract_rule_predicates"], [22, 3, 1, "", "get_args_to_project"], [22, 3, 1, "", "unify_negative_builtin_substitution"]], "neurolang.datalog.chase.negation.DatalogChaseNegationMGUMixin": [[22, 3, 1, "", "obtain_negative_substitutions"], [22, 3, 1, "", "unify_negative_substitution"]], "neurolang.datalog.chase.negation.DatalogChaseNegationRelationalAlgebraMixin": [[22, 3, 1, "", "obtain_negative_substitutions"]], "neurolang.datalog.chase.negation.NegativeFactConstraints": [[22, 3, 1, "", "check_constraints"]], "neurolang.datalog.chase.relational_algebra": [[23, 2, 1, "", "ChaseNamedRelationalAlgebraMixin"], [23, 2, 1, "", "ChaseRelationalAlgebraPlusCeriMixin"], [23, 2, 1, "", "NamedRelationalAlgebraOptimiser"]], "neurolang.datalog.chase.relational_algebra.ChaseNamedRelationalAlgebraMixin": [[23, 3, 1, "", "chase_step"], [23, 3, 1, "", "compute_result_set"], [23, 3, 1, "", "eliminate_already_computed"], [23, 3, 1, "", "obtain_substitutions"], [23, 3, 1, "", "rewrite_antecedent_equalities"], [23, 3, 1, "", "rewrite_constants_in_consequent"], [23, 3, 1, "", "rewrite_rule_consequent_constants_to_equalities"], [23, 3, 1, "", "translate_conjunction_to_named_ra"]], "neurolang.datalog.chase.relational_algebra.ChaseRelationalAlgebraPlusCeriMixin": [[23, 3, 1, "", "compute_substitutions"], [23, 3, 1, "", "obtain_substitutions"], [23, 3, 1, "", "translate_predicate"], [23, 3, 1, "", "translate_predicate_process_argument"], [23, 3, 1, "", "translate_predicate_process_argument_symbol"], [23, 3, 1, "", "translate_to_ra_plus"]], "neurolang.datalog.chase.relational_algebra.NamedRelationalAlgebraOptimiser": [[23, 5, 1, "", "type"]], "neurolang.datalog.constraints_representation": [[24, 2, 1, "", "DatalogConstraintsMixin"], [24, 2, 1, "", "DatalogConstraintsProgram"], [24, 2, 1, "", "RightImplication"], [24, 1, 1, "", "reachable_code"]], "neurolang.datalog.constraints_representation.DatalogConstraintsMixin": [[24, 3, 1, "", "add_existential_rules"], [24, 3, 1, "", "add_logic_constraint"], [24, 5, 1, "", "categorized_constraints"], [24, 3, 1, "", "constraints"], [24, 5, 1, "", "existential_rules"], [24, 3, 1, "", "get_constraints"], [24, 5, 1, "", "protected_keywords"], [24, 3, 1, "", "set_constraints"], [24, 5, 1, "", "type"]], "neurolang.datalog.constraints_representation.DatalogConstraintsProgram": [[24, 5, 1, "", "protected_keywords"], [24, 5, 1, "", "type"]], "neurolang.datalog.constraints_representation.RightImplication": [[24, 5, 1, "", "type"]], "neurolang.datalog.exceptions": [[25, 6, 1, "", "AggregatedVariableReplacedByConstantError"], [25, 6, 1, "", "BoundAggregationApplicationError"], [25, 6, 1, "", "InvalidMagicSetError"], [25, 6, 1, "", "NegationInMagicSetsRewriteError"], [25, 6, 1, "", "NoConstantPredicateFoundError"], [25, 6, 1, "", "NonConjunctiveAntecedentInMagicSetsError"]], "neurolang.datalog.expression_processing": [[26, 2, 1, "", "CollapseConjunctiveAntecedents"], [26, 2, 1, "", "EqualitySymbolLeftHandSideNormaliseMixin"], [26, 2, 1, "", "FlattenQueryInNonRecursiveUCQ"], [26, 2, 1, "", "FreshenFreeVariables"], [26, 2, 1, "", "HeadConstantToBodyEquality"], [26, 2, 1, "", "HeadRepeatedVariableToBodyEquality"], [26, 2, 1, "", "RemoveDuplicatedAntecedentPredicates"], [26, 2, 1, "", "TranslateToDatalogSemantics"], [26, 2, 1, "", "UnifyVariableEqualities"], [26, 2, 1, "", "UnifyVariableEqualitiesMixin"], [26, 1, 1, "", "all_body_preds_in_set"], [26, 1, 1, "", "any_body_preds_in_set"], [26, 1, 1, "", "conjunct_formulas"], [26, 1, 1, "", "conjunct_if_needed"], [26, 1, 1, "", "dependency_matrix"], [26, 1, 1, "", "enforce_conjunctive_antecedent"], [26, 1, 1, "", "extract_logic_atoms"], [26, 1, 1, "", "extract_logic_free_variables"], [26, 1, 1, "", "extract_logic_predicates"], [26, 1, 1, "", "flatten_query"], [26, 1, 1, "", "implication_has_existential_variable_in_antecedent"], [26, 1, 1, "", "is_aggregation_predicate"], [26, 1, 1, "", "is_aggregation_rule"], [26, 1, 1, "", "is_conjunctive_expression"], [26, 1, 1, "", "is_conjunctive_expression_with_nested_predicates"], [26, 1, 1, "", "is_ground_predicate"], [26, 1, 1, "", "is_linear_rule"], [26, 1, 1, "", "is_rule_with_builtin"], [26, 1, 1, "", "is_symb_to_const_equality"], [26, 1, 1, "", "is_to_be_sorted_equality"], [26, 1, 1, "", "is_var_equality_to_var_or_const"], [26, 1, 1, "", "maybe_deconjunct_single_pred"], [26, 1, 1, "", "maybe_disjunct"], [26, 1, 1, "", "program_has_loops"], [26, 1, 1, "", "reachable_code"], [26, 1, 1, "", "remove_conjunction_duplicates"], [26, 1, 1, "", "stratify"], [26, 1, 1, "", "stratify_obtain_facts_stratum"], [26, 1, 1, "", "stratify_obtain_new_stratum"]], "neurolang.datalog.expression_processing.CollapseConjunctiveAntecedents": [[26, 3, 1, "", "implication_with_collapsable_conjunctive_antecedent"], [26, 5, 1, "", "type"]], "neurolang.datalog.expression_processing.EqualitySymbolLeftHandSideNormaliseMixin": [[26, 3, 1, "", "reverse_equality"], [26, 3, 1, "", "sort_antecedent_equalities"], [26, 5, 1, "", "type"]], "neurolang.datalog.expression_processing.FlattenQueryInNonRecursiveUCQ": [[26, 3, 1, "", "builtin_application"], [26, 3, 1, "", "conjunction"], [26, 3, 1, "", "negation"], [26, 3, 1, "", "negation_function_application"], [26, 3, 1, "", "query_predicate"], [26, 5, 1, "", "type"]], "neurolang.datalog.expression_processing.FreshenFreeVariables": [[26, 3, 1, "", "implication_with_free_variables"], [26, 5, 1, "", "type"]], "neurolang.datalog.expression_processing.HeadConstantToBodyEquality": [[26, 3, 1, "", "implication_with_constant_term_in_head"], [26, 5, 1, "", "type"]], "neurolang.datalog.expression_processing.HeadRepeatedVariableToBodyEquality": [[26, 3, 1, "", "implication_with_repeated_variable_in_head"], [26, 5, 1, "", "type"]], "neurolang.datalog.expression_processing.RemoveDuplicatedAntecedentPredicates": [[26, 3, 1, "", "implication_with_duplicated_antecedent_predicate"], [26, 5, 1, "", "type"]], "neurolang.datalog.expression_processing.TranslateToDatalogSemantics": [[26, 5, 1, "", "type"]], "neurolang.datalog.expression_processing.UnifyVariableEqualities": [[26, 5, 1, "", "type"]], "neurolang.datalog.expression_processing.UnifyVariableEqualitiesMixin": [[26, 3, 1, "", "add_equality_with_constant"], [26, 3, 1, "", "add_equality_with_symbol"], [26, 3, 1, "", "build_substitutions_from_equalities"], [26, 3, 1, "", "extract_and_unify_var_eqs_in_implication"], [26, 3, 1, "", "extract_variable_equalities"], [26, 5, 1, "", "type"]], "neurolang.datalog.expressions": [[27, 2, 1, "", "Conjunction"], [27, 2, 1, "", "Fact"], [27, 2, 1, "", "Implication"], [27, 2, 1, "", "Negation"], [27, 2, 1, "", "TranslateToLogic"], [27, 2, 1, "", "UnaryLogicOperator"], [27, 2, 1, "", "Union"]], "neurolang.datalog.expressions.Conjunction": [[27, 5, 1, "", "type"]], "neurolang.datalog.expressions.Fact": [[27, 4, 1, "", "fact"], [27, 5, 1, "", "type"]], "neurolang.datalog.expressions.Implication": [[27, 5, 1, "", "type"]], "neurolang.datalog.expressions.Negation": [[27, 5, 1, "", "type"]], "neurolang.datalog.expressions.TranslateToLogic": [[27, 3, 1, "", "build_conjunction_from_expression_block"], [27, 3, 1, "", "translate_true_implication"], [27, 5, 1, "", "type"]], "neurolang.datalog.expressions.UnaryLogicOperator": [[27, 5, 1, "", "type"]], "neurolang.datalog.expressions.Union": [[27, 5, 1, "", "type"]], "neurolang.datalog.instance": [[28, 2, 1, "", "FrozenInstance"], [28, 2, 1, "", "FrozenMapInstance"], [28, 2, 1, "", "FrozenSetInstance"], [28, 2, 1, "", "Instance"], [28, 2, 1, "", "MapInstance"], [28, 2, 1, "", "SetInstance"]], "neurolang.datalog.instance.FrozenInstance": [[28, 3, 1, "", "copy"], [28, 3, 1, "", "is_empty"]], "neurolang.datalog.instance.FrozenMapInstance": [[28, 3, 1, "", "as_map"], [28, 3, 1, "", "as_set"], [28, 3, 1, "", "items"], [28, 3, 1, "", "values"]], "neurolang.datalog.instance.FrozenSetInstance": [[28, 3, 1, "", "as_map"], [28, 3, 1, "", "as_set"]], "neurolang.datalog.instance.Instance": [[28, 3, 1, "", "copy"]], "neurolang.datalog.instance.MapInstance": [[28, 3, 1, "", "as_map"], [28, 3, 1, "", "as_set"]], "neurolang.datalog.instance.SetInstance": [[28, 3, 1, "", "add"], [28, 3, 1, "", "as_map"], [28, 3, 1, "", "as_set"], [28, 3, 1, "", "discard"]], "neurolang.datalog.magic_sets": [[29, 2, 1, "", "AdornedSymbol"], [29, 2, 1, "", "LeftToRightSIPS"], [29, 2, 1, "", "ReplaceAdornedSymbolWalker"], [29, 2, 1, "", "SIPS"], [29, 1, 1, "", "adorn_antecedent"], [29, 1, 1, "", "adorn_code"], [29, 1, 1, "", "create_balbin_magic_rules"], [29, 1, 1, "", "create_magic_query_inits"], [29, 1, 1, "", "edb_with_prob_symbols"], [29, 1, 1, "", "magic_predicate"], [29, 1, 1, "", "magic_rewrite"], [29, 1, 1, "", "reachable_adorned_code"]], "neurolang.datalog.magic_sets.AdornedSymbol": [[29, 4, 1, "", "name"], [29, 5, 1, "", "type"]], "neurolang.datalog.magic_sets.ReplaceAdornedSymbolWalker": [[29, 3, 1, "", "implication"], [29, 3, 1, "", "replace_adorned_symbol"], [29, 5, 1, "", "type"]], "neurolang.datalog.magic_sets.SIPS": [[29, 3, 1, "", "creates_arcs"]], "neurolang.datalog.negation": [[30, 2, 1, "", "DatalogProgramNegation"], [30, 2, 1, "", "DatalogProgramNegationMixin"], [30, 2, 1, "", "NegativeFact"], [30, 1, 1, "", "is_conjunctive_negation"]], "neurolang.datalog.negation.DatalogProgramNegation": [[30, 5, 1, "", "protected_keywords"], [30, 5, 1, "", "type"]], "neurolang.datalog.negation.DatalogProgramNegationMixin": [[30, 3, 1, "", "negation_constant"], [30, 3, 1, "", "negative_fact"], [30, 3, 1, "", "statement_intensional"], [30, 5, 1, "", "type"]], "neurolang.datalog.negation.NegativeFact": [[30, 4, 1, "", "fact"], [30, 5, 1, "", "type"]], "neurolang.datalog.ontologies_parser": [[31, 2, 1, "", "OntologyParser"]], "neurolang.datalog.ontologies_parser.OntologyParser": [[31, 3, 1, "", "parse_ontology"]], "neurolang.datalog.ontologies_rewriter": [[32, 2, 1, "", "ExtractFreeVariablesRightImplicationWalker"], [32, 2, 1, "", "OntologyRewriter"]], "neurolang.datalog.ontologies_rewriter.ExtractFreeVariablesRightImplicationWalker": [[32, 3, 1, "", "extract_variables_s"], [32, 5, 1, "", "type"]], "neurolang.datalog.ontologies_rewriter.OntologyRewriter": [[32, 3, 1, "", "Xrewrite"], [32, 3, 1, "", "factorization_step"], [32, 3, 1, "", "rewriting_step"]], "neurolang.datalog.translate_to_named_ra": [[33, 2, 1, "", "TranslateToNamedRA"]], "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA": [[33, 3, 1, "", "classify_formulas_obtain_named_function_applications"], [33, 3, 1, "", "classify_formulas_obtain_names"], [33, 3, 1, "", "generate_ra_expression"], [33, 3, 1, "", "is_col_to_const_equality"], [33, 3, 1, "", "obtain_negative_columns"], [33, 3, 1, "", "process_destroy_formulas"], [33, 3, 1, "", "process_equality_formula"], [33, 3, 1, "", "process_equality_formulas"], [33, 3, 1, "", "process_equality_formulas_as_extended_projections"], [33, 3, 1, "", "process_equality_formulas_constant"], [33, 3, 1, "", "process_extended_projection_formulas"], [33, 3, 1, "", "process_negative_formulas"], [33, 3, 1, "", "process_positive_formulas"], [33, 3, 1, "", "process_selection_formulas"], [33, 3, 1, "", "translate_builtin_fa"], [33, 3, 1, "", "translate_builtin_fa_constants"], [33, 3, 1, "", "translate_conjunction"], [33, 3, 1, "", "translate_disjunction"], [33, 3, 1, "", "translate_eq"], [33, 3, 1, "", "translate_eq_c_c"], [33, 3, 1, "", "translate_eq_c_fa"], [33, 3, 1, "", "translate_eq_c_s"], [33, 3, 1, "", "translate_eq_fa_s"], [33, 3, 1, "", "translate_eq_s_c"], [33, 3, 1, "", "translate_existential_predicate"], [33, 3, 1, "", "translate_fa"], [33, 3, 1, "", "translate_negation"], [33, 5, 1, "", "type"]], "neurolang.datalog.wrapped_collections": [[34, 2, 1, "", "WrappedNamedRelationalAlgebraFrozenSet"], [34, 2, 1, "", "WrappedNamedRelationalAlgebraFrozenSetMixin"], [34, 2, 1, "", "WrappedRelationalAlgebraFrozenSet"], [34, 2, 1, "", "WrappedRelationalAlgebraFrozenSetMixin"], [34, 2, 1, "", "WrappedRelationalAlgebraSet"], [34, 2, 1, "", "WrappedRelationalAlgebraSetBaseMixin"], [34, 2, 1, "", "WrappedRelationalAlgebraSetMixin"], [34, 2, 1, "", "WrappedTypeMap"], [34, 1, 1, "", "named_tuple_as_dict"]], "neurolang.datalog.wrapped_collections.WrappedNamedRelationalAlgebraFrozenSet": [[34, 3, 1, "", "unwrap"]], "neurolang.datalog.wrapped_collections.WrappedNamedRelationalAlgebraFrozenSetMixin": [[34, 4, 1, "", "row_type"]], "neurolang.datalog.wrapped_collections.WrappedRelationalAlgebraFrozenSet": [[34, 3, 1, "", "unwrap"]], "neurolang.datalog.wrapped_collections.WrappedRelationalAlgebraSet": [[34, 3, 1, "", "unwrap"]], "neurolang.datalog.wrapped_collections.WrappedRelationalAlgebraSetBaseMixin": [[34, 3, 1, "", "is_constant_tuple_or_tuple_of_constants"], [34, 4, 1, "", "row_type"], [34, 3, 1, "", "unwrapped_iter"]], "neurolang.datalog.wrapped_collections.WrappedRelationalAlgebraSetMixin": [[34, 3, 1, "", "add"], [34, 3, 1, "", "discard"]], "neurolang.datalog.wrapped_collections.WrappedTypeMap": [[34, 3, 1, "", "backend_2_python"], [34, 5, 1, "", "row_maps"]], "neurolang.datalog_chase": [[35, 2, 1, "", "ChaseNode"], [35, 5, 1, "", "DatalogChase"], [35, 2, 1, "", "DatalogChaseGeneral"], [35, 5, 1, "", "DatalogChaseMGUMixin"], [35, 5, 1, "", "DatalogChaseRelationalAlgebraMixin"]], "neurolang.datalog_chase.ChaseNode": [[35, 5, 1, "", "children"], [35, 5, 1, "", "instance"]], "neurolang.frontend": [[40, 2, 1, "", "ExplicitVBR"], [40, 2, 1, "", "ExplicitVBROverlay"], [40, 2, 1, "", "NeurolangDL"], [40, 2, 1, "", "NeurolangPDL"], [40, 2, 1, "", "Symbol"], [41, 0, 0, "-", "ast"], [42, 0, 0, "-", "ast_lark"], [43, 0, 0, "-", "datalog"], [48, 0, 0, "-", "deterministic_frontend"], [49, 0, 0, "-", "drs"], [55, 0, 0, "-", "frontend_extensions"], [57, 0, 0, "-", "neurosynth_utils"], [58, 0, 0, "-", "probabilistic_frontend"], [59, 0, 0, "-", "query_resolution"], [60, 0, 0, "-", "query_resolution_datalog"], [61, 0, 0, "-", "query_resolution_expressions"]], "neurolang.frontend.ExplicitVBR": [[40, 4, 1, "", "aabb_tree"], [40, 4, 1, "", "bounding_box"], [40, 3, 1, "", "build_tree"], [40, 3, 1, "", "generate_bounding_box"], [40, 3, 1, "", "spatial_image"], [40, 3, 1, "", "to_ijk"], [40, 3, 1, "", "to_xyz"]], "neurolang.frontend.ExplicitVBROverlay": [[40, 3, 1, "", "spatial_image"]], "neurolang.frontend.NeurolangPDL": [[40, 3, 1, "", "add_probabilistic_choice_from_tuples"], [40, 3, 1, "", "add_probabilistic_facts_from_tuples"], [40, 3, 1, "", "add_uniform_probabilistic_choice_over_set"], [40, 4, 1, "", "current_program"], [40, 3, 1, "", "load_ontology"], [40, 3, 1, "", "solve_all"]], "neurolang.frontend.Symbol": [[40, 4, 1, "", "expression"], [40, 4, 1, "", "neurolang_symbol"], [40, 4, 1, "", "symbol"], [40, 4, 1, "", "value"]], "neurolang.frontend.ast": [[41, 2, 1, "", "ASTNode"], [41, 2, 1, "", "ASTWalker"]], "neurolang.frontend.ast.ASTWalker": [[41, 3, 1, "", "evaluate"]], "neurolang.frontend.ast_lark": [[42, 2, 1, "", "LarkASTConverter"]], "neurolang.frontend.datalog": [[44, 0, 0, "-", "standard_syntax"], [45, 0, 0, "-", "sugar"], [47, 0, 0, "-", "syntax_preprocessing"]], "neurolang.frontend.datalog.standard_syntax": [[44, 2, 1, "", "DatalogTransformer"], [44, 2, 1, "", "ExternalSymbol"], [44, 1, 1, "", "parse_rules"], [44, 1, 1, "", "parser"]], "neurolang.frontend.datalog.standard_syntax.DatalogTransformer": [[44, 3, 1, "", "argument"], [44, 3, 1, "", "arguments"], [44, 3, 1, "", "cmd_args"], [44, 3, 1, "", "cmd_identifier"], [44, 3, 1, "", "command"], [44, 3, 1, "", "comparison"], [44, 3, 1, "", "condition"], [44, 3, 1, "", "conjunction"], [44, 3, 1, "", "constant_predicate"], [44, 3, 1, "", "constraint"], [44, 3, 1, "", "div_term"], [44, 3, 1, "", "existential_predicate"], [44, 3, 1, "", "expressions"], [44, 3, 1, "", "ext_identifier"], [44, 3, 1, "", "fact"], [44, 3, 1, "", "factor"], [44, 3, 1, "", "head_predicate"], [44, 3, 1, "", "id_application"], [44, 3, 1, "", "identifier"], [44, 3, 1, "", "identifier_regexp"], [44, 3, 1, "", "keyword_args"], [44, 3, 1, "", "keyword_item"], [44, 3, 1, "", "lambda_application"], [44, 3, 1, "", "lambda_expression"], [44, 3, 1, "", "minus_op"], [44, 3, 1, "", "minus_signed_id"], [44, 3, 1, "", "mul_term"], [44, 3, 1, "", "neg_float"], [44, 3, 1, "", "neg_int"], [44, 3, 1, "", "negated_predicate"], [44, 3, 1, "", "plus_op"], [44, 3, 1, "", "pos_args"], [44, 3, 1, "", "pos_float"], [44, 3, 1, "", "pos_int"], [44, 3, 1, "", "pos_item"], [44, 3, 1, "", "pow_factor"], [44, 3, 1, "", "predicate"], [44, 3, 1, "", "probabilistic_fact"], [44, 3, 1, "", "probabilistic_rule"], [44, 3, 1, "", "query"], [44, 3, 1, "", "rule"], [44, 3, 1, "", "signed_int_ext_identifier"], [44, 3, 1, "", "sing_factor"], [44, 3, 1, "", "sing_op"], [44, 3, 1, "", "sing_term"], [44, 3, 1, "", "start"], [44, 3, 1, "", "statement"], [44, 3, 1, "", "statement_function"], [44, 3, 1, "", "term"], [44, 3, 1, "", "text"]], "neurolang.frontend.datalog.standard_syntax.ExternalSymbol": [[44, 5, 1, "", "type"]], "neurolang.frontend.datalog.sugar": [[45, 2, 1, "", "Column"], [45, 2, 1, "", "ConvertAttrSToSelectByColumn"], [45, 2, 1, "", "RecogniseSSugar"], [45, 2, 1, "", "SelectByFirstColumn"], [45, 2, 1, "", "TranslateColumnsToAtoms"], [45, 2, 1, "", "TranslateHeadConstantsToEqualities"], [45, 2, 1, "", "TranslateProbabilisticQueryMixin"], [45, 2, 1, "", "TranslateQueryBasedProbabilisticFactMixin"], [45, 2, 1, "", "TranslateSSugarToSelectByColumn"], [45, 2, 1, "", "TranslateSelectByFirstColumn"], [46, 0, 0, "-", "spatial"]], "neurolang.frontend.datalog.sugar.Column": [[45, 5, 1, "", "type"]], "neurolang.frontend.datalog.sugar.ConvertAttrSToSelectByColumn": [[45, 3, 1, "", "conversion"], [45, 5, 1, "", "type"]], "neurolang.frontend.datalog.sugar.RecogniseSSugar": [[45, 3, 1, "", "constant"], [45, 3, 1, "", "others"], [45, 3, 1, "", "s_sugar"], [45, 3, 1, "", "symbol"], [45, 5, 1, "", "type"]], "neurolang.frontend.datalog.sugar.SelectByFirstColumn": [[45, 5, 1, "", "type"]], "neurolang.frontend.datalog.sugar.TranslateColumnsToAtoms": [[45, 3, 1, "", "application_column_sugar"], [45, 3, 1, "", "conjunction_column_sugar"], [45, 3, 1, "", "implication_column_sugar"], [45, 5, 1, "", "type"]], "neurolang.frontend.datalog.sugar.TranslateHeadConstantsToEqualities": [[45, 3, 1, "", "head_constants_to_equalities"], [45, 5, 1, "", "type"]], "neurolang.frontend.datalog.sugar.TranslateProbabilisticQueryMixin": [[45, 3, 1, "", "conditional_query"], [45, 3, 1, "", "rewrite_conditional_query"], [45, 5, 1, "", "type"], [45, 3, 1, "", "within_language_prob_query"]], "neurolang.frontend.datalog.sugar.TranslateQueryBasedProbabilisticFactMixin": [[45, 3, 1, "", "query_based_probchoice_wannabe"], [45, 3, 1, "", "query_based_probfact_wannabe"], [45, 5, 1, "", "type"]], "neurolang.frontend.datalog.sugar.TranslateSSugarToSelectByColumn": [[45, 3, 1, "", "replace_s_getattr_by_first_column"], [45, 5, 1, "", "type"]], "neurolang.frontend.datalog.sugar.TranslateSelectByFirstColumn": [[45, 3, 1, "", "application_column_sugar"], [45, 3, 1, "", "conjunction_column_sugar"], [45, 3, 1, "", "implication_column_sugar"], [45, 3, 1, "", "implication_select_by_left_head"], [45, 5, 1, "", "type"]], "neurolang.frontend.datalog.sugar.spatial": [[46, 2, 1, "", "DetectEuclideanDistanceBoundMatrix"], [46, 2, 1, "", "TranslateEuclideanDistanceBoundMatrixMixin"]], "neurolang.frontend.datalog.sugar.spatial.DetectEuclideanDistanceBoundMatrix": [[46, 3, 1, "", "any_other_expression"], [46, 3, 1, "", "get_distance_upper_bound"], [46, 3, 1, "", "get_range_pred_for_coord"], [46, 3, 1, "", "get_var_to_euclidean_equality"], [46, 3, 1, "", "implication"], [46, 5, 1, "", "type"]], "neurolang.frontend.datalog.sugar.spatial.TranslateEuclideanDistanceBoundMatrixMixin": [[46, 3, 1, "", "euclidean_spatial_bound"], [46, 3, 1, "", "safe_range_pred_to_coord_set"], [46, 3, 1, "", "solve_spatial_bound"], [46, 5, 1, "", "type"], [46, 3, 1, "", "upper_bound_to_max_dist"]], "neurolang.frontend.datalog.syntax_preprocessing": [[47, 2, 1, "", "ProbFol2DatalogMixin"]], "neurolang.frontend.datalog.syntax_preprocessing.ProbFol2DatalogMixin": [[47, 3, 1, "", "translate_implication"], [47, 3, 1, "", "translate_marg_query"], [47, 5, 1, "", "type"]], "neurolang.frontend.deterministic_frontend": [[48, 2, 1, "", "ExplicitVBR"], [48, 2, 1, "", "ExplicitVBROverlay"], [48, 2, 1, "", "NeurolangDL"], [48, 2, 1, "", "Symbol"]], "neurolang.frontend.deterministic_frontend.ExplicitVBR": [[48, 4, 1, "", "aabb_tree"], [48, 4, 1, "", "bounding_box"], [48, 3, 1, "", "build_tree"], [48, 3, 1, "", "generate_bounding_box"], [48, 3, 1, "", "spatial_image"], [48, 3, 1, "", "to_ijk"], [48, 3, 1, "", "to_xyz"]], "neurolang.frontend.deterministic_frontend.ExplicitVBROverlay": [[48, 3, 1, "", "spatial_image"]], "neurolang.frontend.deterministic_frontend.Symbol": [[48, 4, 1, "", "expression"], [48, 4, 1, "", "neurolang_symbol"], [48, 4, 1, "", "symbol"], [48, 4, 1, "", "value"]], "neurolang.frontend.drs": [[50, 0, 0, "-", "chart_parser"], [51, 0, 0, "-", "drs_builder"], [52, 0, 0, "-", "english_grammar"], [53, 0, 0, "-", "exceptions"], [54, 0, 0, "-", "translate_to_dl"]], "neurolang.frontend.drs.chart_parser": [[50, 2, 1, "", "Chart"], [50, 2, 1, "", "ChartParser"], [50, 2, 1, "", "DictLexicon"], [50, 2, 1, "", "Grammar"], [50, 2, 1, "", "Lexicon"], [50, 2, 1, "", "RootRule"], [50, 2, 1, "", "Rule"], [50, 2, 1, "", "Tokenizer"]], "neurolang.frontend.drs.chart_parser.ChartParser": [[50, 2, 1, "", "Edge"], [50, 3, 1, "", "parse"], [50, 3, 1, "", "recognize"]], "neurolang.frontend.drs.chart_parser.ChartParser.Edge": [[50, 5, 1, "", "completed"], [50, 5, 1, "", "head"], [50, 5, 1, "", "remaining"], [50, 5, 1, "", "rule"], [50, 5, 1, "", "unification"], [50, 5, 1, "", "used_edges"]], "neurolang.frontend.drs.chart_parser.DictLexicon": [[50, 3, 1, "", "get_meanings"]], "neurolang.frontend.drs.chart_parser.Grammar": [[50, 5, 1, "", "type"]], "neurolang.frontend.drs.chart_parser.Lexicon": [[50, 3, 1, "", "get_meanings"]], "neurolang.frontend.drs.chart_parser.RootRule": [[50, 5, 1, "", "type"]], "neurolang.frontend.drs.chart_parser.Rule": [[50, 5, 1, "", "type"]], "neurolang.frontend.drs.chart_parser.Tokenizer": [[50, 3, 1, "", "next_token"], [50, 3, 1, "", "tokenize"], [50, 3, 1, "", "yield_comma"], [50, 3, 1, "", "yield_quote"], [50, 3, 1, "", "yield_word"]], "neurolang.frontend.drs.drs_builder": [[51, 2, 1, "", "DRS"], [51, 2, 1, "", "DRS2FOL"], [51, 2, 1, "", "DRSBuilder"], [51, 1, 1, "", "indent"]], "neurolang.frontend.drs.drs_builder.DRS": [[51, 5, 1, "", "type"]], "neurolang.frontend.drs.drs_builder.DRS2FOL": [[51, 3, 1, "", "drs"], [51, 3, 1, "", "implication"], [51, 5, 1, "", "type"], [51, 3, 1, "", "unary_conjunction"]], "neurolang.frontend.drs.drs_builder.DRSBuilder": [[51, 3, 1, "", "comma_and"], [51, 3, 1, "", "conditional"], [51, 3, 1, "", "float_drs"], [51, 3, 1, "", "implication"], [51, 3, 1, "", "indefinite_noun_phrase"], [51, 3, 1, "", "join_drs"], [51, 3, 1, "", "lit_noun_phrase"], [51, 3, 1, "", "predicate"], [51, 3, 1, "", "proper_names"], [51, 3, 1, "", "quoted_predicate"], [51, 3, 1, "", "sentence_list"], [51, 3, 1, "", "simple_and"], [51, 3, 1, "", "single_sentence_list"], [51, 5, 1, "", "type"], [51, 3, 1, "", "var_apposition"], [51, 3, 1, "", "var_noun_phrase"]], "neurolang.frontend.drs.english_grammar": [[52, 2, 1, "", "EnglishBaseLexicon"], [52, 2, 1, "", "case"], [52, 2, 1, "", "gen"], [52, 2, 1, "", "num"]], "neurolang.frontend.drs.english_grammar.EnglishBaseLexicon": [[52, 3, 1, "", "get_meanings"]], "neurolang.frontend.drs.english_grammar.case": [[52, 5, 1, "", "nom"], [52, 5, 1, "", "notnom"]], "neurolang.frontend.drs.english_grammar.gen": [[52, 5, 1, "", "female"], [52, 5, 1, "", "male"], [52, 5, 1, "", "thing"]], "neurolang.frontend.drs.english_grammar.num": [[52, 5, 1, "", "plural"], [52, 5, 1, "", "singular"]], "neurolang.frontend.drs.exceptions": [[53, 6, 1, "", "AmbiguousSentenceException"], [53, 6, 1, "", "CouldNotParseException"], [53, 6, 1, "", "GrammarException"], [53, 6, 1, "", "ParseDatalogPredicateException"], [53, 6, 1, "", "ParseException"], [53, 6, 1, "", "TokenizeException"], [53, 6, 1, "", "TranslateToDatalogException"]], "neurolang.frontend.drs.translate_to_dl": [[54, 2, 1, "", "TransformIntoConjunctionOfDatalogSentences"], [54, 2, 1, "", "TranslateToDatalog"]], "neurolang.frontend.drs.translate_to_dl.TransformIntoConjunctionOfDatalogSentences": [[54, 5, 1, "", "type"]], "neurolang.frontend.drs.translate_to_dl.TranslateToDatalog": [[54, 3, 1, "", "translate_block"], [54, 3, 1, "", "translate_logical_sentence"], [54, 3, 1, "", "translate_sentence"]], "neurolang.frontend.frontend_extensions": [[55, 2, 1, "", "NumpyFunctionsMixin"]], "neurolang.frontend.frontend_extensions.NumpyFunctionsMixin": [[55, 5, 1, "", "constant_cos"], [55, 5, 1, "", "constant_exp"], [55, 5, 1, "", "constant_log"], [55, 5, 1, "", "constant_log10"], [55, 5, 1, "", "constant_sin"], [55, 5, 1, "", "constant_tan"]], "neurolang.frontend.neurosynth_utils": [[57, 2, 1, "", "StudyID"], [57, 2, 1, "", "TfIDf"], [57, 1, 1, "", "fetch_feature_data"], [57, 1, 1, "", "fetch_neurosynth_peak_data"], [57, 1, 1, "", "fetch_study_metadata"], [57, 1, 1, "", "get_ns_mni_peaks_reported"], [57, 1, 1, "", "get_ns_term_study_associations"]], "neurolang.frontend.probabilistic_frontend": [[58, 2, 1, "", "NeurolangPDL"], [58, 2, 1, "", "RegionFrontendCPLogicSolver"]], "neurolang.frontend.probabilistic_frontend.NeurolangPDL": [[58, 3, 1, "", "add_probabilistic_choice_from_tuples"], [58, 3, 1, "", "add_probabilistic_facts_from_tuples"], [58, 3, 1, "", "add_uniform_probabilistic_choice_over_set"], [58, 4, 1, "", "current_program"], [58, 3, 1, "", "load_ontology"], [58, 3, 1, "", "solve_all"]], "neurolang.frontend.probabilistic_frontend.RegionFrontendCPLogicSolver": [[58, 3, 1, "", "function_anatomical_anterior_of"], [58, 3, 1, "", "function_anatomical_inferior_of"], [58, 3, 1, "", "function_anatomical_posterior_of"], [58, 3, 1, "", "function_anatomical_superior_of"], [58, 3, 1, "", "function_anterior_of"], [58, 3, 1, "", "function_inferior_of"], [58, 3, 1, "", "function_left_of"], [58, 3, 1, "", "function_overlapping"], [58, 3, 1, "", "function_posterior_of"], [58, 3, 1, "", "function_right_of"], [58, 3, 1, "", "function_superior_of"], [58, 5, 1, "", "protected_keywords"], [58, 5, 1, "", "type"]], "neurolang.frontend.query_resolution": [[59, 2, 1, "", "NeuroSynthMixin"], [59, 2, 1, "", "QueryBuilderBase"], [59, 2, 1, "", "QuerySymbolsProxy"], [59, 2, 1, "", "RegionMixin"]], "neurolang.frontend.query_resolution.NeuroSynthMixin": [[59, 3, 1, "", "load_neurosynth_mni_peaks_reported"], [59, 3, 1, "", "load_neurosynth_study_ids"], [59, 3, 1, "", "load_neurosynth_term_study_associations"]], "neurolang.frontend.query_resolution.QueryBuilderBase": [[59, 3, 1, "", "add_symbol"], [59, 3, 1, "", "add_tuple_set"], [59, 3, 1, "", "all"], [59, 3, 1, "", "del_symbol"], [59, 4, 1, "", "environment"], [59, 3, 1, "", "exists"], [59, 4, 1, "", "functions"], [59, 3, 1, "", "get_symbol"], [59, 3, 1, "", "new_symbol"], [59, 4, 1, "", "scope"], [59, 4, 1, "", "symbol_table"], [59, 4, 1, "", "symbols"], [59, 4, 1, "", "types"]], "neurolang.frontend.query_resolution.RegionMixin": [[59, 3, 1, "", "add_atlas_set"], [59, 3, 1, "", "add_region"], [59, 3, 1, "", "add_region_set"], [59, 3, 1, "", "create_region"], [59, 3, 1, "", "make_implicit_regions_explicit"], [59, 3, 1, "", "new_region_symbol"], [59, 4, 1, "", "region_names"], [59, 4, 1, "", "region_set_names"], [59, 3, 1, "", "sphere"]], "neurolang.frontend.query_resolution_datalog": [[60, 2, 1, "", "QueryBuilderDatalog"]], "neurolang.frontend.query_resolution_datalog.QueryBuilderDatalog": [[60, 3, 1, "", "add_constraint"], [60, 3, 1, "", "add_tuple_set"], [60, 3, 1, "", "compute_datalog_program_for_autocompletion"], [60, 4, 1, "", "current_program"], [60, 3, 1, "", "execute_datalog_program"], [60, 3, 1, "", "magic_sets_rewrite_program"], [60, 3, 1, "", "predicate_parameter_names"], [60, 3, 1, "", "query"], [60, 3, 1, "", "reset_program"], [60, 3, 1, "", "solve_all"]], "neurolang.frontend.query_resolution_expressions": [[61, 2, 1, "", "All"], [61, 2, 1, "", "Exists"], [61, 2, 1, "", "Expression"], [61, 2, 1, "", "Fact"], [61, 2, 1, "", "Implication"], [61, 2, 1, "", "Operation"], [61, 2, 1, "", "Query"], [61, 2, 1, "", "RightImplication"], [61, 2, 1, "", "Symbol"], [61, 2, 1, "", "TranslateExpressionToFrontEndExpression"], [61, 1, 1, "", "op_bind"], [61, 1, 1, "", "rop_bind"]], "neurolang.frontend.query_resolution_expressions.Expression": [[61, 3, 1, "", "do"], [61, 3, 1, "", "help"], [61, 4, 1, "", "type"]], "neurolang.frontend.query_resolution_expressions.Operation": [[61, 5, 1, "", "operator_repr"]], "neurolang.frontend.query_resolution_expressions.Symbol": [[61, 4, 1, "", "expression"], [61, 4, 1, "", "neurolang_symbol"], [61, 4, 1, "", "symbol"], [61, 4, 1, "", "value"]], "neurolang.frontend.query_resolution_expressions.TranslateExpressionToFrontEndExpression": [[61, 3, 1, "", "conjunction"], [61, 3, 1, "", "constant"], [61, 3, 1, "", "exists"], [61, 3, 1, "", "fact"], [61, 3, 1, "", "forall"], [61, 3, 1, "", "implication"], [61, 3, 1, "", "negation"], [61, 3, 1, "", "right_implication"], [61, 3, 1, "", "symbol"], [61, 5, 1, "", "type"], [61, 3, 1, "", "walk_function_application"]], "neurolang.interval_algebra": [[62, 1, 1, "", "before"], [62, 1, 1, "", "converse"], [62, 1, 1, "", "during"], [62, 1, 1, "", "equals"], [62, 1, 1, "", "finishes"], [62, 1, 1, "", "get_intervals_relations"], [62, 1, 1, "", "meets"], [62, 1, 1, "", "negate"], [62, 1, 1, "", "overlaps"], [62, 1, 1, "", "starts"], [62, 1, 1, "", "v_before"], [62, 1, 1, "", "v_during"], [62, 1, 1, "", "v_equals"], [62, 1, 1, "", "v_finishes"], [62, 1, 1, "", "v_meets"], [62, 1, 1, "", "v_overlaps"], [62, 1, 1, "", "v_starts"]], "neurolang.logic": [[64, 0, 0, "-", "expression_processing"], [65, 0, 0, "-", "horn_clauses"], [66, 0, 0, "-", "transformations"], [67, 0, 0, "-", "unification"]], "neurolang.logic.expression_processing": [[64, 2, 1, "", "ExtractFreeVariablesWalker"], [64, 2, 1, "", "ExtractLogicAtoms"], [64, 2, 1, "", "ExtractLogicPredicates"], [64, 2, 1, "", "HasExistentialPredicates"], [64, 2, 1, "", "LogicSolver"], [64, 2, 1, "", "TranslateToLogic"], [64, 2, 1, "", "WalkLogicProgramAggregatingSets"], [64, 1, 1, "", "extract_logic_atoms"], [64, 1, 1, "", "extract_logic_free_variables"], [64, 1, 1, "", "extract_logic_predicates"], [64, 1, 1, "", "has_existential_quantifiers"], [64, 1, 1, "", "is_logic_function_application"]], "neurolang.logic.expression_processing.ExtractFreeVariablesWalker": [[64, 3, 1, "", "extract_variables_fa"], [64, 3, 1, "", "extract_variables_q"], [64, 3, 1, "", "extract_variables_s"], [64, 3, 1, "", "extract_variables_symbol"], [64, 5, 1, "", "type"]], "neurolang.logic.expression_processing.ExtractLogicAtoms": [[64, 3, 1, "", "constant"], [64, 3, 1, "", "extract_predicates_fa"], [64, 3, 1, "", "symbol"], [64, 5, 1, "", "type"]], "neurolang.logic.expression_processing.ExtractLogicPredicates": [[64, 3, 1, "", "constant"], [64, 3, 1, "", "extract_predicates_fa"], [64, 3, 1, "", "negation"], [64, 3, 1, "", "symbol"], [64, 5, 1, "", "type"]], "neurolang.logic.expression_processing.HasExistentialPredicates": [[64, 3, 1, "", "existential_predicate"], [64, 3, 1, "", "nary"], [64, 3, 1, "", "operator"], [64, 5, 1, "", "type"], [64, 3, 1, "", "walk_function_application"]], "neurolang.logic.expression_processing.LogicSolver": [[64, 3, 1, "", "evaluate_conjunction"], [64, 3, 1, "", "evaluate_disjunction"], [64, 3, 1, "", "evaluate_implication"], [64, 3, 1, "", "evaluate_implication_false_antecedent"], [64, 3, 1, "", "evaluate_implication_false_consequent"], [64, 3, 1, "", "evaluate_implication_true_antecedent"], [64, 3, 1, "", "evaluate_implication_true_consequent"], [64, 3, 1, "", "evaluate_negation"], [64, 5, 1, "", "type"]], "neurolang.logic.expression_processing.TranslateToLogic": [[64, 3, 1, "", "build_conjunction"], [64, 3, 1, "", "build_disjunction"], [64, 3, 1, "", "build_negation"], [64, 3, 1, "", "translate_logic_operator"], [64, 5, 1, "", "type"]], "neurolang.logic.expression_processing.WalkLogicProgramAggregatingSets": [[64, 3, 1, "", "conjunction"], [64, 3, 1, "", "disjunction"], [64, 3, 1, "", "logic_operator"], [64, 3, 1, "", "negation"], [64, 3, 1, "", "quantifier"], [64, 5, 1, "", "type"], [64, 3, 1, "", "union"], [64, 3, 1, "", "walk_binary_logic_expression"], [64, 3, 1, "", "walk_nary"]], "neurolang.logic.horn_clauses": [[65, 2, 1, "", "ConvertSRNFToHornClause"], [65, 2, 1, "", "Fol2DatalogMixin"], [65, 6, 1, "", "Fol2DatalogTranslationException"], [65, 2, 1, "", "HornClause"], [65, 2, 1, "", "HornFact"], [65, 2, 1, "", "MoveNegationsToAtomsOrExistentialQuantifiers"], [65, 6, 1, "", "NeuroLangTranslateToHornClauseException"], [65, 2, 1, "", "RangeRestrictedVariables"], [65, 2, 1, "", "TranslateHornClausesToDatalog"], [65, 1, 1, "", "convert_srnf_to_horn_clauses"], [65, 1, 1, "", "convert_to_srnf"], [65, 1, 1, "", "fol_query_to_datalog_program"], [65, 1, 1, "", "is_safe_range"], [65, 1, 1, "", "range_restricted_variables"], [65, 1, 1, "", "translate_horn_clauses_to_datalog"]], "neurolang.logic.horn_clauses.ConvertSRNFToHornClause": [[65, 3, 1, "", "atom"], [65, 3, 1, "", "conjunction"], [65, 3, 1, "", "disjunction"], [65, 3, 1, "", "existential"], [65, 3, 1, "", "negated_atom"], [65, 3, 1, "", "negated_existential"], [65, 5, 1, "", "type"], [65, 3, 1, "", "unknown"]], "neurolang.logic.horn_clauses.Fol2DatalogMixin": [[65, 3, 1, "", "translate_implication"], [65, 5, 1, "", "type"]], "neurolang.logic.horn_clauses.HornClause": [[65, 5, 1, "", "type"]], "neurolang.logic.horn_clauses.HornFact": [[65, 5, 1, "", "type"]], "neurolang.logic.horn_clauses.MoveNegationsToAtomsOrExistentialQuantifiers": [[65, 3, 1, "", "negated_existential"], [65, 5, 1, "", "type"]], "neurolang.logic.horn_clauses.RangeRestrictedVariables": [[65, 3, 1, "", "conjunction"], [65, 3, 1, "", "disjunction"], [65, 3, 1, "", "existential"], [65, 3, 1, "", "function"], [65, 3, 1, "", "negation"], [65, 5, 1, "", "type"]], "neurolang.logic.horn_clauses.TranslateHornClausesToDatalog": [[65, 3, 1, "", "horn_fact"], [65, 3, 1, "", "horn_rule"], [65, 3, 1, "", "quantifier"], [65, 5, 1, "", "type"], [65, 3, 1, "", "union"]], "neurolang.logic.transformations": [[66, 2, 1, "", "CheckConjunctiveQueryWithNegation"], [66, 2, 1, "", "CollapseConjunctions"], [66, 2, 1, "", "CollapseConjunctionsMixin"], [66, 2, 1, "", "CollapseDisjunctions"], [66, 2, 1, "", "CollapseDisjunctionsMixin"], [66, 2, 1, "", "DesambiguateQuantifiedVariables"], [66, 2, 1, "", "DistributeConjunctions"], [66, 2, 1, "", "DistributeDisjunctions"], [66, 2, 1, "", "DistributeImplicationsWithConjunctiveHeads"], [66, 2, 1, "", "DistributeUniversalQuantifiers"], [66, 2, 1, "", "EliminateImplications"], [66, 2, 1, "", "ExtractBoundVariables"], [66, 2, 1, "", "ExtractConjunctiveQueryWithNegation"], [66, 2, 1, "", "ExtractFOLFreeVariables"], [66, 2, 1, "", "FONegELogicExpression"], [66, 2, 1, "", "FactorQuantifiersMixin"], [66, 2, 1, "", "FreshenVariablesWhenQuantified"], [66, 2, 1, "", "GuaranteeConjunction"], [66, 2, 1, "", "GuaranteeDisjunction"], [66, 2, 1, "", "LogicExpressionWalker"], [66, 2, 1, "", "MakeExistentialsImplicit"], [66, 2, 1, "", "MakeUniversalsImplicit"], [66, 2, 1, "", "MoveNegationsToAtoms"], [66, 2, 1, "", "MoveNegationsToAtomsInFONegE"], [66, 2, 1, "", "MoveNegationsToAtomsMixin"], [66, 2, 1, "", "MoveNegationsToAtomsSimpleOperationsMixin"], [66, 2, 1, "", "MoveQuantifiersUp"], [66, 2, 1, "", "MoveQuantifiersUpFONegE"], [66, 2, 1, "", "PullExistentialUpFromNegation"], [66, 2, 1, "", "PullUniversalUpFromNegation"], [66, 2, 1, "", "PushExistentialsDown"], [66, 2, 1, "", "PushExistentialsDownMixin"], [66, 2, 1, "", "PushQuantifiersDown"], [66, 2, 1, "", "PushUniversalsDown"], [66, 2, 1, "", "PushUniversalsDownMixin"], [66, 2, 1, "", "RemoveDuplicatedConjunctsDisjuncts"], [66, 2, 1, "", "RemoveExistentialOnVariables"], [66, 2, 1, "", "RemoveExistentialPredicates"], [66, 2, 1, "", "RemoveTrivialOperations"], [66, 2, 1, "", "RemoveTrivialOperationsMixin"], [66, 2, 1, "", "RemoveUniversalPredicates"], [66, 2, 1, "", "ReplaceFreeSymbolWalker"], [66, 2, 1, "", "UsedQuantifiers"], [66, 1, 1, "", "convert_to_pnf_with_cnf_matrix"], [66, 1, 1, "", "convert_to_pnf_with_dnf_matrix"], [66, 1, 1, "", "nary_op_has_duplicated_formulas"]], "neurolang.logic.transformations.CheckConjunctiveQueryWithNegation": [[66, 3, 1, "", "conjunction"], [66, 3, 1, "", "default"], [66, 3, 1, "", "existential_predicate"], [66, 3, 1, "", "f_app"], [66, 3, 1, "", "negation"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.CollapseConjunctions": [[66, 5, 1, "", "type"]], "neurolang.logic.transformations.CollapseConjunctionsMixin": [[66, 3, 1, "", "conjunction"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.CollapseDisjunctions": [[66, 5, 1, "", "type"]], "neurolang.logic.transformations.CollapseDisjunctionsMixin": [[66, 3, 1, "", "disjunction"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.DesambiguateQuantifiedVariables": [[66, 3, 1, "", "implication"], [66, 3, 1, "", "nary_logic_operator"], [66, 3, 1, "", "quantifier"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.DistributeConjunctions": [[66, 3, 1, "", "distribute"], [66, 3, 1, "", "rotate"], [66, 3, 1, "", "split"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.DistributeDisjunctions": [[66, 3, 1, "", "distribute"], [66, 3, 1, "", "rotate"], [66, 3, 1, "", "split"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.DistributeImplicationsWithConjunctiveHeads": [[66, 3, 1, "", "distribute_implication_with_conjunctive_head"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.DistributeUniversalQuantifiers": [[66, 3, 1, "", "distribute_universal_quantifier"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.EliminateImplications": [[66, 3, 1, "", "remove_implication"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.ExtractBoundVariables": [[66, 3, 1, "", "process_function_application"], [66, 3, 1, "", "process_symbol"], [66, 3, 1, "", "quantifier"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.ExtractConjunctiveQueryWithNegation": [[66, 3, 1, "", "conjunction"], [66, 3, 1, "", "existential_predicate"], [66, 3, 1, "", "f_app"], [66, 3, 1, "", "neg"], [66, 3, 1, "", "pure_conjunction"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.ExtractFOLFreeVariables": [[66, 3, 1, "", "extract_variables_s"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.FONegELogicExpression": [[66, 3, 1, "", "abort_implication"], [66, 3, 1, "", "abort_universal_predicate"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.FactorQuantifiersMixin": [[66, 3, 1, "", "conjunction_with_quantifiers"], [66, 3, 1, "", "disjunction_with_quantifiers"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.FreshenVariablesWhenQuantified": [[66, 3, 1, "", "replace_variable_in_quantifier"], [66, 5, 1, "", "type"], [66, 3, 1, "", "walk_through_implication"]], "neurolang.logic.transformations.GuaranteeConjunction": [[66, 3, 1, "", "guarantee_conjunction"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.GuaranteeDisjunction": [[66, 3, 1, "", "guarantee_conjunction"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.LogicExpressionWalker": [[66, 5, 1, "", "type"], [66, 3, 1, "", "walk_constant"], [66, 3, 1, "", "walk_function"], [66, 3, 1, "", "walk_implication"], [66, 3, 1, "", "walk_nary"], [66, 3, 1, "", "walk_negation"], [66, 3, 1, "", "walk_quantifier"], [66, 3, 1, "", "walk_symbol"]], "neurolang.logic.transformations.MakeExistentialsImplicit": [[66, 3, 1, "", "existential"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.MakeUniversalsImplicit": [[66, 5, 1, "", "type"], [66, 3, 1, "", "universal"]], "neurolang.logic.transformations.MoveNegationsToAtoms": [[66, 5, 1, "", "type"]], "neurolang.logic.transformations.MoveNegationsToAtomsInFONegE": [[66, 5, 1, "", "type"]], "neurolang.logic.transformations.MoveNegationsToAtomsMixin": [[66, 5, 1, "", "type"]], "neurolang.logic.transformations.MoveNegationsToAtomsSimpleOperationsMixin": [[66, 3, 1, "", "negated_conjunction"], [66, 3, 1, "", "negated_disjunction"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.MoveQuantifiersUp": [[66, 5, 1, "", "type"]], "neurolang.logic.transformations.MoveQuantifiersUpFONegE": [[66, 5, 1, "", "type"]], "neurolang.logic.transformations.PullExistentialUpFromNegation": [[66, 3, 1, "", "negated_existential"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.PullUniversalUpFromNegation": [[66, 3, 1, "", "negated_universal"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.PushExistentialsDown": [[66, 5, 1, "", "type"]], "neurolang.logic.transformations.PushExistentialsDownMixin": [[66, 3, 1, "", "dont_push_when_it_can_be_unsafe"], [66, 3, 1, "", "nested_existential"], [66, 3, 1, "", "push_eliminate_trivial_operation"], [66, 3, 1, "", "push_existential_down"], [66, 3, 1, "", "push_existential_down_disjunction"], [66, 3, 1, "", "remove_trivial_existential"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.PushQuantifiersDown": [[66, 5, 1, "", "type"]], "neurolang.logic.transformations.PushUniversalsDown": [[66, 5, 1, "", "type"]], "neurolang.logic.transformations.PushUniversalsDownMixin": [[66, 3, 1, "", "push_eliminate_trivial_operation"], [66, 3, 1, "", "push_universal_down_conjunction"], [66, 3, 1, "", "push_universal_down_disjunction"], [66, 3, 1, "", "remove_trivial_universal"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.RemoveDuplicatedConjunctsDisjuncts": [[66, 3, 1, "", "conjunction"], [66, 3, 1, "", "disjunction"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.RemoveExistentialOnVariables": [[66, 3, 1, "", "existential"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.RemoveExistentialPredicates": [[66, 3, 1, "", "existential_predicate"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.RemoveTrivialOperations": [[66, 5, 1, "", "type"]], "neurolang.logic.transformations.RemoveTrivialOperationsMixin": [[66, 3, 1, "", "remove_double_negation"], [66, 3, 1, "", "remove_single"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.RemoveUniversalPredicates": [[66, 5, 1, "", "type"], [66, 3, 1, "", "universal"]], "neurolang.logic.transformations.ReplaceFreeSymbolWalker": [[66, 3, 1, "", "stop_if_bound"], [66, 5, 1, "", "type"]], "neurolang.logic.transformations.UsedQuantifiers": [[66, 3, 1, "", "conjunction"], [66, 3, 1, "", "disjunction"], [66, 3, 1, "", "function"], [66, 3, 1, "", "implication"], [66, 3, 1, "", "negation"], [66, 3, 1, "", "quantifier"], [66, 3, 1, "", "symbol"], [66, 5, 1, "", "type"]], "neurolang.logic.unification": [[67, 1, 1, "", "apply_substitution"], [67, 1, 1, "", "apply_substitution_arguments"], [67, 1, 1, "", "compose_substitutions"], [67, 1, 1, "", "merge_substitutions"], [67, 1, 1, "", "most_general_unifier"], [67, 1, 1, "", "most_general_unifier_arguments"], [67, 1, 1, "", "most_general_unifier_extract_arguments"]], "neurolang.neurolang": [[68, 2, 1, "", "ExplicitVBR"], [68, 2, 1, "", "ExplicitVBROverlay"], [68, 2, 1, "", "NeurolangDL"], [68, 2, 1, "", "NeurolangPDL"]], "neurolang.neurolang.ExplicitVBR": [[68, 4, 1, "", "aabb_tree"], [68, 4, 1, "", "bounding_box"], [68, 3, 1, "", "build_tree"], [68, 3, 1, "", "generate_bounding_box"], [68, 3, 1, "", "spatial_image"], [68, 3, 1, "", "to_ijk"], [68, 3, 1, "", "to_xyz"]], "neurolang.neurolang.ExplicitVBROverlay": [[68, 3, 1, "", "spatial_image"]], "neurolang.neurolang.NeurolangPDL": [[68, 3, 1, "", "add_probabilistic_choice_from_tuples"], [68, 3, 1, "", "add_probabilistic_facts_from_tuples"], [68, 3, 1, "", "add_uniform_probabilistic_choice_over_set"], [68, 4, 1, "", "current_program"], [68, 3, 1, "", "load_ontology"], [68, 3, 1, "", "solve_all"]], "neurolang.neurolang_compiler": [[69, 2, 1, "", "NeuroLangIntermediateRepresentationCompiler"]], "neurolang.neurolang_compiler.NeuroLangIntermediateRepresentationCompiler": [[69, 3, 1, "", "compile"], [69, 3, 1, "", "pop_scope"], [69, 3, 1, "", "push_scope"], [69, 4, 1, "", "symbol_table"]], "neurolang.perior_tree": [[70, 2, 1, "", "Boundary"], [70, 2, 1, "", "BoundedAABB"], [70, 2, 1, "", "Node"], [70, 2, 1, "", "Tree"], [70, 1, 1, "", "methdispatch"]], "neurolang.perior_tree.Boundary": [[70, 3, 1, "", "adjust_direction"], [70, 3, 1, "", "adjust_position"]], "neurolang.perior_tree.BoundedAABB": [[70, 3, 1, "", "adjust_to_bound"], [70, 3, 1, "", "cardinal_tiles"], [70, 4, 1, "", "center"], [70, 3, 1, "", "contains"], [70, 3, 1, "", "contains_tuple"], [70, 3, 1, "", "direction_matrix"], [70, 3, 1, "", "expand"], [70, 3, 1, "", "expand_object"], [70, 3, 1, "", "expand_tuple"], [70, 3, 1, "", "intersects"], [70, 4, 1, "", "volume"], [70, 4, 1, "", "width"]], "neurolang.perior_tree.Node": [[70, 4, 1, "", "is_leaf"]], "neurolang.perior_tree.Tree": [[70, 3, 1, "", "add"], [70, 3, 1, "", "expand_region_box"], [70, 3, 1, "", "query_regions_axdir"], [70, 3, 1, "", "query_regions_contained_in_box"]], "neurolang.probabilistic": [[72, 0, 0, "-", "containment"], [73, 0, 0, "-", "cplogic"], [80, 0, 0, "-", "dalvi_suciu_lift"], [81, 0, 0, "-", "distributions"], [82, 0, 0, "-", "exceptions"], [83, 0, 0, "-", "expression_processing"], [84, 0, 0, "-", "expressions"], [85, 0, 0, "-", "magic_sets_processing"], [86, 0, 0, "-", "ppdl"], [87, 0, 0, "-", "probabilistic_ra_utils"], [88, 0, 0, "-", "probabilistic_semiring_solver"], [89, 0, 0, "-", "query_resolution"], [90, 0, 0, "-", "ranking"], [91, 0, 0, "-", "shattering"], [92, 0, 0, "-", "small_dichotomy_theorem_based_solver"], [93, 0, 0, "-", "stratification"], [94, 0, 0, "-", "transforms"], [95, 0, 0, "-", "weighted_model_counting"]], "neurolang.probabilistic.containment": [[72, 1, 1, "", "is_contained"], [72, 1, 1, "", "is_contained_rule"]], "neurolang.probabilistic.cplogic": [[73, 1, 1, "", "build_always_true_provenance_relation"], [74, 0, 0, "-", "cplogic_to_gm"], [73, 1, 1, "", "fresh_name_relation"], [76, 0, 0, "-", "grounding"], [78, 0, 0, "-", "program"], [73, 1, 1, "", "rename_columns_for_args_to_match"]], "neurolang.probabilistic.cplogic.cplogic_to_gm": [[74, 2, 1, "", "AndPlateNode"], [74, 2, 1, "", "BernoulliPlateNode"], [74, 2, 1, "", "CPLogicGroundingToGraphicalModelTranslator"], [74, 2, 1, "", "GraphicalModel"], [74, 2, 1, "", "NaryChoicePlateNode"], [74, 2, 1, "", "NaryChoiceResultPlateNode"], [74, 2, 1, "", "PlateNode"], [74, 2, 1, "", "ProbabilisticPlateNode"], [74, 1, 1, "", "is_extensional_grounding"]], "neurolang.probabilistic.cplogic.cplogic_to_gm.AndPlateNode": [[74, 5, 1, "", "type"]], "neurolang.probabilistic.cplogic.cplogic_to_gm.BernoulliPlateNode": [[74, 5, 1, "", "type"]], "neurolang.probabilistic.cplogic.cplogic_to_gm.CPLogicGroundingToGraphicalModelTranslator": [[74, 3, 1, "", "add_plate_node"], [74, 3, 1, "", "block_of_groundings"], [74, 3, 1, "", "extensional_set_grounding"], [74, 3, 1, "", "intensional_rule_grounding"], [74, 3, 1, "", "probabilistic_choice_grounding"], [74, 3, 1, "", "probfact_set_grounding"], [74, 5, 1, "", "type"]], "neurolang.probabilistic.cplogic.cplogic_to_gm.GraphicalModel": [[74, 3, 1, "", "get_node"], [74, 3, 1, "", "get_parent_node_symbols"], [74, 5, 1, "", "type"]], "neurolang.probabilistic.cplogic.cplogic_to_gm.NaryChoicePlateNode": [[74, 5, 1, "", "type"]], "neurolang.probabilistic.cplogic.cplogic_to_gm.NaryChoiceResultPlateNode": [[74, 5, 1, "", "type"]], "neurolang.probabilistic.cplogic.cplogic_to_gm.PlateNode": [[74, 5, 1, "", "type"]], "neurolang.probabilistic.cplogic.cplogic_to_gm.ProbabilisticPlateNode": [[74, 5, 1, "", "type"]], "neurolang.probabilistic.cplogic.grounding": [[76, 2, 1, "", "Chase"], [76, 2, 1, "", "Datalog"], [76, 1, 1, "", "build_extensional_grounding"], [76, 1, 1, "", "build_grounding"], [76, 1, 1, "", "build_pchoice_grounding"], [76, 1, 1, "", "build_pfact_grounding_from_set"], [76, 1, 1, "", "build_probabilistic_grounding"], [76, 1, 1, "", "build_rule_grounding"], [76, 1, 1, "", "cplogic_to_datalog"], [76, 1, 1, "", "get_grounding_dependencies"], [76, 1, 1, "", "get_grounding_pred_symb"], [76, 1, 1, "", "get_grounding_predicate"], [76, 1, 1, "", "ground_cplogic_program"], [76, 1, 1, "", "remove_probability_column"], [76, 1, 1, "", "topological_sort_groundings"], [76, 1, 1, "", "topological_sort_groundings_util"]], "neurolang.probabilistic.cplogic.grounding.Datalog": [[76, 5, 1, "", "protected_keywords"], [76, 5, 1, "", "type"]], "neurolang.probabilistic.cplogic.program": [[78, 2, 1, "", "CPLogicMixin"], [78, 2, 1, "", "CPLogicProgram"]], "neurolang.probabilistic.cplogic.program.CPLogicMixin": [[78, 3, 1, "", "add_probabilistic_choice_from_tuples"], [78, 3, 1, "", "add_probabilistic_facts_from_tuples"], [78, 3, 1, "", "extensional_database"], [78, 3, 1, "", "marg_implication"], [78, 5, 1, "", "pchoice_pred_symb_set_symb"], [78, 4, 1, "", "pchoice_pred_symbs"], [78, 5, 1, "", "pfact_pred_symb_set_symb"], [78, 4, 1, "", "pfact_pred_symbs"], [78, 4, 1, "", "predicate_symbols"], [78, 3, 1, "", "probabilistic_choices"], [78, 3, 1, "", "probabilistic_fact"], [78, 3, 1, "", "probabilistic_facts"], [78, 4, 1, "", "probabilistic_predicate_symbols"], [78, 5, 1, "", "protected_keywords"], [78, 3, 1, "", "query_based_probabilistic_choice"], [78, 3, 1, "", "query_based_probabilistic_fact"], [78, 3, 1, "", "query_based_probabilistic_predicate"], [78, 5, 1, "", "type"], [78, 3, 1, "", "union_with_probabilistic_facts"], [78, 3, 1, "", "within_language_marg_query"], [78, 3, 1, "", "within_language_prob_queries"], [78, 3, 1, "", "within_language_succ_query"]], "neurolang.probabilistic.cplogic.program.CPLogicProgram": [[78, 5, 1, "", "protected_keywords"], [78, 5, 1, "", "type"]], "neurolang.probabilistic.dalvi_suciu_lift": [[80, 1, 1, "", "dalvi_suciu_lift"], [80, 1, 1, "", "solve_marg_query"], [80, 1, 1, "", "solve_succ_query"]], "neurolang.probabilistic.distributions": [[81, 2, 1, "", "DiscreteDistribution"], [81, 2, 1, "", "Distribution"], [81, 2, 1, "", "TableDistribution"]], "neurolang.probabilistic.distributions.Distribution": [[81, 3, 1, "", "expectation"], [81, 3, 1, "", "probability"], [81, 4, 1, "", "support"]], "neurolang.probabilistic.distributions.TableDistribution": [[81, 3, 1, "", "conditioned_on"], [81, 3, 1, "", "expectation"], [81, 3, 1, "", "probability"], [81, 4, 1, "", "support"]], "neurolang.probabilistic.exceptions": [[82, 6, 1, "", "DistributionDoesNotSumToOneError"], [82, 6, 1, "", "ForbiddenConditionalQueryNoProb"], [82, 6, 1, "", "ForbiddenConditionalQueryNonConjunctive"], [82, 6, 1, "", "MalformedProbabilisticTupleError"], [82, 6, 1, "", "NotEasilyShatterableError"], [82, 6, 1, "", "NotHierarchicalQueryException"], [82, 6, 1, "", "RepeatedTuplesInProbabilisticRelationError"], [82, 6, 1, "", "UncomparableDistributionsError"], [82, 6, 1, "", "UnsupportedProbabilisticQueryError"]], "neurolang.probabilistic.expression_processing": [[83, 1, 1, "", "add_to_union"], [83, 1, 1, "", "build_probabilistic_fact_set"], [83, 1, 1, "", "check_probabilistic_choice_set_probabilities_sum_to_one"], [83, 1, 1, "", "const_or_symb_as_python_type"], [83, 1, 1, "", "construct_within_language_succ_result"], [83, 1, 1, "", "get_probchoice_variable_equalities"], [83, 1, 1, "", "get_within_language_prob_query_prob_term"], [83, 1, 1, "", "group_preds_by_functor"], [83, 1, 1, "", "group_probabilistic_facts_by_pred_symb"], [83, 1, 1, "", "is_builtin"], [83, 1, 1, "", "is_probabilistic_fact"], [83, 1, 1, "", "is_probabilistic_predicate_symbol"], [83, 1, 1, "", "is_query_based_probpredicate"], [83, 1, 1, "", "is_within_language_prob_query"], [83, 1, 1, "", "lift_optimization_for_choice_predicates"], [83, 1, 1, "", "separate_deterministic_probabilistic_code"], [83, 1, 1, "", "union_contains_probabilistic_facts"], [83, 1, 1, "", "within_language_succ_query_to_intensional_rule"]], "neurolang.probabilistic.expressions": [[84, 2, 1, "", "Condition"], [84, 2, 1, "", "Grounding"], [84, 2, 1, "", "ProbabilisticBinaryLogicOperator"], [84, 2, 1, "", "ProbabilisticChoice"], [84, 2, 1, "", "ProbabilisticChoiceGrounding"], [84, 2, 1, "", "ProbabilisticFact"], [84, 2, 1, "", "ProbabilisticPredicate"], [84, 2, 1, "", "ProbabilisticQuery"]], "neurolang.probabilistic.expressions.Condition": [[84, 5, 1, "", "type"]], "neurolang.probabilistic.expressions.Grounding": [[84, 5, 1, "", "type"]], "neurolang.probabilistic.expressions.ProbabilisticBinaryLogicOperator": [[84, 5, 1, "", "type"]], "neurolang.probabilistic.expressions.ProbabilisticChoice": [[84, 5, 1, "", "type"]], "neurolang.probabilistic.expressions.ProbabilisticChoiceGrounding": [[84, 5, 1, "", "type"]], "neurolang.probabilistic.expressions.ProbabilisticFact": [[84, 5, 1, "", "type"]], "neurolang.probabilistic.expressions.ProbabilisticPredicate": [[84, 4, 1, "", "args"], [84, 4, 1, "", "functor"], [84, 5, 1, "", "type"]], "neurolang.probabilistic.expressions.ProbabilisticQuery": [[84, 5, 1, "", "type"]], "neurolang.probabilistic.magic_sets_processing": [[85, 2, 1, "", "ReplaceWLQWalker"], [85, 1, 1, "", "probabilistic_postprocess_magic_rules"], [85, 1, 1, "", "update_rules_with_new_prob_expressions"]], "neurolang.probabilistic.magic_sets_processing.ReplaceWLQWalker": [[85, 3, 1, "", "implication"], [85, 3, 1, "", "replace_probabilistic_predicate"], [85, 3, 1, "", "replace_probabilistic_queries"], [85, 5, 1, "", "type"]], "neurolang.probabilistic.ppdl": [[86, 2, 1, "", "PPDL"], [86, 2, 1, "", "PPDLDeltaSymbol"], [86, 2, 1, "", "PPDLDeltaTerm"], [86, 2, 1, "", "PPDLMixin"], [86, 1, 1, "", "get_dterm"], [86, 1, 1, "", "get_dterm_index"], [86, 1, 1, "", "is_ppdl_rule"]], "neurolang.probabilistic.ppdl.PPDL": [[86, 5, 1, "", "protected_keywords"], [86, 5, 1, "", "type"]], "neurolang.probabilistic.ppdl.PPDLDeltaSymbol": [[86, 5, 1, "", "type"]], "neurolang.probabilistic.ppdl.PPDLDeltaTerm": [[86, 5, 1, "", "type"]], "neurolang.probabilistic.ppdl.PPDLMixin": [[86, 3, 1, "", "ppdl_rule"], [86, 5, 1, "", "type"]], "neurolang.probabilistic.probabilistic_ra_utils": [[87, 2, 1, "", "DeterministicFactSet"], [87, 2, 1, "", "GetProbabilisticSetAtom"], [87, 2, 1, "", "NonLiftable"], [87, 2, 1, "", "ProbabilisticChoiceSet"], [87, 2, 1, "", "ProbabilisticFactSet"], [87, 1, 1, "", "classify_and_wrap_symbols"], [87, 1, 1, "", "generate_probabilistic_symbol_table_for_query"], [87, 1, 1, "", "is_atom_a_deterministic_relation"], [87, 1, 1, "", "is_atom_a_probabilistic_choice_relation"], [87, 1, 1, "", "is_atom_a_probabilistic_fact_relation"]], "neurolang.probabilistic.probabilistic_ra_utils.DeterministicFactSet": [[87, 5, 1, "", "type"]], "neurolang.probabilistic.probabilistic_ra_utils.GetProbabilisticSetAtom": [[87, 3, 1, "", "default"], [87, 3, 1, "", "projection"], [87, 3, 1, "", "resolve_symbol"], [87, 5, 1, "", "type"]], "neurolang.probabilistic.probabilistic_ra_utils.NonLiftable": [[87, 5, 1, "", "type"]], "neurolang.probabilistic.probabilistic_ra_utils.ProbabilisticChoiceSet": [[87, 5, 1, "", "type"]], "neurolang.probabilistic.probabilistic_ra_utils.ProbabilisticFactSet": [[87, 5, 1, "", "type"]], "neurolang.probabilistic.probabilistic_semiring_solver": [[88, 2, 1, "", "ProbSemiringSolver"], [88, 2, 1, "", "ProbSemiringSolverMixin"], [88, 2, 1, "", "ProbSemiringToRelationalAlgebraSolver"]], "neurolang.probabilistic.probabilistic_semiring_solver.ProbSemiringSolver": [[88, 5, 1, "", "type"]], "neurolang.probabilistic.probabilistic_semiring_solver.ProbSemiringSolverMixin": [[88, 3, 1, "", "deterministic_fact_set"], [88, 3, 1, "", "deterministic_fact_set_general"], [88, 3, 1, "", "eliminate_superfluous_projection"], [88, 3, 1, "", "empty_deterministic_fact_set"], [88, 3, 1, "", "probabilistic_choice_set"], [88, 3, 1, "", "probabilistic_choice_set_to_symbol"], [88, 3, 1, "", "probabilistic_fact_set"], [88, 3, 1, "", "probabilistic_fact_set_invalid"], [88, 3, 1, "", "push_projection_in_deterministic"], [88, 5, 1, "", "type"]], "neurolang.probabilistic.probabilistic_semiring_solver.ProbSemiringToRelationalAlgebraSolver": [[88, 5, 1, "", "type"]], "neurolang.probabilistic.query_resolution": [[89, 2, 1, "", "AddNeededProjections"], [89, 2, 1, "", "FilterZeroProbability"], [89, 2, 1, "", "FloatArithmeticSimplifier"], [89, 2, 1, "", "QueryBasedProbFactToDetRule"], [89, 2, 1, "", "RAQueryOptimiser"], [89, 1, 1, "", "compute_probabilistic_solution"], [89, 1, 1, "", "compute_projections_needed_to_reintroduce_head_terms"], [89, 1, 1, "", "generate_provenance_query_solver"], [89, 1, 1, "", "lift_solve_marg_query"]], "neurolang.probabilistic.query_resolution.AddNeededProjections": [[89, 3, 1, "", "add_projection"], [89, 5, 1, "", "type"]], "neurolang.probabilistic.query_resolution.FilterZeroProbability": [[89, 3, 1, "", "add_zero_filter"], [89, 5, 1, "", "type"]], "neurolang.probabilistic.query_resolution.FloatArithmeticSimplifier": [[89, 3, 1, "", "simplify_mul_left"], [89, 3, 1, "", "simplify_mul_right"], [89, 5, 1, "", "type"]], "neurolang.probabilistic.query_resolution.QueryBasedProbFactToDetRule": [[89, 3, 1, "", "query_based_probafact"], [89, 5, 1, "", "type"], [89, 3, 1, "", "union_with_query_based_pfact"]], "neurolang.probabilistic.query_resolution.RAQueryOptimiser": [[89, 5, 1, "", "type"]], "neurolang.probabilistic.ranking": [[90, 1, 1, "", "partially_rank_query"], [90, 1, 1, "", "verify_that_the_query_is_ranked"]], "neurolang.probabilistic.shattering": [[91, 2, 1, "", "NormalizeNotEquals"], [91, 2, 1, "", "RelationalAlgebraSelectionConjunction"], [91, 2, 1, "", "ShatterEqualities"], [91, 1, 1, "", "atom_to_constant_to_RA_conditions"], [91, 1, 1, "", "conditions_per_symbol"], [91, 1, 1, "", "sets_per_symbol"], [91, 1, 1, "", "shatter_constants"]], "neurolang.probabilistic.shattering.NormalizeNotEquals": [[91, 3, 1, "", "flip_ne_arguments"], [91, 5, 1, "", "type"]], "neurolang.probabilistic.shattering.RelationalAlgebraSelectionConjunction": [[91, 3, 1, "", "selection_conjunction"], [91, 5, 1, "", "type"]], "neurolang.probabilistic.shattering.ShatterEqualities": [[91, 3, 1, "", "shatter_inequalities"], [91, 3, 1, "", "shatter_symbol"], [91, 5, 1, "", "type"]], "neurolang.probabilistic.small_dichotomy_theorem_based_solver": [[92, 1, 1, "", "extract_atom_sets_and_detect_self_joins"], [92, 1, 1, "", "is_hierarchical_without_self_joins"], [92, 1, 1, "", "solve_marg_query"], [92, 1, 1, "", "solve_succ_query"]], "neurolang.probabilistic.stratification": [[93, 1, 1, "", "get_list_of_intensional_rules"], [93, 1, 1, "", "reachable_code_from_query"], [93, 1, 1, "", "stratify_program"]], "neurolang.probabilistic.transforms": [[94, 1, 1, "", "add_existentials_except"], [94, 1, 1, "", "convert_rule_to_ucq"], [94, 1, 1, "", "convert_to_cnf_existential_ucq"], [94, 1, 1, "", "convert_to_dnf_existential_ucq"], [94, 1, 1, "", "minimise_formulas_containment"], [94, 1, 1, "", "minimize_component_conjunction"], [94, 1, 1, "", "minimize_component_disjunction"], [94, 1, 1, "", "minimize_ucq_in_cnf"], [94, 1, 1, "", "minimize_ucq_in_dnf"], [94, 1, 1, "", "split_positive_negative_formulas"], [94, 1, 1, "", "unify_existential_variables"]], "neurolang.probabilistic.weighted_model_counting": [[95, 2, 1, "", "DeterministicFactSetTranslation"], [95, 2, 1, "", "EliminateSuperfluousProjectionMixin"], [95, 2, 1, "", "RAQueryOptimiser"], [95, 2, 1, "", "SDDWMCSemiRingSolver"], [95, 2, 1, "", "SemiRingRAPToSDD"], [95, 2, 1, "", "WMCSemiRingSolver"], [95, 1, 1, "", "build_global_sdd_model_rows"], [95, 1, 1, "", "generate_probability_table"], [95, 1, 1, "", "generate_weights"], [95, 1, 1, "", "model_count_and_per_row_probability"], [95, 1, 1, "", "perform_wmc"], [95, 1, 1, "", "prepare_initial_query"], [95, 1, 1, "", "sdd_compilation"], [95, 1, 1, "", "sdd_compilation_and_wmc"], [95, 1, 1, "", "sdd_solver_global_model"], [95, 1, 1, "", "sdd_solver_per_individual_row"], [95, 1, 1, "", "solve_marg_query"], [95, 1, 1, "", "solve_succ_query"], [95, 1, 1, "", "solve_succ_query_boolean_diagram"], [95, 1, 1, "", "solve_succ_query_sdd_direct"]], "neurolang.probabilistic.weighted_model_counting.DeterministicFactSetTranslation": [[95, 3, 1, "", "deterministic_fact_set_constant"], [95, 5, 1, "", "type"]], "neurolang.probabilistic.weighted_model_counting.EliminateSuperfluousProjectionMixin": [[95, 3, 1, "", "eliminate_superfluous_projection"], [95, 5, 1, "", "type"]], "neurolang.probabilistic.weighted_model_counting.RAQueryOptimiser": [[95, 5, 1, "", "type"]], "neurolang.probabilistic.weighted_model_counting.SDDWMCSemiRingSolver": [[95, 3, 1, "", "deterministic_fact_set"], [95, 3, 1, "", "generate_sdd_expression"], [95, 3, 1, "", "get_new_bernoulli_variable"], [95, 3, 1, "", "probabilistic_choice_set"], [95, 3, 1, "", "probabilistic_fact_set"], [95, 3, 1, "", "probabilistic_fact_set_invalid"], [95, 5, 1, "", "type"], [95, 3, 1, "", "wmc_weights"]], "neurolang.probabilistic.weighted_model_counting.SemiRingRAPToSDD": [[95, 3, 1, "", "add"], [95, 3, 1, "", "eq"], [95, 3, 1, "", "expression_block"], [95, 3, 1, "", "mul"], [95, 3, 1, "", "neg"], [95, 3, 1, "", "or_"], [95, 3, 1, "", "symbol"], [95, 5, 1, "", "type"]], "neurolang.probabilistic.weighted_model_counting.WMCSemiRingSolver": [[95, 3, 1, "", "deterministic_fact_set"], [95, 3, 1, "", "probabilistic_choice_set"], [95, 3, 1, "", "probabilistic_fact_set"], [95, 3, 1, "", "probabilistic_fact_set_invalid"], [95, 5, 1, "", "type"]], "neurolang.region_solver": [[96, 2, 1, "", "RegionSolver"]], "neurolang.region_solver.RegionSolver": [[96, 3, 1, "", "function_regexp"], [96, 3, 1, "", "function_region_union"], [96, 5, 1, "", "type"], [96, 5, 1, "", "type_name"]], "neurolang.regions": [[97, 2, 1, "", "ExplicitVBR"], [97, 2, 1, "", "ExplicitVBROverlay"], [97, 2, 1, "", "ImplicitVBR"], [97, 2, 1, "", "PlanarVolume"], [97, 2, 1, "", "PointSet"], [97, 2, 1, "", "Region"], [97, 2, 1, "", "SphericalVolume"], [97, 2, 1, "", "VolumetricBrainRegion"], [97, 1, 1, "", "region_difference"], [97, 1, 1, "", "region_intersection"], [97, 1, 1, "", "region_set_from_masked_data"], [97, 1, 1, "", "region_union"], [97, 1, 1, "", "take_principal_regions"]], "neurolang.regions.ExplicitVBR": [[97, 4, 1, "", "aabb_tree"], [97, 4, 1, "", "bounding_box"], [97, 3, 1, "", "build_tree"], [97, 3, 1, "", "generate_bounding_box"], [97, 3, 1, "", "spatial_image"], [97, 3, 1, "", "to_ijk"], [97, 3, 1, "", "to_xyz"]], "neurolang.regions.ExplicitVBROverlay": [[97, 3, 1, "", "spatial_image"]], "neurolang.regions.ImplicitVBR": [[97, 3, 1, "", "to_ijk"], [97, 3, 1, "", "to_xyz"]], "neurolang.regions.PlanarVolume": [[97, 4, 1, "", "bounding_box"], [97, 3, 1, "", "project_point_to_plane"], [97, 3, 1, "", "to_ijk"]], "neurolang.regions.PointSet": [[97, 4, 1, "", "aabb_tree"], [97, 4, 1, "", "bounding_box"], [97, 3, 1, "", "build_tree"], [97, 3, 1, "", "generate_bounding_box"], [97, 3, 1, "", "spatial_image"], [97, 3, 1, "", "to_ijk"], [97, 3, 1, "", "to_xyz"]], "neurolang.regions.Region": [[97, 4, 1, "", "bounding_box"], [97, 4, 1, "", "center"], [97, 3, 1, "", "from_spatial_image_label"], [97, 4, 1, "", "width"]], "neurolang.regions.SphericalVolume": [[97, 4, 1, "", "bounding_box"], [97, 4, 1, "", "center"], [97, 4, 1, "", "radius"], [97, 3, 1, "", "to_ijk"]], "neurolang.regions.VolumetricBrainRegion": [[97, 3, 1, "", "remove_empty_bounding_boxes"], [97, 3, 1, "", "to_explicit_vbr"], [97, 3, 1, "", "to_ijk"], [97, 3, 1, "", "to_ijk_set"], [97, 3, 1, "", "to_xyz"], [97, 3, 1, "", "to_xyz_set"]], "neurolang.relational_algebra": [[99, 0, 0, "-", "optimisers"], [100, 0, 0, "-", "relational_algebra"]], "neurolang.relational_algebra.optimisers": [[99, 2, 1, "", "CommuteJoinsAvoidCrossProducts"], [99, 2, 1, "", "EliminateTrivialProjections"], [99, 2, 1, "", "ProductSimplification"], [99, 2, 1, "", "PushInSelections"], [99, 2, 1, "", "PushUnnamedSelectionsUp"], [99, 2, 1, "", "RelationalAlgebraOptimiser"], [99, 2, 1, "", "RenameOptimizations"], [99, 2, 1, "", "RewriteSelections"], [99, 2, 1, "", "SimplifyExtendedProjectionsWithConstants"]], "neurolang.relational_algebra.optimisers.CommuteJoinsAvoidCrossProducts": [[99, 3, 1, "", "commute_left"], [99, 3, 1, "", "commute_right"], [99, 5, 1, "", "type"]], "neurolang.relational_algebra.optimisers.EliminateTrivialProjections": [[99, 3, 1, "", "convert_extended_projection_2_projection"], [99, 3, 1, "", "convert_extended_projection_2_rename"], [99, 3, 1, "", "eliminate_trivial_nested_projection"], [99, 3, 1, "", "eliminate_trivial_nested_unnamed_projection"], [99, 3, 1, "", "eliminate_trivial_projection"], [99, 3, 1, "", "simplify_projection_extended_projection"], [99, 5, 1, "", "type"]], "neurolang.relational_algebra.optimisers.ProductSimplification": [[99, 3, 1, "", "single_product"], [99, 5, 1, "", "type"]], "neurolang.relational_algebra.optimisers.PushInSelections": [[99, 3, 1, "", "push_and_rename_in_naturaljoin"], [99, 3, 1, "", "push_selection_in_extended_projection"], [99, 3, 1, "", "push_selection_in_groupby"], [99, 3, 1, "", "push_selection_in_left"], [99, 3, 1, "", "push_selection_in_leftnaturaljoin_left"], [99, 3, 1, "", "push_selection_in_leftnaturaljoin_right"], [99, 3, 1, "", "push_selection_in_outernaturaljoin_left"], [99, 3, 1, "", "push_selection_in_outernaturaljoin_right"], [99, 3, 1, "", "push_selection_in_projection"], [99, 3, 1, "", "push_selection_in_replace_null"], [99, 3, 1, "", "push_selection_in_right"], [99, 5, 1, "", "type"]], "neurolang.relational_algebra.optimisers.PushUnnamedSelectionsUp": [[99, 3, 1, "", "invert_selection_order"], [99, 3, 1, "", "push_selection_above_name_columns"], [99, 3, 1, "", "push_selection_above_projection"], [99, 3, 1, "", "standardize_projected_column"], [99, 5, 1, "", "type"]], "neurolang.relational_algebra.optimisers.RelationalAlgebraOptimiser": [[99, 5, 1, "", "type"]], "neurolang.relational_algebra.optimisers.RenameOptimizations": [[99, 3, 1, "", "convert_rename_column"], [99, 3, 1, "", "eliminate_trivial_number_columns"], [99, 3, 1, "", "eliminate_trivial_projection_number_columns"], [99, 3, 1, "", "eliminate_trivial_selection_number_columns"], [99, 3, 1, "", "merge_nested_rename_columns"], [99, 3, 1, "", "merge_rename_column_group_by"], [99, 3, 1, "", "merge_rename_columns_extended_projection"], [99, 3, 1, "", "push_rename_past_groupby"], [99, 3, 1, "", "push_rename_past_projection"], [99, 3, 1, "", "push_rename_past_selection"], [99, 3, 1, "", "remove_trivial_rename"], [99, 3, 1, "", "simplify_renames_name"], [99, 3, 1, "", "split_rename_left_naturaljoin"], [99, 3, 1, "", "split_rename_naturaljoin"], [99, 3, 1, "", "split_rename_outer_naturaljoin"], [99, 3, 1, "", "switch_rename_replace_null"], [99, 5, 1, "", "type"]], "neurolang.relational_algebra.optimisers.RewriteSelections": [[99, 3, 1, "", "get_arity"], [99, 3, 1, "", "merge_selections"], [99, 3, 1, "", "selection_between_columns_product"], [99, 3, 1, "", "selection_by_constant_on_product"], [99, 3, 1, "", "selection_on_equijoin"], [99, 3, 1, "", "selection_on_equijoin_columns"], [99, 3, 1, "", "selection_push_right"], [99, 3, 1, "", "selection_selection_swap"], [99, 3, 1, "", "selection_shorten_right"], [99, 3, 1, "", "sort_formula_args"], [99, 3, 1, "", "split_relations_column"], [99, 3, 1, "", "swap_formula_args"], [99, 5, 1, "", "type"]], "neurolang.relational_algebra.optimisers.SimplifyExtendedProjectionsWithConstants": [[99, 3, 1, "", "nested_extended_projection_constant"], [99, 3, 1, "", "nested_extended_projection_leftnaturaljoin_constant"], [99, 3, 1, "", "nested_extended_projection_leftnaturaljoin_constantr"], [99, 3, 1, "", "nested_extended_projection_naturaljoin_constant_l"], [99, 3, 1, "", "nested_extended_projection_naturaljoin_constantr"], [99, 3, 1, "", "nested_extended_projection_outernaturaljoin_constant"], [99, 3, 1, "", "nested_extended_projection_outernaturaljoin_constantr"], [99, 3, 1, "", "push_computed_columns_up"], [99, 3, 1, "", "push_computed_columns_up_flip"], [99, 3, 1, "", "push_computed_columns_up_left"], [99, 3, 1, "", "push_computed_columns_up_outer"], [99, 3, 1, "", "push_replace_null_in_ext_proj"], [99, 3, 1, "", "replace_trivial_agg_groupby"], [99, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra": [[100, 2, 1, "", "BinaryRelationalAlgebraOperation"], [100, 2, 1, "", "Column"], [100, 2, 1, "", "ColumnInt"], [100, 2, 1, "", "ColumnStr"], [100, 2, 1, "", "ConcatenateConstantColumn"], [100, 2, 1, "", "Destroy"], [100, 2, 1, "", "Difference"], [100, 2, 1, "", "EquiJoin"], [100, 2, 1, "", "ExtendedProjection"], [100, 2, 1, "", "FullOuterNaturalJoin"], [100, 2, 1, "", "FunctionApplicationListMember"], [100, 2, 1, "", "GroupByAggregation"], [100, 2, 1, "", "Intersection"], [100, 2, 1, "", "LeftNaturalJoin"], [100, 2, 1, "", "NAryRelationalAlgebraOperation"], [100, 2, 1, "", "NameColumns"], [100, 2, 1, "", "NaturalJoin"], [100, 2, 1, "", "NumberColumns"], [100, 2, 1, "", "Product"], [100, 2, 1, "", "Projection"], [100, 2, 1, "", "RelationalAlgebraOperation"], [100, 2, 1, "", "RelationalAlgebraSolver"], [100, 2, 1, "", "RenameColumn"], [100, 2, 1, "", "RenameColumns"], [100, 2, 1, "", "ReplaceConstantColumnStrBySymbol"], [100, 2, 1, "", "ReplaceNull"], [100, 2, 1, "", "Selection"], [100, 2, 1, "", "StringArithmeticWalker"], [100, 2, 1, "", "UnaryRelationalAlgebraOperation"], [100, 2, 1, "", "Union"], [100, 1, 1, "", "get_expression_columns"], [100, 1, 1, "", "int2columnint_constant"], [100, 1, 1, "", "is_arithmetic_operation"], [100, 1, 1, "", "is_translatable_operation"], [100, 1, 1, "", "str2columnstr_constant"]], "neurolang.relational_algebra.relational_algebra.BinaryRelationalAlgebraOperation": [[100, 3, 1, "", "columns"], [100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.ConcatenateConstantColumn": [[100, 3, 1, "", "columns"], [100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.Destroy": [[100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.Difference": [[100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.EquiJoin": [[100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.ExtendedProjection": [[100, 3, 1, "", "columns"], [100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.FullOuterNaturalJoin": [[100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.FunctionApplicationListMember": [[100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.GroupByAggregation": [[100, 3, 1, "", "columns"], [100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.Intersection": [[100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.LeftNaturalJoin": [[100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.NAryRelationalAlgebraOperation": [[100, 3, 1, "", "columns"], [100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.NameColumns": [[100, 3, 1, "", "columns"], [100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.NaturalJoin": [[100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.NumberColumns": [[100, 3, 1, "", "columns"], [100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.Product": [[100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.Projection": [[100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.RelationalAlgebraOperation": [[100, 3, 1, "", "columns"], [100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver": [[100, 3, 1, "", "aggregate"], [100, 3, 1, "", "arithmetic_string_expression"], [100, 3, 1, "", "concatenate_constant_column"], [100, 3, 1, "", "extended_projection"], [100, 3, 1, "", "prov_arithmetic_operation"], [100, 3, 1, "", "ra_constant"], [100, 3, 1, "", "ra_difference"], [100, 3, 1, "", "ra_equijoin"], [100, 3, 1, "", "ra_full_outer_naturaljoin"], [100, 3, 1, "", "ra_intersection"], [100, 3, 1, "", "ra_left_naturaljoin"], [100, 3, 1, "", "ra_name_columns"], [100, 3, 1, "", "ra_naturaljoin"], [100, 3, 1, "", "ra_number_columns"], [100, 3, 1, "", "ra_product"], [100, 3, 1, "", "ra_projection"], [100, 3, 1, "", "ra_rename_column"], [100, 3, 1, "", "ra_rename_columns"], [100, 3, 1, "", "ra_symbol"], [100, 3, 1, "", "ra_union"], [100, 3, 1, "", "replace_null"], [100, 3, 1, "", "selection_between_columns"], [100, 3, 1, "", "selection_by_constant"], [100, 3, 1, "", "selection_general_selection_by_constant"], [100, 3, 1, "", "set_destroy"], [100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.RenameColumn": [[100, 3, 1, "", "columns"], [100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.RenameColumns": [[100, 3, 1, "", "columns"], [100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.ReplaceConstantColumnStrBySymbol": [[100, 3, 1, "", "column_int"], [100, 3, 1, "", "column_str"], [100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.ReplaceNull": [[100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.Selection": [[100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.StringArithmeticWalker": [[100, 3, 1, "", "arithmetic_operation"], [100, 3, 1, "", "negative_value"], [100, 3, 1, "", "operation_sum"], [100, 3, 1, "", "process_constant_column_int"], [100, 3, 1, "", "process_constant_column_str"], [100, 3, 1, "", "process_constant_float"], [100, 3, 1, "", "process_constant_int"], [100, 3, 1, "", "process_constant_str"], [100, 3, 1, "", "translatable_numpy_operation"], [100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.UnaryRelationalAlgebraOperation": [[100, 3, 1, "", "columns"], [100, 5, 1, "", "type"]], "neurolang.relational_algebra.relational_algebra.Union": [[100, 5, 1, "", "type"]], "neurolang.solver": [[102, 2, 1, "", "BooleanOperationsSolver"], [102, 2, 1, "", "BooleanRewriteSolver"], [102, 2, 1, "", "FirstOrderLogicSolver"], [102, 2, 1, "", "GenericSolver"], [102, 6, 1, "", "NeuroLangPredicateException"], [102, 2, 1, "", "NumericOperationsSolver"]], "neurolang.solver.BooleanOperationsSolver": [[102, 3, 1, "", "rewrite_boolean_and"], [102, 3, 1, "", "rewrite_boolean_and_l"], [102, 3, 1, "", "rewrite_boolean_and_r"], [102, 3, 1, "", "rewrite_boolean_inversion"], [102, 3, 1, "", "rewrite_boolean_or"], [102, 3, 1, "", "rewrite_boolean_or_l"], [102, 3, 1, "", "rewrite_boolean_or_r"], [102, 5, 1, "", "type"]], "neurolang.solver.BooleanRewriteSolver": [[102, 3, 1, "", "bring_constants_up_left"], [102, 3, 1, "", "cast_binary"], [102, 3, 1, "", "cast_unary"], [102, 3, 1, "", "conjunction_composition_dual"], [102, 3, 1, "", "conjunction_definition_dual"], [102, 3, 1, "", "conjunction_distribution"], [102, 3, 1, "", "dual_operator"], [102, 3, 1, "", "neg_disj_to_conj"], [102, 3, 1, "", "partial_binary_evaluation"], [102, 3, 1, "", "simplify_double_inversion"], [102, 5, 1, "", "type"]], "neurolang.solver.FirstOrderLogicSolver": [[102, 3, 1, "", "existential_predicate"], [102, 3, 1, "", "new_set"], [102, 3, 1, "", "quantifier_head_symbols_and_adom"], [102, 3, 1, "", "query_resolution"], [102, 5, 1, "", "type"], [102, 3, 1, "", "universal_predicate"]], "neurolang.solver.GenericSolver": [[102, 4, 1, "", "plural_type_name"], [102, 3, 1, "", "set_symbol_table"], [102, 5, 1, "", "type"]], "neurolang.solver.NumericOperationsSolver": [[102, 3, 1, "", "cast_binary"], [102, 3, 1, "", "cast_unary"], [102, 5, 1, "", "type"]], "neurolang.type_system": [[103, 6, 1, "", "NeuroLangTypeException"], [103, 2, 1, "", "Unknown"], [103, 1, 1, "", "get_args"], [103, 1, 1, "", "get_generic_type"], [103, 1, 1, "", "infer_type"], [103, 1, 1, "", "infer_type_builtins"], [103, 1, 1, "", "infer_type_iterables"], [103, 1, 1, "", "infer_type_mapping"], [103, 1, 1, "", "is_consistent"], [103, 1, 1, "", "is_leq_informative"], [103, 1, 1, "", "is_leq_informative_parameterized_right"], [103, 1, 1, "", "is_leq_informative_union"], [103, 1, 1, "", "is_parameterized"], [103, 1, 1, "", "is_parametrical"], [103, 1, 1, "", "is_type"], [103, 1, 1, "", "replace_type_variable"], [103, 1, 1, "", "replace_type_variable_fix_python36_37"], [103, 1, 1, "", "typing_callable_from_annotated_function"], [103, 1, 1, "", "unify_types"]], "neurolang.typed_symbol_table": [[104, 2, 1, "", "TypedSymbolTable"]], "neurolang.typed_symbol_table.TypedSymbolTable": [[104, 3, 1, "", "create_scope"], [104, 3, 1, "", "set_readonly"], [104, 3, 1, "", "symbols_by_type"], [104, 3, 1, "", "types"]], "neurolang.utils": [[105, 2, 1, "", "NamedRelationalAlgebraFrozenSet"], [105, 2, 1, "", "OrderedSet"], [105, 2, 1, "", "RelationalAlgebraFrozenSet"], [105, 2, 1, "", "RelationalAlgebraSet"], [105, 2, 1, "", "RelationalAlgebraStringExpression"], [106, 0, 0, "-", "data_manipulation"], [107, 0, 0, "-", "interactive_parsing"], [105, 1, 1, "", "log_performance"], [108, 0, 0, "-", "orderedset"], [105, 1, 1, "", "powerset"], [109, 0, 0, "-", "relational_algebra_set"], [114, 0, 0, "-", "server"], [119, 0, 0, "-", "testing"], [121, 0, 0, "-", "various"]], "neurolang.utils.NamedRelationalAlgebraFrozenSet": [[105, 3, 1, "", "aggregate"], [105, 4, 1, "", "arity"], [105, 4, 1, "", "columns"], [105, 3, 1, "", "create_view_from"], [105, 3, 1, "", "cross_product"], [105, 3, 1, "", "dee"], [105, 3, 1, "", "dum"], [105, 3, 1, "", "equijoin"], [105, 3, 1, "", "explode"], [105, 3, 1, "", "extended_projection"], [105, 3, 1, "", "fetch_one"], [105, 3, 1, "", "groupby"], [105, 3, 1, "", "left_naturaljoin"], [105, 3, 1, "", "naturaljoin"], [105, 3, 1, "", "projection"], [105, 3, 1, "", "projection_to_unnamed"], [105, 3, 1, "", "rename_column"], [105, 3, 1, "", "rename_columns"], [105, 3, 1, "", "replace_null"], [105, 3, 1, "", "to_unnamed"]], "neurolang.utils.OrderedSet": [[105, 3, 1, "", "add"], [105, 3, 1, "", "copy"], [105, 3, 1, "", "discard"], [105, 3, 1, "", "index"], [105, 3, 1, "", "issubset"], [105, 3, 1, "", "issuperset"], [105, 3, 1, "", "replace"]], "neurolang.utils.RelationalAlgebraFrozenSet": [[105, 4, 1, "", "arity"], [105, 3, 1, "", "as_numpy_array"], [105, 3, 1, "", "as_pandas_dataframe"], [105, 4, 1, "", "columns"], [105, 3, 1, "", "copy"], [105, 3, 1, "", "create_view_from"], [105, 3, 1, "", "cross_product"], [105, 3, 1, "", "dee"], [105, 3, 1, "", "dum"], [105, 3, 1, "", "equijoin"], [105, 3, 1, "", "fetch_one"], [105, 3, 1, "", "groupby"], [105, 3, 1, "", "is_empty"], [105, 3, 1, "", "itervalues"], [105, 4, 1, "", "might_have_duplicates"], [105, 3, 1, "", "projection"], [105, 3, 1, "", "selection"], [105, 3, 1, "", "selection_columns"]], "neurolang.utils.RelationalAlgebraSet": [[105, 3, 1, "", "add"], [105, 3, 1, "", "discard"]], "neurolang.utils.data_manipulation": [[106, 1, 1, "", "parse_region_label_map"]], "neurolang.utils.interactive_parsing": [[107, 2, 1, "", "CompleteResult"], [107, 2, 1, "", "LarkCompleter"]], "neurolang.utils.interactive_parsing.CompleteResult": [[107, 5, 1, "", "pos"], [107, 5, 1, "", "prefix"], [107, 3, 1, "", "to_dictionary"], [107, 5, 1, "", "token_options"]], "neurolang.utils.interactive_parsing.LarkCompleter": [[107, 3, 1, "", "complete"], [107, 3, 1, "", "compute_options_no_error"], [107, 3, 1, "", "compute_options_unexpected_char"]], "neurolang.utils.orderedset": [[108, 2, 1, "", "OrderedSet"]], "neurolang.utils.orderedset.OrderedSet": [[108, 3, 1, "", "add"], [108, 3, 1, "", "copy"], [108, 3, 1, "", "discard"], [108, 3, 1, "", "index"], [108, 3, 1, "", "issubset"], [108, 3, 1, "", "issuperset"], [108, 3, 1, "", "replace"]], "neurolang.utils.relational_algebra_set": [[109, 2, 1, "", "NamedRelationalAlgebraFrozenSet"], [109, 2, 1, "", "RelationalAlgebraColumnInt"], [109, 2, 1, "", "RelationalAlgebraColumnStr"], [109, 2, 1, "", "RelationalAlgebraFrozenSet"], [109, 2, 1, "", "RelationalAlgebraSet"], [109, 2, 1, "", "RelationalAlgebraStringExpression"], [110, 0, 0, "-", "abstract"], [113, 0, 0, "-", "pandas"]], "neurolang.utils.relational_algebra_set.NamedRelationalAlgebraFrozenSet": [[109, 3, 1, "", "aggregate"], [109, 4, 1, "", "arity"], [109, 4, 1, "", "columns"], [109, 3, 1, "", "create_view_from"], [109, 3, 1, "", "cross_product"], [109, 3, 1, "", "dee"], [109, 3, 1, "", "dum"], [109, 3, 1, "", "equijoin"], [109, 3, 1, "", "explode"], [109, 3, 1, "", "extended_projection"], [109, 3, 1, "", "fetch_one"], [109, 3, 1, "", "groupby"], [109, 3, 1, "", "left_naturaljoin"], [109, 3, 1, "", "naturaljoin"], [109, 3, 1, "", "projection"], [109, 3, 1, "", "projection_to_unnamed"], [109, 3, 1, "", "rename_column"], [109, 3, 1, "", "rename_columns"], [109, 3, 1, "", "replace_null"], [109, 3, 1, "", "to_unnamed"]], "neurolang.utils.relational_algebra_set.RelationalAlgebraFrozenSet": [[109, 4, 1, "", "arity"], [109, 3, 1, "", "as_numpy_array"], [109, 3, 1, "", "as_pandas_dataframe"], [109, 4, 1, "", "columns"], [109, 3, 1, "", "copy"], [109, 3, 1, "", "create_view_from"], [109, 3, 1, "", "cross_product"], [109, 3, 1, "", "dee"], [109, 3, 1, "", "dum"], [109, 3, 1, "", "equijoin"], [109, 3, 1, "", "fetch_one"], [109, 3, 1, "", "groupby"], [109, 3, 1, "", "is_empty"], [109, 3, 1, "", "itervalues"], [109, 4, 1, "", "might_have_duplicates"], [109, 3, 1, "", "projection"], [109, 3, 1, "", "selection"], [109, 3, 1, "", "selection_columns"]], "neurolang.utils.relational_algebra_set.RelationalAlgebraSet": [[109, 3, 1, "", "add"], [109, 3, 1, "", "discard"]], "neurolang.utils.relational_algebra_set.abstract": [[110, 2, 1, "", "NamedRelationalAlgebraFrozenSet"], [110, 2, 1, "", "RelationalAlgebraColumn"], [110, 2, 1, "", "RelationalAlgebraColumnInt"], [110, 2, 1, "", "RelationalAlgebraColumnStr"], [110, 2, 1, "", "RelationalAlgebraFrozenSet"], [110, 2, 1, "", "RelationalAlgebraSet"]], "neurolang.utils.relational_algebra_set.abstract.NamedRelationalAlgebraFrozenSet": [[110, 3, 1, "", "aggregate"], [110, 4, 1, "", "arity"], [110, 4, 1, "", "columns"], [110, 3, 1, "", "cross_product"], [110, 3, 1, "", "dee"], [110, 3, 1, "", "dum"], [110, 3, 1, "", "equijoin"], [110, 3, 1, "", "explode"], [110, 3, 1, "", "extended_projection"], [110, 3, 1, "", "fetch_one"], [110, 3, 1, "", "groupby"], [110, 3, 1, "", "left_naturaljoin"], [110, 3, 1, "", "naturaljoin"], [110, 3, 1, "", "projection"], [110, 3, 1, "", "projection_to_unnamed"], [110, 3, 1, "", "rename_column"], [110, 3, 1, "", "rename_columns"], [110, 3, 1, "", "replace_null"], [110, 3, 1, "", "to_unnamed"]], "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraFrozenSet": [[110, 4, 1, "", "arity"], [110, 3, 1, "", "as_numpy_array"], [110, 4, 1, "", "columns"], [110, 3, 1, "", "copy"], [110, 3, 1, "", "create_view_from"], [110, 3, 1, "", "cross_product"], [110, 3, 1, "", "dee"], [110, 3, 1, "", "dum"], [110, 3, 1, "", "equijoin"], [110, 3, 1, "", "fetch_one"], [110, 3, 1, "", "groupby"], [110, 3, 1, "", "is_dee"], [110, 3, 1, "", "is_dum"], [110, 3, 1, "", "is_empty"], [110, 3, 1, "", "itervalues"], [110, 3, 1, "", "projection"], [110, 3, 1, "", "selection"], [110, 3, 1, "", "selection_columns"]], "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraSet": [[110, 3, 1, "", "add"], [110, 3, 1, "", "discard"]], "neurolang.utils.relational_algebra_set.pandas": [[113, 2, 1, "", "NamedRelationalAlgebraFrozenSet"], [113, 2, 1, "", "RelationalAlgebraFrozenSet"], [113, 2, 1, "", "RelationalAlgebraSet"], [113, 2, 1, "", "RelationalAlgebraStringExpression"]], "neurolang.utils.relational_algebra_set.pandas.NamedRelationalAlgebraFrozenSet": [[113, 3, 1, "", "aggregate"], [113, 4, 1, "", "arity"], [113, 4, 1, "", "columns"], [113, 3, 1, "", "create_view_from"], [113, 3, 1, "", "cross_product"], [113, 3, 1, "", "dee"], [113, 3, 1, "", "dum"], [113, 3, 1, "", "equijoin"], [113, 3, 1, "", "explode"], [113, 3, 1, "", "extended_projection"], [113, 3, 1, "", "fetch_one"], [113, 3, 1, "", "groupby"], [113, 3, 1, "", "left_naturaljoin"], [113, 3, 1, "", "naturaljoin"], [113, 3, 1, "", "projection"], [113, 3, 1, "", "projection_to_unnamed"], [113, 3, 1, "", "rename_column"], [113, 3, 1, "", "rename_columns"], [113, 3, 1, "", "replace_null"], [113, 3, 1, "", "to_unnamed"]], "neurolang.utils.relational_algebra_set.pandas.RelationalAlgebraFrozenSet": [[113, 4, 1, "", "arity"], [113, 3, 1, "", "as_numpy_array"], [113, 3, 1, "", "as_pandas_dataframe"], [113, 4, 1, "", "columns"], [113, 3, 1, "", "copy"], [113, 3, 1, "", "create_view_from"], [113, 3, 1, "", "cross_product"], [113, 3, 1, "", "dee"], [113, 3, 1, "", "dum"], [113, 3, 1, "", "equijoin"], [113, 3, 1, "", "fetch_one"], [113, 3, 1, "", "groupby"], [113, 3, 1, "", "is_empty"], [113, 3, 1, "", "itervalues"], [113, 4, 1, "", "might_have_duplicates"], [113, 3, 1, "", "projection"], [113, 3, 1, "", "selection"], [113, 3, 1, "", "selection_columns"]], "neurolang.utils.relational_algebra_set.pandas.RelationalAlgebraSet": [[113, 3, 1, "", "add"], [113, 3, 1, "", "discard"]], "neurolang.utils.server": [[116, 0, 0, "-", "engines"], [117, 0, 0, "-", "queries"], [118, 0, 0, "-", "responses"]], "neurolang.utils.server.engines": [[116, 2, 1, "", "DestrieuxEngineConf"], [116, 2, 1, "", "NeurolangEngineConfiguration"], [116, 2, 1, "", "NeurolangEngineSet"], [116, 2, 1, "", "NeurosynthEngineConf"], [116, 1, 1, "", "add_ploting_functions"], [116, 1, 1, "", "init_frontend"], [116, 1, 1, "", "load_destrieux_atlas"], [116, 1, 1, "", "load_neurosynth_data"]], "neurolang.utils.server.engines.DestrieuxEngineConf": [[116, 4, 1, "", "atlas"], [116, 3, 1, "", "create"], [116, 4, 1, "", "key"]], "neurolang.utils.server.engines.NeurolangEngineConfiguration": [[116, 4, 1, "", "atlas"], [116, 3, 1, "", "create"], [116, 4, 1, "", "key"]], "neurolang.utils.server.engines.NeurolangEngineSet": [[116, 3, 1, "", "add_engine"], [116, 3, 1, "", "engine"]], "neurolang.utils.server.engines.NeurosynthEngineConf": [[116, 4, 1, "", "atlas"], [116, 4, 1, "", "brain_mask"], [116, 3, 1, "", "create"], [116, 4, 1, "", "key"]], "neurolang.utils.server.queries": [[117, 2, 1, "", "LRUCacheDict"], [117, 2, 1, "", "NeurolangQueryManager"]], "neurolang.utils.server.queries.NeurolangQueryManager": [[117, 3, 1, "", "cancel"], [117, 3, 1, "", "get_atlas"], [117, 3, 1, "", "get_result"], [117, 3, 1, "", "get_symbols"], [117, 3, 1, "", "submit_query"]], "neurolang.utils.server.responses": [[118, 2, 1, "", "CustomQueryResultsEncoder"], [118, 2, 1, "", "QueryResults"], [118, 1, 1, "", "base64_encode_nifti"], [118, 1, 1, "", "base64_encode_spatial"], [118, 1, 1, "", "calculate_image_center"], [118, 1, 1, "", "serializeVBR"], [118, 1, 1, "", "serialize_mplt_thumbnails"]], "neurolang.utils.server.responses.CustomQueryResultsEncoder": [[118, 3, 1, "", "default"]], "neurolang.utils.server.responses.QueryResults": [[118, 3, 1, "", "get_function_metadata"], [118, 3, 1, "", "get_result_item"], [118, 3, 1, "", "get_result_item_columns"], [118, 3, 1, "", "get_result_item_values"], [118, 3, 1, "", "set_error_details"], [118, 3, 1, "", "set_results_details"]], "neurolang.utils.testing": [[120, 0, 0, "-", "logic"]], "neurolang.utils.testing.logic": [[120, 1, 1, "", "logic_exp_commutative_equal"]], "neurolang.utils.various": [[121, 1, 1, "", "log_performance"], [121, 1, 1, "", "powerset"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:attribute", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"user": 0, "guid": 0, "end": 0, "frontend": [0, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "intermedi": [0, 4], "represent": [0, 4], "infrastructur": 0, "languag": [0, 2], "indic": 0, "tabl": 0, "peopl": 1, "fund": 1, "cite": 1, "neurolang": [1, 2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126], "exampl": [2, 3, 4, 6], "environ": 2, "where": 3, "spatial": [3, 46], "prior": 3, "i": 3, "defin": 3, "base": [3, 4, 6, 59], "distanc": 3, "between": 3, "voxel": 3, "foci": 3, "coordin": 3, "meta": 3, "analysi": 3, "databas": 3, "datalog": [4, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 43, 44, 45, 46, 47, 60, 126], "destrieux": [4, 5], "atla": [4, 5], "load": [4, 5], "from": 4, "nilearn": 4, "fact": 4, "list": 4, "set": 4, "interpret": 4, "region": [4, 59, 97], "manag": 4, "builtin": [4, 126], "ad": [4, 126], "lh": 4, "lr": 4, "construct": 4, "queri": [4, 5, 6, 59, 60, 61, 117], "run": 4, "et": 5, "al": 5, "left": 5, "hemispher": 5, "implement": 6, "neurosynth": [6, 59], "data": 6, "prepar": 6, "probabilist": [6, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], "logic": [6, 63, 64, 65, 66, 67, 120, 125, 126], "program": [6, 78, 125], "comput": [7, 124], "time": [7, 124], "packag": [9, 15, 19, 40, 43, 45, 49, 73, 103, 105, 109, 114, 119], "subpackag": [9, 15, 40, 43, 45, 49, 73, 103, 105, 114, 119], "submodul": [9, 19, 40, 43, 45, 49, 73, 105, 109, 114, 119], "cd_relat": 10, "modul": [10, 13, 14, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 41, 42, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 102, 104, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121], "neurolangdl": 11, "neurolangpdl": 12, "aabb_tre": 13, "command": [14, 123], "config": 15, "aggreg": [17, 125, 126], "basic_represent": 18, "chase": [19, 20, 21, 22, 23], "gener": 20, "mgu": 21, "negat": [22, 30], "relational_algebra": [23, 98, 99, 100], "constraints_represent": 24, "except": [25, 36, 53, 82], "expression_process": [26, 64, 83], "express": [27, 39, 61, 84], "instanc": 28, "magic_set": 29, "ontologies_pars": 31, "ontologies_rewrit": 32, "translate_to_named_ra": 33, "wrapped_collect": 34, "datalog_chas": 35, "expression_pattern_match": 37, "expression_walk": 38, "ast": 41, "ast_lark": 42, "standard_syntax": 44, "sugar": [45, 46], "syntax_preprocess": 47, "deterministic_frontend": 48, "dr": [49, 50, 51, 52, 53, 54], "chart_pars": 50, "drs_builder": 51, "english_grammar": 52, "translate_to_dl": 54, "frontend_extens": 55, "neurosynth_util": 57, "probabilistic_frontend": 58, "query_resolut": [59, 89], "builder": [59, 60], "mixin": 59, "query_resolution_datalog": 60, "query_resolution_express": 61, "resolut": 61, "interval_algebra": 62, "horn_claus": 65, "transform": [66, 94], "unif": 67, "neurolang_compil": 69, "perior_tre": 70, "contain": 72, "cplogic": [73, 74, 75, 76, 77, 78, 79], "cplogic_to_gm": 74, "gm_provenance_solv": 75, "ground": 76, "problog_solv": 77, "test": [79, 119, 120], "dalvi_suciu_lift": 80, "distribut": 81, "magic_sets_process": 85, "ppdl": 86, "probabilistic_ra_util": 87, "probabilistic_semiring_solv": 88, "rank": 90, "shatter": 91, "small_dichotomy_theorem_based_solv": 92, "return": 92, "stratif": 93, "weighted_model_count": 95, "region_solv": 96, "optimis": 99, "relational_algebra_proven": 101, "solver": 102, "type_system": 103, "typed_symbol_t": 104, "util": [105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "data_manipul": 106, "interactive_pars": 107, "orderedset": 108, "relational_algebra_set": [109, 110, 111, 112, 113], "abstract": 110, "dask_help": 111, "dask_sql": 112, "panda": 113, "server": [114, 115, 116, 117, 118], "app": 115, "engin": 116, "respons": 118, "variou": 121, "welcom": 122, "": 122, "document": 122, "instal": 123, "window": 123, "first": [123, 125], "download": 123, "64": 123, "bit": 123, "anaconda": 123, "second": 123, "open": [123, 126], "prompt": 123, "third": 123, "ipython": 123, "mac": 123, "termin": 123, "linux": 123, "depend": 123, "To": 123, "develop": 123, "version": 123, "altern": 123, "backend": 123, "get": 125, "start": 125, "step": 125, "With": 125, "disjunct": 125, "programm": 126, "us": 126, "embed": 126, "python": 126, "includ": 126, "function": 126, "constraint": 126, "knowledg": 126, "rule": 126}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"User Guide": [[0, "user-guide"]], "End-User Frontend": [[0, "end-user-frontend"]], "Intermediate Representation Infrastructure": [[0, "intermediate-representation-infrastructure"]], "Intermediate Language Representations": [[0, "intermediate-language-representations"]], "Indices and tables": [[0, "indices-and-tables"]], "People": [[1, "people"]], "Funding": [[1, "funding"]], "Citing Neurolang": [[1, "citing-neurolang"]], "Examples of the NeuroLang language environment.": [[2, "examples-of-the-neurolang-language-environment"]], "Example where a spatial prior is defined based on the distance between voxels and foci in a coordinate-based meta-analysis database": [[3, "example-where-a-spatial-prior-is-defined-based-on-the-distance-between-voxels-and-foci-in-a-coordinate-based-meta-analysis-database"]], "Datalog Intermediate Representation Example based on the Destrieux Atlas": [[4, "datalog-intermediate-representation-example-based-on-the-destrieux-atlas"]], "Load the Destrieux example from nilearn as a fact list": [[4, "load-the-destrieux-example-from-nilearn-as-a-fact-list"]], "Set the datalog interpreter with Region-managing builtins and adding lh, lr": [[4, "set-the-datalog-interpreter-with-region-managing-builtins-and-adding-lh-lr"]], "Construct a query": [[4, "construct-a-query"]], "Interpreting and running the query": [[4, "interpreting-and-running-the-query"]], "Loading and Querying the Destrieux et al. Atlas\u2019 Left Hemisphere": [[5, "loading-and-querying-the-destrieux-et-al-atlas-left-hemisphere"]], "NeuroLang Example based Implementing a NeuroSynth Query": [[6, "neurolang-example-based-implementing-a-neurosynth-query"]], "Data preparation": [[6, "data-preparation"]], "Probabilistic Logic Programming in NeuroLang": [[6, "probabilistic-logic-programming-in-neurolang"]], "Computation times": [[7, "computation-times"], [124, "computation-times"]], "neurolang": [[8, "neurolang"]], "neurolang package": [[9, "module-neurolang"]], "Subpackages": [[9, "subpackages"], [15, "subpackages"], [40, "subpackages"], [43, "subpackages"], [45, "subpackages"], [49, "subpackages"], [73, "subpackages"], [103, "subpackages"], [105, "subpackages"], [114, "subpackages"], [119, "subpackages"]], "Submodules": [[9, "submodules"], [19, "submodules"], [40, "submodules"], [43, "submodules"], [45, "submodules"], [49, "submodules"], [73, "submodules"], [105, "submodules"], [109, "submodules"], [114, "submodules"], [119, "submodules"]], "neurolang.CD_relations module": [[10, "module-neurolang.CD_relations"]], "neurolang.NeurolangDL": [[11, "neurolang-neurolangdl"]], "neurolang.NeurolangPDL": [[12, "neurolang-neurolangpdl"]], "neurolang.aabb_tree module": [[13, "module-neurolang.aabb_tree"]], "neurolang.commands module": [[14, "module-neurolang.commands"]], "neurolang.config package": [[15, "module-neurolang.config"]], "neurolang.datalog": [[16, "module-neurolang.datalog"]], "neurolang.datalog.aggregation module": [[17, "module-neurolang.datalog.aggregation"]], "neurolang.datalog.basic_representation module": [[18, "module-neurolang.datalog.basic_representation"]], "neurolang.datalog.chase package": [[19, "module-neurolang.datalog.chase"]], "neurolang.datalog.chase.general module": [[20, "module-neurolang.datalog.chase.general"]], "neurolang.datalog.chase.mgu module": [[21, "module-neurolang.datalog.chase.mgu"]], "neurolang.datalog.chase.negation module": [[22, "module-neurolang.datalog.chase.negation"]], "neurolang.datalog.chase.relational_algebra module": [[23, "module-neurolang.datalog.chase.relational_algebra"]], "neurolang.datalog.constraints_representation module": [[24, "module-neurolang.datalog.constraints_representation"]], "neurolang.datalog.exceptions module": [[25, "module-neurolang.datalog.exceptions"]], "neurolang.datalog.expression_processing module": [[26, "module-neurolang.datalog.expression_processing"]], "neurolang.datalog.expressions module": [[27, "module-neurolang.datalog.expressions"]], "neurolang.datalog.instance module": [[28, "module-neurolang.datalog.instance"]], "neurolang.datalog.magic_sets module": [[29, "module-neurolang.datalog.magic_sets"]], "neurolang.datalog.negation module": [[30, "module-neurolang.datalog.negation"]], "neurolang.datalog.ontologies_parser module": [[31, "module-neurolang.datalog.ontologies_parser"]], "neurolang.datalog.ontologies_rewriter module": [[32, "module-neurolang.datalog.ontologies_rewriter"]], "neurolang.datalog.translate_to_named_ra module": [[33, "module-neurolang.datalog.translate_to_named_ra"]], "neurolang.datalog.wrapped_collections module": [[34, "module-neurolang.datalog.wrapped_collections"]], "neurolang.datalog_chase module": [[35, "module-neurolang.datalog_chase"]], "neurolang.exceptions": [[36, "module-neurolang.exceptions"]], "neurolang.expression_pattern_matching": [[37, "module-neurolang.expression_pattern_matching"]], "neurolang.expression_walker": [[38, "module-neurolang.expression_walker"]], "neurolang.expressions": [[39, "module-neurolang.expressions"]], "neurolang.frontend package": [[40, "module-neurolang.frontend"]], "neurolang.frontend.ast module": [[41, "module-neurolang.frontend.ast"]], "neurolang.frontend.ast_lark module": [[42, "module-neurolang.frontend.ast_lark"]], "neurolang.frontend.datalog package": [[43, "module-neurolang.frontend.datalog"]], "neurolang.frontend.datalog.standard_syntax module": [[44, "module-neurolang.frontend.datalog.standard_syntax"]], "neurolang.frontend.datalog.sugar package": [[45, "module-neurolang.frontend.datalog.sugar"]], "neurolang.frontend.datalog.sugar.spatial module": [[46, "module-neurolang.frontend.datalog.sugar.spatial"]], "neurolang.frontend.datalog.syntax_preprocessing module": [[47, "module-neurolang.frontend.datalog.syntax_preprocessing"]], "neurolang.frontend.deterministic_frontend module": [[48, "module-neurolang.frontend.deterministic_frontend"]], "neurolang.frontend.drs package": [[49, "module-neurolang.frontend.drs"]], "neurolang.frontend.drs.chart_parser module": [[50, "module-neurolang.frontend.drs.chart_parser"]], "neurolang.frontend.drs.drs_builder module": [[51, "module-neurolang.frontend.drs.drs_builder"]], "neurolang.frontend.drs.english_grammar module": [[52, "module-neurolang.frontend.drs.english_grammar"]], "neurolang.frontend.drs.exceptions module": [[53, "module-neurolang.frontend.drs.exceptions"]], "neurolang.frontend.drs.translate_to_dl module": [[54, "module-neurolang.frontend.drs.translate_to_dl"]], "neurolang.frontend.frontend_extensions module": [[55, "module-neurolang.frontend.frontend_extensions"]], "neurolang.frontend.neurolang module": [[56, "neurolang-frontend-neurolang-module"]], "neurolang.frontend.neurosynth_utils module": [[57, "module-neurolang.frontend.neurosynth_utils"]], "neurolang.frontend.probabilistic_frontend module": [[58, "module-neurolang.frontend.probabilistic_frontend"]], "Probabilistic Frontend": [[58, "probabilistic-frontend"]], "neurolang.frontend.query_resolution module": [[59, "module-neurolang.frontend.query_resolution"]], "Query Builder Base, Region and Neurosynth Mixins": [[59, "query-builder-base-region-and-neurosynth-mixins"]], "neurolang.frontend.query_resolution_datalog module": [[60, "module-neurolang.frontend.query_resolution_datalog"]], "Query Builder Datalog": [[60, "query-builder-datalog"]], "neurolang.frontend.query_resolution_expressions module": [[61, "module-neurolang.frontend.query_resolution_expressions"]], "Query Resolution Expression": [[61, "query-resolution-expression"]], "neurolang.interval_algebra module": [[62, "module-neurolang.interval_algebra"]], "neurolang.logic": [[63, "module-neurolang.logic"]], "neurolang.logic.expression_processing module": [[64, "module-neurolang.logic.expression_processing"]], "neurolang.logic.horn_clauses module": [[65, "module-neurolang.logic.horn_clauses"]], "neurolang.logic.transformations module": [[66, "module-neurolang.logic.transformations"]], "neurolang.logic.unification module": [[67, "module-neurolang.logic.unification"]], "neurolang.neurolang module": [[68, "module-neurolang.neurolang"]], "neurolang.neurolang_compiler module": [[69, "module-neurolang.neurolang_compiler"]], "neurolang.perior_tree module": [[70, "module-neurolang.perior_tree"]], "neurolang.probabilistic": [[71, "module-neurolang.probabilistic"]], "neurolang.probabilistic.containment module": [[72, "module-neurolang.probabilistic.containment"]], "neurolang.probabilistic.cplogic package": [[73, "module-neurolang.probabilistic.cplogic"]], "neurolang.probabilistic.cplogic.cplogic_to_gm module": [[74, "module-neurolang.probabilistic.cplogic.cplogic_to_gm"]], "neurolang.probabilistic.cplogic.gm_provenance_solver module": [[75, "neurolang-probabilistic-cplogic-gm-provenance-solver-module"]], "neurolang.probabilistic.cplogic.grounding module": [[76, "module-neurolang.probabilistic.cplogic.grounding"]], "neurolang.probabilistic.cplogic.problog_solver module": [[77, "neurolang-probabilistic-cplogic-problog-solver-module"]], "neurolang.probabilistic.cplogic.program module": [[78, "module-neurolang.probabilistic.cplogic.program"]], "neurolang.probabilistic.cplogic.testing module": [[79, "neurolang-probabilistic-cplogic-testing-module"]], "neurolang.probabilistic.dalvi_suciu_lift module": [[80, "module-neurolang.probabilistic.dalvi_suciu_lift"]], "neurolang.probabilistic.distributions module": [[81, "module-neurolang.probabilistic.distributions"]], "neurolang.probabilistic.exceptions module": [[82, "module-neurolang.probabilistic.exceptions"]], "neurolang.probabilistic.expression_processing module": [[83, "module-neurolang.probabilistic.expression_processing"]], "neurolang.probabilistic.expressions module": [[84, "module-neurolang.probabilistic.expressions"]], "neurolang.probabilistic.magic_sets_processing module": [[85, "module-neurolang.probabilistic.magic_sets_processing"]], "neurolang.probabilistic.ppdl module": [[86, "module-neurolang.probabilistic.ppdl"]], "neurolang.probabilistic.probabilistic_ra_utils module": [[87, "module-neurolang.probabilistic.probabilistic_ra_utils"]], "neurolang.probabilistic.probabilistic_semiring_solver module": [[88, "module-neurolang.probabilistic.probabilistic_semiring_solver"]], "neurolang.probabilistic.query_resolution module": [[89, "module-neurolang.probabilistic.query_resolution"]], "neurolang.probabilistic.ranking module": [[90, "module-neurolang.probabilistic.ranking"]], "neurolang.probabilistic.shattering module": [[91, "module-neurolang.probabilistic.shattering"]], "neurolang.probabilistic.small_dichotomy_theorem_based_solver module": [[92, "module-neurolang.probabilistic.small_dichotomy_theorem_based_solver"]], "Returns": [[92, "returns"]], "neurolang.probabilistic.stratification module": [[93, "module-neurolang.probabilistic.stratification"]], "neurolang.probabilistic.transforms module": [[94, "module-neurolang.probabilistic.transforms"]], "neurolang.probabilistic.weighted_model_counting module": [[95, "module-neurolang.probabilistic.weighted_model_counting"]], "neurolang.region_solver module": [[96, "module-neurolang.region_solver"]], "neurolang.regions module": [[97, "module-neurolang.regions"]], "neurolang.relational_algebra": [[98, "module-neurolang.relational_algebra"]], "neurolang.relational_algebra.optimisers module": [[99, "module-neurolang.relational_algebra.optimisers"]], "neurolang.relational_algebra.relational_algebra module": [[100, "module-neurolang.relational_algebra.relational_algebra"]], "neurolang.relational_algebra_provenance": [[101, "module-neurolang.relational_algebra_provenance"]], "neurolang.solver module": [[102, "module-neurolang.solver"]], "neurolang.type_system package": [[103, "module-neurolang.type_system"]], "neurolang.typed_symbol_table module": [[104, "module-neurolang.typed_symbol_table"]], "neurolang.utils package": [[105, "module-neurolang.utils"]], "neurolang.utils.data_manipulation module": [[106, "module-neurolang.utils.data_manipulation"]], "neurolang.utils.interactive_parsing module": [[107, "module-neurolang.utils.interactive_parsing"]], "neurolang.utils.orderedset module": [[108, "module-neurolang.utils.orderedset"]], "neurolang.utils.relational_algebra_set package": [[109, "module-neurolang.utils.relational_algebra_set"]], "neurolang.utils.relational_algebra_set.abstract module": [[110, "module-neurolang.utils.relational_algebra_set.abstract"]], "neurolang.utils.relational_algebra_set.dask_helpers module": [[111, "neurolang-utils-relational-algebra-set-dask-helpers-module"]], "neurolang.utils.relational_algebra_set.dask_sql module": [[112, "neurolang-utils-relational-algebra-set-dask-sql-module"]], "neurolang.utils.relational_algebra_set.pandas module": [[113, "module-neurolang.utils.relational_algebra_set.pandas"]], "neurolang.utils.server package": [[114, "module-neurolang.utils.server"]], "neurolang.utils.server.app module": [[115, "neurolang-utils-server-app-module"]], "neurolang.utils.server.engines module": [[116, "module-neurolang.utils.server.engines"]], "neurolang.utils.server.queries module": [[117, "module-neurolang.utils.server.queries"]], "neurolang.utils.server.responses module": [[118, "module-neurolang.utils.server.responses"]], "neurolang.utils.testing package": [[119, "module-neurolang.utils.testing"]], "neurolang.utils.testing.logic module": [[120, "module-neurolang.utils.testing.logic"]], "neurolang.utils.various module": [[121, "module-neurolang.utils.various"]], "Welcome to Neurolang\u2019s documentation!": [[122, "welcome-to-neurolang-s-documentation"]], "Installing Neurolang": [[123, "installing-neurolang"]], "Windows": [[123, "windows"]], "First: download and install 64 bit Anaconda": [[123, "first-download-and-install-64-bit-anaconda"]], "Second: open a Command Prompt": [[123, "second-open-a-command-prompt"]], "Third: open IPython": [[123, "third-open-ipython"], [123, "id1"], [123, "id3"]], "Mac": [[123, "mac"]], "First: download and install 64 bit": [[123, "first-download-and-install-64-bit"]], "Second: open a Terminal": [[123, "second-open-a-terminal"], [123, "id2"]], "Linux": [[123, "linux"]], "First: Install dependencies": [[123, "first-install-dependencies"]], "To Install the development version": [[123, "to-install-the-development-version"]], "Installing alternative backends for Neurolang": [[123, "installing-alternative-backends-for-neurolang"]], "Get Started with NeuroLang": [[125, "get-started-with-neurolang"]], "First Steps With NeuroLang": [[125, "first-steps-with-neurolang"]], "Disjunctions in Logic Programming": [[125, "disjunctions-in-logic-programming"]], "Aggregations": [[125, "aggregations"]], "NeuroLang for Logic Programmers": [[126, "neurolang-for-logic-programmers"]], "Using Datalog Embedded in Python": [[126, "using-datalog-embedded-in-python"]], "Including Aggregations and Builtin Functions": [[126, "including-aggregations-and-builtin-functions"]], "Adding Constraints and Open Knowledge Rules": [[126, "adding-constraints-and-open-knowledge-rules"]]}, "indexentries": {"module": [[9, "module-neurolang"], [10, "module-neurolang.CD_relations"], [13, "module-neurolang.aabb_tree"], [14, "module-neurolang.commands"], [15, "module-neurolang.config"], [16, "module-neurolang.datalog"], [17, "module-neurolang.datalog.aggregation"], [18, "module-neurolang.datalog.basic_representation"], [19, "module-neurolang.datalog.chase"], [20, "module-neurolang.datalog.chase.general"], [21, "module-neurolang.datalog.chase.mgu"], [22, "module-neurolang.datalog.chase.negation"], [23, "module-neurolang.datalog.chase.relational_algebra"], [24, "module-neurolang.datalog.constraints_representation"], [25, "module-neurolang.datalog.exceptions"], [26, "module-neurolang.datalog.expression_processing"], [27, "module-neurolang.datalog.expressions"], [28, "module-neurolang.datalog.instance"], [29, "module-neurolang.datalog.magic_sets"], [30, "module-neurolang.datalog.negation"], [31, "module-neurolang.datalog.ontologies_parser"], [32, "module-neurolang.datalog.ontologies_rewriter"], [33, "module-neurolang.datalog.translate_to_named_ra"], [34, "module-neurolang.datalog.wrapped_collections"], [35, "module-neurolang.datalog_chase"], [36, "module-neurolang.exceptions"], [37, "module-neurolang.expression_pattern_matching"], [38, "module-neurolang.expression_walker"], [39, "module-neurolang.expressions"], [40, "module-neurolang.frontend"], [41, "module-neurolang.frontend.ast"], [42, "module-neurolang.frontend.ast_lark"], [43, "module-neurolang.frontend.datalog"], [44, "module-neurolang.frontend.datalog.standard_syntax"], [45, "module-neurolang.frontend.datalog.sugar"], [46, "module-neurolang.frontend.datalog.sugar.spatial"], [47, "module-neurolang.frontend.datalog.syntax_preprocessing"], [48, "module-neurolang.frontend.deterministic_frontend"], [49, "module-neurolang.frontend.drs"], [50, "module-neurolang.frontend.drs.chart_parser"], [51, "module-neurolang.frontend.drs.drs_builder"], [52, "module-neurolang.frontend.drs.english_grammar"], [53, "module-neurolang.frontend.drs.exceptions"], [54, "module-neurolang.frontend.drs.translate_to_dl"], [55, "module-neurolang.frontend.frontend_extensions"], [57, "module-neurolang.frontend.neurosynth_utils"], [58, "module-neurolang.frontend.probabilistic_frontend"], [59, "module-neurolang.frontend.query_resolution"], [60, "module-neurolang.frontend.query_resolution_datalog"], [61, "module-neurolang.frontend.query_resolution_expressions"], [62, "module-neurolang.interval_algebra"], [63, "module-neurolang.logic"], [64, "module-neurolang.logic.expression_processing"], [65, "module-neurolang.logic.horn_clauses"], [66, "module-neurolang.logic.transformations"], [67, "module-neurolang.logic.unification"], [68, "module-neurolang.neurolang"], [69, "module-neurolang.neurolang_compiler"], [70, "module-neurolang.perior_tree"], [71, "module-neurolang.probabilistic"], [72, "module-neurolang.probabilistic.containment"], [73, "module-neurolang.probabilistic.cplogic"], [74, "module-neurolang.probabilistic.cplogic.cplogic_to_gm"], [76, "module-neurolang.probabilistic.cplogic.grounding"], [78, "module-neurolang.probabilistic.cplogic.program"], [80, "module-neurolang.probabilistic.dalvi_suciu_lift"], [81, "module-neurolang.probabilistic.distributions"], [82, "module-neurolang.probabilistic.exceptions"], [83, "module-neurolang.probabilistic.expression_processing"], [84, "module-neurolang.probabilistic.expressions"], [85, "module-neurolang.probabilistic.magic_sets_processing"], [86, "module-neurolang.probabilistic.ppdl"], [87, "module-neurolang.probabilistic.probabilistic_ra_utils"], [88, "module-neurolang.probabilistic.probabilistic_semiring_solver"], [89, "module-neurolang.probabilistic.query_resolution"], [90, "module-neurolang.probabilistic.ranking"], [91, "module-neurolang.probabilistic.shattering"], [92, "module-neurolang.probabilistic.small_dichotomy_theorem_based_solver"], [93, "module-neurolang.probabilistic.stratification"], [94, "module-neurolang.probabilistic.transforms"], [95, "module-neurolang.probabilistic.weighted_model_counting"], [96, "module-neurolang.region_solver"], [97, "module-neurolang.regions"], [98, "module-neurolang.relational_algebra"], [99, "module-neurolang.relational_algebra.optimisers"], [100, "module-neurolang.relational_algebra.relational_algebra"], [101, "module-neurolang.relational_algebra_provenance"], [102, "module-neurolang.solver"], [103, "module-neurolang.type_system"], [104, "module-neurolang.typed_symbol_table"], [105, "module-neurolang.utils"], [106, "module-neurolang.utils.data_manipulation"], [107, "module-neurolang.utils.interactive_parsing"], [108, "module-neurolang.utils.orderedset"], [109, "module-neurolang.utils.relational_algebra_set"], [110, "module-neurolang.utils.relational_algebra_set.abstract"], [113, "module-neurolang.utils.relational_algebra_set.pandas"], [114, "module-neurolang.utils.server"], [116, "module-neurolang.utils.server.engines"], [117, "module-neurolang.utils.server.queries"], [118, "module-neurolang.utils.server.responses"], [119, "module-neurolang.utils.testing"], [120, "module-neurolang.utils.testing.logic"], [121, "module-neurolang.utils.various"]], "neurolang": [[9, "module-neurolang"]], "cardinal_relation() (in module neurolang.cd_relations)": [[10, "neurolang.CD_relations.cardinal_relation"]], "neurolang.cd_relations": [[10, "module-neurolang.CD_relations"]], "neurolangdl (class in neurolang)": [[11, "neurolang.NeurolangDL"]], "__init__() (neurolang.neurolangdl method)": [[11, "neurolang.NeurolangDL.__init__"]], "neurolangpdl (class in neurolang)": [[12, "neurolang.NeurolangPDL"]], "__init__() (neurolang.neurolangpdl method)": [[12, "neurolang.NeurolangPDL.__init__"]], "aabb (class in neurolang.aabb_tree)": [[13, "neurolang.aabb_tree.AABB"]], "node (class in neurolang.aabb_tree)": [[13, "neurolang.aabb_tree.Node"]], "tree (class in neurolang.aabb_tree)": [[13, "neurolang.aabb_tree.Tree"]], "aabb_from_vertices() (in module neurolang.aabb_tree)": [[13, "neurolang.aabb_tree.aabb_from_vertices"]], "add() (neurolang.aabb_tree.tree method)": [[13, "neurolang.aabb_tree.Tree.add"]], "add_in_direction() (neurolang.aabb_tree.tree method)": [[13, "neurolang.aabb_tree.Tree.add_in_direction"]], "add_left() (neurolang.aabb_tree.tree method)": [[13, "neurolang.aabb_tree.Tree.add_left"]], "add_right() (neurolang.aabb_tree.tree method)": [[13, "neurolang.aabb_tree.Tree.add_right"]], "center (neurolang.aabb_tree.aabb property)": [[13, "neurolang.aabb_tree.AABB.center"]], "children (neurolang.aabb_tree.node property)": [[13, "neurolang.aabb_tree.Node.children"]], "contains() (neurolang.aabb_tree.aabb method)": [[13, "neurolang.aabb_tree.AABB.contains"]], "dim (neurolang.aabb_tree.aabb property)": [[13, "neurolang.aabb_tree.AABB.dim"]], "expand_region_box() (neurolang.aabb_tree.tree method)": [[13, "neurolang.aabb_tree.Tree.expand_region_box"]], "is_leaf (neurolang.aabb_tree.node property)": [[13, "neurolang.aabb_tree.Node.is_leaf"]], "lb (neurolang.aabb_tree.aabb property)": [[13, "neurolang.aabb_tree.AABB.lb"]], "left (neurolang.aabb_tree.node property)": [[13, "neurolang.aabb_tree.Node.left"]], "limits (neurolang.aabb_tree.aabb property)": [[13, "neurolang.aabb_tree.AABB.limits"]], "neurolang.aabb_tree": [[13, "module-neurolang.aabb_tree"]], "overlaps() (neurolang.aabb_tree.aabb method)": [[13, "neurolang.aabb_tree.AABB.overlaps"]], "query_overlapping_regions() (neurolang.aabb_tree.tree method)": [[13, "neurolang.aabb_tree.Tree.query_overlapping_regions"]], "query_regions_axdir() (neurolang.aabb_tree.tree method)": [[13, "neurolang.aabb_tree.Tree.query_regions_axdir"]], "query_regions_contained_in_box() (neurolang.aabb_tree.tree method)": [[13, "neurolang.aabb_tree.Tree.query_regions_contained_in_box"]], "right (neurolang.aabb_tree.node property)": [[13, "neurolang.aabb_tree.Node.right"]], "ub (neurolang.aabb_tree.aabb property)": [[13, "neurolang.aabb_tree.AABB.ub"]], "union() (neurolang.aabb_tree.aabb method)": [[13, "neurolang.aabb_tree.AABB.union"]], "volume (neurolang.aabb_tree.aabb property)": [[13, "neurolang.aabb_tree.AABB.volume"]], "width (neurolang.aabb_tree.aabb property)": [[13, "neurolang.aabb_tree.AABB.width"]], "commandsmixin (class in neurolang.commands)": [[14, "neurolang.commands.CommandsMixin"]], "load_atlas() (neurolang.commands.commandsmixin method)": [[14, "neurolang.commands.CommandsMixin.load_atlas"]], "load_csv() (neurolang.commands.commandsmixin method)": [[14, "neurolang.commands.CommandsMixin.load_csv"]], "neurolang.commands": [[14, "module-neurolang.commands"]], "type (neurolang.commands.commandsmixin attribute)": [[14, "neurolang.commands.CommandsMixin.type"]], "neurolangconfigparser (class in neurolang.config)": [[15, "neurolang.config.NeurolangConfigParser"]], "disable_expression_type_printing() (neurolang.config.neurolangconfigparser method)": [[15, "neurolang.config.NeurolangConfigParser.disable_expression_type_printing"]], "disable_probabilistic_solver_check_unate() (neurolang.config.neurolangconfigparser method)": [[15, "neurolang.config.NeurolangConfigParser.disable_probabilistic_solver_check_unate"]], "enable_expression_type_printing() (neurolang.config.neurolangconfigparser method)": [[15, "neurolang.config.NeurolangConfigParser.enable_expression_type_printing"]], "enable_probabilistic_solver_check_unate() (neurolang.config.neurolangconfigparser method)": [[15, "neurolang.config.NeurolangConfigParser.enable_probabilistic_solver_check_unate"]], "expression_type_printing() (neurolang.config.neurolangconfigparser method)": [[15, "neurolang.config.NeurolangConfigParser.expression_type_printing"]], "get_probabilistic_solver_check_unate() (neurolang.config.neurolangconfigparser method)": [[15, "neurolang.config.NeurolangConfigParser.get_probabilistic_solver_check_unate"]], "get_structural_knowledge_namespace() (neurolang.config.neurolangconfigparser method)": [[15, "neurolang.config.NeurolangConfigParser.get_structural_knowledge_namespace"]], "neurolang.config": [[15, "module-neurolang.config"]], "set_query_backend() (neurolang.config.neurolangconfigparser method)": [[15, "neurolang.config.NeurolangConfigParser.set_query_backend"]], "set_structural_knowledge_namespace() (neurolang.config.neurolangconfigparser method)": [[15, "neurolang.config.NeurolangConfigParser.set_structural_knowledge_namespace"]], "switch_backend() (neurolang.config.neurolangconfigparser method)": [[15, "neurolang.config.NeurolangConfigParser.switch_backend"]], "switch_expression_type_printing() (neurolang.config.neurolangconfigparser method)": [[15, "neurolang.config.NeurolangConfigParser.switch_expression_type_printing"]], "neurolang.datalog": [[16, "module-neurolang.datalog"]], "builtinaggregationmixin (class in neurolang.datalog.aggregation)": [[17, "neurolang.datalog.aggregation.BuiltinAggregationMixin"]], "chaseaggregationmixin (class in neurolang.datalog.aggregation)": [[17, "neurolang.datalog.aggregation.ChaseAggregationMixin"]], "datalogwithaggregationmixin (class in neurolang.datalog.aggregation)": [[17, "neurolang.datalog.aggregation.DatalogWithAggregationMixin"]], "translatetologicwithaggregation (class in neurolang.datalog.aggregation)": [[17, "neurolang.datalog.aggregation.TranslateToLogicWithAggregation"]], "check_constraints() (neurolang.datalog.aggregation.chaseaggregationmixin method)": [[17, "neurolang.datalog.aggregation.ChaseAggregationMixin.check_constraints"]], "compute_result_set() (neurolang.datalog.aggregation.chaseaggregationmixin method)": [[17, "neurolang.datalog.aggregation.ChaseAggregationMixin.compute_result_set"]], "constant_max (neurolang.datalog.aggregation.builtinaggregationmixin attribute)": [[17, "neurolang.datalog.aggregation.BuiltinAggregationMixin.constant_max"]], "constant_mean (neurolang.datalog.aggregation.builtinaggregationmixin attribute)": [[17, "neurolang.datalog.aggregation.BuiltinAggregationMixin.constant_mean"]], "constant_std (neurolang.datalog.aggregation.builtinaggregationmixin attribute)": [[17, "neurolang.datalog.aggregation.BuiltinAggregationMixin.constant_std"]], "constant_sum (neurolang.datalog.aggregation.builtinaggregationmixin attribute)": [[17, "neurolang.datalog.aggregation.BuiltinAggregationMixin.constant_sum"]], "eliminate_already_computed() (neurolang.datalog.aggregation.chaseaggregationmixin method)": [[17, "neurolang.datalog.aggregation.ChaseAggregationMixin.eliminate_already_computed"]], "function_count() (neurolang.datalog.aggregation.builtinaggregationmixin method)": [[17, "neurolang.datalog.aggregation.BuiltinAggregationMixin.function_count"]], "is_builtin_aggregation_functor() (in module neurolang.datalog.aggregation)": [[17, "neurolang.datalog.aggregation.is_builtin_aggregation_functor"]], "neurolang.datalog.aggregation": [[17, "module-neurolang.datalog.aggregation"]], "statement_intensional_aggregation() (neurolang.datalog.aggregation.datalogwithaggregationmixin method)": [[17, "neurolang.datalog.aggregation.DatalogWithAggregationMixin.statement_intensional_aggregation"]], "transform_function_application_consequent_to_aggregation() (neurolang.datalog.aggregation.translatetologicwithaggregation method)": [[17, "neurolang.datalog.aggregation.TranslateToLogicWithAggregation.transform_function_application_consequent_to_aggregation"]], "type (neurolang.datalog.aggregation.datalogwithaggregationmixin attribute)": [[17, "neurolang.datalog.aggregation.DatalogWithAggregationMixin.type"]], "type (neurolang.datalog.aggregation.translatetologicwithaggregation attribute)": [[17, "neurolang.datalog.aggregation.TranslateToLogicWithAggregation.type"]], "datalogprogram (class in neurolang.datalog.basic_representation)": [[18, "neurolang.datalog.basic_representation.DatalogProgram"]], "fact (class in neurolang.datalog.basic_representation)": [[18, "neurolang.datalog.basic_representation.Fact"]], "implication (class in neurolang.datalog.basic_representation)": [[18, "neurolang.datalog.basic_representation.Implication"]], "nullconstant (class in neurolang.datalog.basic_representation)": [[18, "neurolang.datalog.basic_representation.NullConstant"]], "undefined (class in neurolang.datalog.basic_representation)": [[18, "neurolang.datalog.basic_representation.Undefined"]], "unionofconjunctivequeries (class in neurolang.datalog.basic_representation)": [[18, "neurolang.datalog.basic_representation.UnionOfConjunctiveQueries"]], "wrappedrelationalalgebraset (class in neurolang.datalog.basic_representation)": [[18, "neurolang.datalog.basic_representation.WrappedRelationalAlgebraSet"]], "fact (neurolang.datalog.basic_representation.fact property)": [[18, "neurolang.datalog.basic_representation.Fact.fact"]], "neurolang.datalog.basic_representation": [[18, "module-neurolang.datalog.basic_representation"]], "protected_keywords (neurolang.datalog.basic_representation.datalogprogram attribute)": [[18, "neurolang.datalog.basic_representation.DatalogProgram.protected_keywords"]], "type (neurolang.datalog.basic_representation.datalogprogram attribute)": [[18, "neurolang.datalog.basic_representation.DatalogProgram.type"]], "type (neurolang.datalog.basic_representation.fact attribute)": [[18, "neurolang.datalog.basic_representation.Fact.type"]], "type (neurolang.datalog.basic_representation.implication attribute)": [[18, "neurolang.datalog.basic_representation.Implication.type"]], "type (neurolang.datalog.basic_representation.nullconstant attribute)": [[18, "neurolang.datalog.basic_representation.NullConstant.type"]], "type (neurolang.datalog.basic_representation.undefined attribute)": [[18, "neurolang.datalog.basic_representation.Undefined.type"]], "unwrap() (neurolang.datalog.basic_representation.wrappedrelationalalgebraset method)": [[18, "neurolang.datalog.basic_representation.WrappedRelationalAlgebraSet.unwrap"]], "chasegeneral (class in neurolang.datalog.chase)": [[19, "neurolang.datalog.chase.ChaseGeneral"]], "chasemgumixin (class in neurolang.datalog.chase)": [[19, "neurolang.datalog.chase.ChaseMGUMixin"]], "chasenaive (class in neurolang.datalog.chase)": [[19, "neurolang.datalog.chase.ChaseNaive"]], "chasenamedrelationalalgebramixin (class in neurolang.datalog.chase)": [[19, "neurolang.datalog.chase.ChaseNamedRelationalAlgebraMixin"]], "chasenode (class in neurolang.datalog.chase)": [[19, "neurolang.datalog.chase.ChaseNode"]], "chasenonrecursive (class in neurolang.datalog.chase)": [[19, "neurolang.datalog.chase.ChaseNonRecursive"]], "chaserelationalalgebrapluscerimixin (class in neurolang.datalog.chase)": [[19, "neurolang.datalog.chase.ChaseRelationalAlgebraPlusCeriMixin"]], "chaseseminaive (class in neurolang.datalog.chase)": [[19, "neurolang.datalog.chase.ChaseSemiNaive"]], "chasestratified (class in neurolang.datalog.chase)": [[19, "neurolang.datalog.chase.ChaseStratified"]], "neurolangnonlinearprogramexception": [[19, "neurolang.datalog.chase.NeuroLangNonLinearProgramException"], [20, "neurolang.datalog.chase.general.NeuroLangNonLinearProgramException"]], "neurolangprogramhasloopsexception": [[19, "neurolang.datalog.chase.NeuroLangProgramHasLoopsException"], [20, "neurolang.datalog.chase.general.NeuroLangProgramHasLoopsException"]], "aggregate_tuple_type_into_row_type() (neurolang.datalog.chase.chasegeneral method)": [[19, "neurolang.datalog.chase.ChaseGeneral.aggregate_tuple_type_into_row_type"]], "build_chase_solution() (neurolang.datalog.chase.chasegeneral method)": [[19, "neurolang.datalog.chase.ChaseGeneral.build_chase_solution"]], "build_chase_solution() (neurolang.datalog.chase.chasestratified method)": [[19, "neurolang.datalog.chase.ChaseStratified.build_chase_solution"]], "build_chase_tree() (neurolang.datalog.chase.chasegeneral method)": [[19, "neurolang.datalog.chase.ChaseGeneral.build_chase_tree"]], "build_nodes_from_rules() (neurolang.datalog.chase.chasegeneral method)": [[19, "neurolang.datalog.chase.ChaseGeneral.build_nodes_from_rules"]], "chase_step() (neurolang.datalog.chase.chasegeneral method)": [[19, "neurolang.datalog.chase.ChaseGeneral.chase_step"]], "chase_step() (neurolang.datalog.chase.chasenamedrelationalalgebramixin method)": [[19, "neurolang.datalog.chase.ChaseNamedRelationalAlgebraMixin.chase_step"]], "check_constraints() (neurolang.datalog.chase.chasegeneral method)": [[19, "neurolang.datalog.chase.ChaseGeneral.check_constraints"]], "check_constraints() (neurolang.datalog.chase.chasenonrecursive method)": [[19, "neurolang.datalog.chase.ChaseNonRecursive.check_constraints"]], "check_constraints() (neurolang.datalog.chase.chaseseminaive method)": [[19, "neurolang.datalog.chase.ChaseSemiNaive.check_constraints"]], "children (neurolang.datalog.chase.chasenode attribute)": [[19, "neurolang.datalog.chase.ChaseNode.children"]], "compose_all_subtitutions() (neurolang.datalog.chase.chasegeneral static method)": [[19, "neurolang.datalog.chase.ChaseGeneral.compose_all_subtitutions"]], "compose_substitutions_ignoring_conflicts() (neurolang.datalog.chase.chasegeneral static method)": [[19, "neurolang.datalog.chase.ChaseGeneral.compose_substitutions_ignoring_conflicts"]], "compose_substitutions_no_conflict() (neurolang.datalog.chase.chasegeneral static method)": [[19, "neurolang.datalog.chase.ChaseGeneral.compose_substitutions_no_conflict"]], "compute_instance_update() (neurolang.datalog.chase.chasegeneral method)": [[19, "neurolang.datalog.chase.ChaseGeneral.compute_instance_update"]], "compute_new_tuple_and_type() (neurolang.datalog.chase.chasegeneral method)": [[19, "neurolang.datalog.chase.ChaseGeneral.compute_new_tuple_and_type"]], "compute_result_set() (neurolang.datalog.chase.chasegeneral method)": [[19, "neurolang.datalog.chase.ChaseGeneral.compute_result_set"]], "compute_result_set() (neurolang.datalog.chase.chasenamedrelationalalgebramixin method)": [[19, "neurolang.datalog.chase.ChaseNamedRelationalAlgebraMixin.compute_result_set"]], "compute_substitutions() (neurolang.datalog.chase.chaserelationalalgebrapluscerimixin method)": [[19, "neurolang.datalog.chase.ChaseRelationalAlgebraPlusCeriMixin.compute_substitutions"]], "eliminate_already_computed() (neurolang.datalog.chase.chasegeneral method)": [[19, "neurolang.datalog.chase.ChaseGeneral.eliminate_already_computed"]], "eliminate_already_computed() (neurolang.datalog.chase.chasenamedrelationalalgebramixin method)": [[19, "neurolang.datalog.chase.ChaseNamedRelationalAlgebraMixin.eliminate_already_computed"]], "evaluate_builtins() (neurolang.datalog.chase.chasegeneral method)": [[19, "neurolang.datalog.chase.ChaseGeneral.evaluate_builtins"]], "evaluate_builtins_predicates() (neurolang.datalog.chase.chasegeneral method)": [[19, "neurolang.datalog.chase.ChaseGeneral.evaluate_builtins_predicates"]], "execute_chase() (neurolang.datalog.chase.chasenaive method)": [[19, "neurolang.datalog.chase.ChaseNaive.execute_chase"]], "execute_chase() (neurolang.datalog.chase.chasenonrecursive method)": [[19, "neurolang.datalog.chase.ChaseNonRecursive.execute_chase"]], "execute_chase() (neurolang.datalog.chase.chaseseminaive method)": [[19, "neurolang.datalog.chase.ChaseSemiNaive.execute_chase"]], "extract_rule_predicates() (neurolang.datalog.chase.chasegeneral method)": [[19, "neurolang.datalog.chase.ChaseGeneral.extract_rule_predicates"]], "extract_variable_arguments() (neurolang.datalog.chase.chasegeneral static method)": [[19, "neurolang.datalog.chase.ChaseGeneral.extract_variable_arguments"]], "get_args_to_project() (neurolang.datalog.chase.chasegeneral method)": [[19, "neurolang.datalog.chase.ChaseGeneral.get_args_to_project"]], "infer_iterable_subtype() (neurolang.datalog.chase.chasegeneral static method)": [[19, "neurolang.datalog.chase.ChaseGeneral.infer_iterable_subtype"]], "instance (neurolang.datalog.chase.chasenode attribute)": [[19, "neurolang.datalog.chase.ChaseNode.instance"]], "is_containment_of_symbol_in_constant() (neurolang.datalog.chase.chasegeneral static method)": [[19, "neurolang.datalog.chase.ChaseGeneral.is_containment_of_symbol_in_constant"]], "is_equality_between_constant_and_symbol() (neurolang.datalog.chase.chasegeneral static method)": [[19, "neurolang.datalog.chase.ChaseGeneral.is_equality_between_constant_and_symbol"]], "neurolang.datalog.chase": [[19, "module-neurolang.datalog.chase"]], "obtain_substitutions() (neurolang.datalog.chase.chasemgumixin static method)": [[19, "neurolang.datalog.chase.ChaseMGUMixin.obtain_substitutions"]], "obtain_substitutions() (neurolang.datalog.chase.chasenamedrelationalalgebramixin method)": [[19, "neurolang.datalog.chase.ChaseNamedRelationalAlgebraMixin.obtain_substitutions"]], "obtain_substitutions() (neurolang.datalog.chase.chaserelationalalgebrapluscerimixin method)": [[19, "neurolang.datalog.chase.ChaseRelationalAlgebraPlusCeriMixin.obtain_substitutions"]], "per_rule_update() (neurolang.datalog.chase.chaseseminaive method)": [[19, "neurolang.datalog.chase.ChaseSemiNaive.per_rule_update"]], "pick_chase_instance_for_stratum() (neurolang.datalog.chase.chasestratified method)": [[19, "neurolang.datalog.chase.ChaseStratified.pick_chase_instance_for_stratum"]], "rewrite_antecedent_equalities() (neurolang.datalog.chase.chasenamedrelationalalgebramixin method)": [[19, "neurolang.datalog.chase.ChaseNamedRelationalAlgebraMixin.rewrite_antecedent_equalities"]], "rewrite_constants_in_consequent() (neurolang.datalog.chase.chasenamedrelationalalgebramixin method)": [[19, "neurolang.datalog.chase.ChaseNamedRelationalAlgebraMixin.rewrite_constants_in_consequent"]], "rewrite_rule_consequent_constants_to_equalities() (neurolang.datalog.chase.chasenamedrelationalalgebramixin static method)": [[19, "neurolang.datalog.chase.ChaseNamedRelationalAlgebraMixin.rewrite_rule_consequent_constants_to_equalities"]], "translate_conjunction_to_named_ra() (neurolang.datalog.chase.chasenamedrelationalalgebramixin method)": [[19, "neurolang.datalog.chase.ChaseNamedRelationalAlgebraMixin.translate_conjunction_to_named_ra"]], "translate_predicate() (neurolang.datalog.chase.chaserelationalalgebrapluscerimixin method)": [[19, "neurolang.datalog.chase.ChaseRelationalAlgebraPlusCeriMixin.translate_predicate"]], "translate_predicate_process_argument() (neurolang.datalog.chase.chaserelationalalgebrapluscerimixin method)": [[19, "neurolang.datalog.chase.ChaseRelationalAlgebraPlusCeriMixin.translate_predicate_process_argument"]], "translate_predicate_process_argument_symbol() (neurolang.datalog.chase.chaserelationalalgebrapluscerimixin method)": [[19, "neurolang.datalog.chase.ChaseRelationalAlgebraPlusCeriMixin.translate_predicate_process_argument_symbol"]], "translate_to_ra_plus() (neurolang.datalog.chase.chaserelationalalgebrapluscerimixin method)": [[19, "neurolang.datalog.chase.ChaseRelationalAlgebraPlusCeriMixin.translate_to_ra_plus"]], "unify_builtin_substitution() (neurolang.datalog.chase.chasegeneral method)": [[19, "neurolang.datalog.chase.ChaseGeneral.unify_builtin_substitution"]], "unify_builtin_substitution_containment() (neurolang.datalog.chase.chasegeneral static method)": [[19, "neurolang.datalog.chase.ChaseGeneral.unify_builtin_substitution_containment"]], "unify_builtin_substitution_equality() (neurolang.datalog.chase.chasegeneral static method)": [[19, "neurolang.datalog.chase.ChaseGeneral.unify_builtin_substitution_equality"]], "unify_substitution() (neurolang.datalog.chase.chasemgumixin static method)": [[19, "neurolang.datalog.chase.ChaseMGUMixin.unify_substitution"]], "chasegeneral (class in neurolang.datalog.chase.general)": [[20, "neurolang.datalog.chase.general.ChaseGeneral"]], "chasenaive (class in neurolang.datalog.chase.general)": [[20, "neurolang.datalog.chase.general.ChaseNaive"]], "chasenode (class in neurolang.datalog.chase.general)": [[20, "neurolang.datalog.chase.general.ChaseNode"]], "chasenonrecursive (class in neurolang.datalog.chase.general)": [[20, "neurolang.datalog.chase.general.ChaseNonRecursive"]], "chaseseminaive (class in neurolang.datalog.chase.general)": [[20, "neurolang.datalog.chase.general.ChaseSemiNaive"]], "chasestratified (class in neurolang.datalog.chase.general)": [[20, "neurolang.datalog.chase.general.ChaseStratified"]], "aggregate_tuple_type_into_row_type() (neurolang.datalog.chase.general.chasegeneral method)": [[20, "neurolang.datalog.chase.general.ChaseGeneral.aggregate_tuple_type_into_row_type"]], "build_chase_solution() (neurolang.datalog.chase.general.chasegeneral method)": [[20, "neurolang.datalog.chase.general.ChaseGeneral.build_chase_solution"]], "build_chase_solution() (neurolang.datalog.chase.general.chasestratified method)": [[20, "neurolang.datalog.chase.general.ChaseStratified.build_chase_solution"]], "build_chase_tree() (neurolang.datalog.chase.general.chasegeneral method)": [[20, "neurolang.datalog.chase.general.ChaseGeneral.build_chase_tree"]], "build_nodes_from_rules() (neurolang.datalog.chase.general.chasegeneral method)": [[20, "neurolang.datalog.chase.general.ChaseGeneral.build_nodes_from_rules"]], "chase_step() (neurolang.datalog.chase.general.chasegeneral method)": [[20, "neurolang.datalog.chase.general.ChaseGeneral.chase_step"]], "check_constraints() (neurolang.datalog.chase.general.chasegeneral method)": [[20, "neurolang.datalog.chase.general.ChaseGeneral.check_constraints"]], "check_constraints() (neurolang.datalog.chase.general.chasenonrecursive method)": [[20, "neurolang.datalog.chase.general.ChaseNonRecursive.check_constraints"]], "check_constraints() (neurolang.datalog.chase.general.chaseseminaive method)": [[20, "neurolang.datalog.chase.general.ChaseSemiNaive.check_constraints"]], "children (neurolang.datalog.chase.general.chasenode attribute)": [[20, "neurolang.datalog.chase.general.ChaseNode.children"]], "compose_all_subtitutions() (neurolang.datalog.chase.general.chasegeneral static method)": [[20, "neurolang.datalog.chase.general.ChaseGeneral.compose_all_subtitutions"]], "compose_substitutions_ignoring_conflicts() (neurolang.datalog.chase.general.chasegeneral static method)": [[20, "neurolang.datalog.chase.general.ChaseGeneral.compose_substitutions_ignoring_conflicts"]], "compose_substitutions_no_conflict() (neurolang.datalog.chase.general.chasegeneral static method)": [[20, "neurolang.datalog.chase.general.ChaseGeneral.compose_substitutions_no_conflict"]], "compute_instance_update() (neurolang.datalog.chase.general.chasegeneral method)": [[20, "neurolang.datalog.chase.general.ChaseGeneral.compute_instance_update"]], "compute_new_tuple_and_type() (neurolang.datalog.chase.general.chasegeneral method)": [[20, "neurolang.datalog.chase.general.ChaseGeneral.compute_new_tuple_and_type"]], "compute_result_set() (neurolang.datalog.chase.general.chasegeneral method)": [[20, "neurolang.datalog.chase.general.ChaseGeneral.compute_result_set"]], "eliminate_already_computed() (neurolang.datalog.chase.general.chasegeneral method)": [[20, "neurolang.datalog.chase.general.ChaseGeneral.eliminate_already_computed"]], "evaluate_builtins() (neurolang.datalog.chase.general.chasegeneral method)": [[20, "neurolang.datalog.chase.general.ChaseGeneral.evaluate_builtins"]], "evaluate_builtins_predicates() (neurolang.datalog.chase.general.chasegeneral method)": [[20, "neurolang.datalog.chase.general.ChaseGeneral.evaluate_builtins_predicates"]], "execute_chase() (neurolang.datalog.chase.general.chasenaive method)": [[20, "neurolang.datalog.chase.general.ChaseNaive.execute_chase"]], "execute_chase() (neurolang.datalog.chase.general.chasenonrecursive method)": [[20, "neurolang.datalog.chase.general.ChaseNonRecursive.execute_chase"]], "execute_chase() (neurolang.datalog.chase.general.chaseseminaive method)": [[20, "neurolang.datalog.chase.general.ChaseSemiNaive.execute_chase"]], "extract_rule_predicates() (neurolang.datalog.chase.general.chasegeneral method)": [[20, "neurolang.datalog.chase.general.ChaseGeneral.extract_rule_predicates"]], "extract_variable_arguments() (neurolang.datalog.chase.general.chasegeneral static method)": [[20, "neurolang.datalog.chase.general.ChaseGeneral.extract_variable_arguments"]], "get_args_to_project() (neurolang.datalog.chase.general.chasegeneral method)": [[20, "neurolang.datalog.chase.general.ChaseGeneral.get_args_to_project"]], "infer_iterable_subtype() (neurolang.datalog.chase.general.chasegeneral static method)": [[20, "neurolang.datalog.chase.general.ChaseGeneral.infer_iterable_subtype"]], "instance (neurolang.datalog.chase.general.chasenode attribute)": [[20, "neurolang.datalog.chase.general.ChaseNode.instance"]], "is_containment_of_symbol_in_constant() (neurolang.datalog.chase.general.chasegeneral static method)": [[20, "neurolang.datalog.chase.general.ChaseGeneral.is_containment_of_symbol_in_constant"]], "is_equality_between_constant_and_symbol() (neurolang.datalog.chase.general.chasegeneral static method)": [[20, "neurolang.datalog.chase.general.ChaseGeneral.is_equality_between_constant_and_symbol"]], "neurolang.datalog.chase.general": [[20, "module-neurolang.datalog.chase.general"]], "per_rule_update() (neurolang.datalog.chase.general.chaseseminaive method)": [[20, "neurolang.datalog.chase.general.ChaseSemiNaive.per_rule_update"]], "pick_chase_instance_for_stratum() (neurolang.datalog.chase.general.chasestratified method)": [[20, "neurolang.datalog.chase.general.ChaseStratified.pick_chase_instance_for_stratum"]], "unify_builtin_substitution() (neurolang.datalog.chase.general.chasegeneral method)": [[20, "neurolang.datalog.chase.general.ChaseGeneral.unify_builtin_substitution"]], "unify_builtin_substitution_containment() (neurolang.datalog.chase.general.chasegeneral static method)": [[20, "neurolang.datalog.chase.general.ChaseGeneral.unify_builtin_substitution_containment"]], "unify_builtin_substitution_equality() (neurolang.datalog.chase.general.chasegeneral static method)": [[20, "neurolang.datalog.chase.general.ChaseGeneral.unify_builtin_substitution_equality"]], "chasemgumixin (class in neurolang.datalog.chase.mgu)": [[21, "neurolang.datalog.chase.mgu.ChaseMGUMixin"]], "neurolang.datalog.chase.mgu": [[21, "module-neurolang.datalog.chase.mgu"]], "obtain_substitutions() (neurolang.datalog.chase.mgu.chasemgumixin static method)": [[21, "neurolang.datalog.chase.mgu.ChaseMGUMixin.obtain_substitutions"]], "unify_substitution() (neurolang.datalog.chase.mgu.chasemgumixin static method)": [[21, "neurolang.datalog.chase.mgu.ChaseMGUMixin.unify_substitution"]], "datalogchasenegation (class in neurolang.datalog.chase.negation)": [[22, "neurolang.datalog.chase.negation.DatalogChaseNegation"]], "datalogchasenegationgeneral (class in neurolang.datalog.chase.negation)": [[22, "neurolang.datalog.chase.negation.DatalogChaseNegationGeneral"]], "datalogchasenegationmgumixin (class in neurolang.datalog.chase.negation)": [[22, "neurolang.datalog.chase.negation.DatalogChaseNegationMGUMixin"]], "datalogchasenegationrelationalalgebramixin (class in neurolang.datalog.chase.negation)": [[22, "neurolang.datalog.chase.negation.DatalogChaseNegationRelationalAlgebraMixin"]], "negativefactconstraints (class in neurolang.datalog.chase.negation)": [[22, "neurolang.datalog.chase.negation.NegativeFactConstraints"]], "chase_step() (neurolang.datalog.chase.negation.datalogchasenegationgeneral method)": [[22, "neurolang.datalog.chase.negation.DatalogChaseNegationGeneral.chase_step"]], "check_constraints() (neurolang.datalog.chase.negation.negativefactconstraints method)": [[22, "neurolang.datalog.chase.negation.NegativeFactConstraints.check_constraints"]], "check_non_linear() (neurolang.datalog.chase.negation.datalogchasenegationgeneral method)": [[22, "neurolang.datalog.chase.negation.DatalogChaseNegationGeneral.check_non_linear"]], "evaluate_negative_builtins() (neurolang.datalog.chase.negation.datalogchasenegationgeneral method)": [[22, "neurolang.datalog.chase.negation.DatalogChaseNegationGeneral.evaluate_negative_builtins"]], "extract_rule_predicates() (neurolang.datalog.chase.negation.datalogchasenegationgeneral method)": [[22, "neurolang.datalog.chase.negation.DatalogChaseNegationGeneral.extract_rule_predicates"]], "get_args_to_project() (neurolang.datalog.chase.negation.datalogchasenegationgeneral method)": [[22, "neurolang.datalog.chase.negation.DatalogChaseNegationGeneral.get_args_to_project"]], "neurolang.datalog.chase.negation": [[22, "module-neurolang.datalog.chase.negation"]], "obtain_negative_substitutions() (neurolang.datalog.chase.negation.datalogchasenegationmgumixin static method)": [[22, "neurolang.datalog.chase.negation.DatalogChaseNegationMGUMixin.obtain_negative_substitutions"]], "obtain_negative_substitutions() (neurolang.datalog.chase.negation.datalogchasenegationrelationalalgebramixin method)": [[22, "neurolang.datalog.chase.negation.DatalogChaseNegationRelationalAlgebraMixin.obtain_negative_substitutions"]], "unify_negative_builtin_substitution() (neurolang.datalog.chase.negation.datalogchasenegationgeneral method)": [[22, "neurolang.datalog.chase.negation.DatalogChaseNegationGeneral.unify_negative_builtin_substitution"]], "unify_negative_substitution() (neurolang.datalog.chase.negation.datalogchasenegationmgumixin static method)": [[22, "neurolang.datalog.chase.negation.DatalogChaseNegationMGUMixin.unify_negative_substitution"]], "chasenamedrelationalalgebramixin (class in neurolang.datalog.chase.relational_algebra)": [[23, "neurolang.datalog.chase.relational_algebra.ChaseNamedRelationalAlgebraMixin"]], "chaserelationalalgebrapluscerimixin (class in neurolang.datalog.chase.relational_algebra)": [[23, "neurolang.datalog.chase.relational_algebra.ChaseRelationalAlgebraPlusCeriMixin"]], "namedrelationalalgebraoptimiser (class in neurolang.datalog.chase.relational_algebra)": [[23, "neurolang.datalog.chase.relational_algebra.NamedRelationalAlgebraOptimiser"]], "chase_step() (neurolang.datalog.chase.relational_algebra.chasenamedrelationalalgebramixin method)": [[23, "neurolang.datalog.chase.relational_algebra.ChaseNamedRelationalAlgebraMixin.chase_step"]], "compute_result_set() (neurolang.datalog.chase.relational_algebra.chasenamedrelationalalgebramixin method)": [[23, "neurolang.datalog.chase.relational_algebra.ChaseNamedRelationalAlgebraMixin.compute_result_set"]], "compute_substitutions() (neurolang.datalog.chase.relational_algebra.chaserelationalalgebrapluscerimixin method)": [[23, "neurolang.datalog.chase.relational_algebra.ChaseRelationalAlgebraPlusCeriMixin.compute_substitutions"]], "eliminate_already_computed() (neurolang.datalog.chase.relational_algebra.chasenamedrelationalalgebramixin method)": [[23, "neurolang.datalog.chase.relational_algebra.ChaseNamedRelationalAlgebraMixin.eliminate_already_computed"]], "neurolang.datalog.chase.relational_algebra": [[23, "module-neurolang.datalog.chase.relational_algebra"]], "obtain_substitutions() (neurolang.datalog.chase.relational_algebra.chasenamedrelationalalgebramixin method)": [[23, "neurolang.datalog.chase.relational_algebra.ChaseNamedRelationalAlgebraMixin.obtain_substitutions"]], "obtain_substitutions() (neurolang.datalog.chase.relational_algebra.chaserelationalalgebrapluscerimixin method)": [[23, "neurolang.datalog.chase.relational_algebra.ChaseRelationalAlgebraPlusCeriMixin.obtain_substitutions"]], "rewrite_antecedent_equalities() (neurolang.datalog.chase.relational_algebra.chasenamedrelationalalgebramixin method)": [[23, "neurolang.datalog.chase.relational_algebra.ChaseNamedRelationalAlgebraMixin.rewrite_antecedent_equalities"]], "rewrite_constants_in_consequent() (neurolang.datalog.chase.relational_algebra.chasenamedrelationalalgebramixin method)": [[23, "neurolang.datalog.chase.relational_algebra.ChaseNamedRelationalAlgebraMixin.rewrite_constants_in_consequent"]], "rewrite_rule_consequent_constants_to_equalities() (neurolang.datalog.chase.relational_algebra.chasenamedrelationalalgebramixin static method)": [[23, "neurolang.datalog.chase.relational_algebra.ChaseNamedRelationalAlgebraMixin.rewrite_rule_consequent_constants_to_equalities"]], "translate_conjunction_to_named_ra() (neurolang.datalog.chase.relational_algebra.chasenamedrelationalalgebramixin method)": [[23, "neurolang.datalog.chase.relational_algebra.ChaseNamedRelationalAlgebraMixin.translate_conjunction_to_named_ra"]], "translate_predicate() (neurolang.datalog.chase.relational_algebra.chaserelationalalgebrapluscerimixin method)": [[23, "neurolang.datalog.chase.relational_algebra.ChaseRelationalAlgebraPlusCeriMixin.translate_predicate"]], "translate_predicate_process_argument() (neurolang.datalog.chase.relational_algebra.chaserelationalalgebrapluscerimixin method)": [[23, "neurolang.datalog.chase.relational_algebra.ChaseRelationalAlgebraPlusCeriMixin.translate_predicate_process_argument"]], "translate_predicate_process_argument_symbol() (neurolang.datalog.chase.relational_algebra.chaserelationalalgebrapluscerimixin method)": [[23, "neurolang.datalog.chase.relational_algebra.ChaseRelationalAlgebraPlusCeriMixin.translate_predicate_process_argument_symbol"]], "translate_to_ra_plus() (neurolang.datalog.chase.relational_algebra.chaserelationalalgebrapluscerimixin method)": [[23, "neurolang.datalog.chase.relational_algebra.ChaseRelationalAlgebraPlusCeriMixin.translate_to_ra_plus"]], "type (neurolang.datalog.chase.relational_algebra.namedrelationalalgebraoptimiser attribute)": [[23, "neurolang.datalog.chase.relational_algebra.NamedRelationalAlgebraOptimiser.type"]], "datalogconstraintsmixin (class in neurolang.datalog.constraints_representation)": [[24, "neurolang.datalog.constraints_representation.DatalogConstraintsMixin"]], "datalogconstraintsprogram (class in neurolang.datalog.constraints_representation)": [[24, "neurolang.datalog.constraints_representation.DatalogConstraintsProgram"]], "rightimplication (class in neurolang.datalog.constraints_representation)": [[24, "neurolang.datalog.constraints_representation.RightImplication"]], "add_existential_rules() (neurolang.datalog.constraints_representation.datalogconstraintsmixin method)": [[24, "neurolang.datalog.constraints_representation.DatalogConstraintsMixin.add_existential_rules"]], "add_logic_constraint() (neurolang.datalog.constraints_representation.datalogconstraintsmixin method)": [[24, "neurolang.datalog.constraints_representation.DatalogConstraintsMixin.add_logic_constraint"]], "categorized_constraints (neurolang.datalog.constraints_representation.datalogconstraintsmixin attribute)": [[24, "neurolang.datalog.constraints_representation.DatalogConstraintsMixin.categorized_constraints"]], "constraints() (neurolang.datalog.constraints_representation.datalogconstraintsmixin method)": [[24, "neurolang.datalog.constraints_representation.DatalogConstraintsMixin.constraints"]], "existential_rules (neurolang.datalog.constraints_representation.datalogconstraintsmixin attribute)": [[24, "neurolang.datalog.constraints_representation.DatalogConstraintsMixin.existential_rules"]], "get_constraints() (neurolang.datalog.constraints_representation.datalogconstraintsmixin method)": [[24, "neurolang.datalog.constraints_representation.DatalogConstraintsMixin.get_constraints"]], "neurolang.datalog.constraints_representation": [[24, "module-neurolang.datalog.constraints_representation"]], "protected_keywords (neurolang.datalog.constraints_representation.datalogconstraintsmixin attribute)": [[24, "neurolang.datalog.constraints_representation.DatalogConstraintsMixin.protected_keywords"]], "protected_keywords (neurolang.datalog.constraints_representation.datalogconstraintsprogram attribute)": [[24, "neurolang.datalog.constraints_representation.DatalogConstraintsProgram.protected_keywords"]], "reachable_code() (in module neurolang.datalog.constraints_representation)": [[24, "neurolang.datalog.constraints_representation.reachable_code"]], "set_constraints() (neurolang.datalog.constraints_representation.datalogconstraintsmixin method)": [[24, "neurolang.datalog.constraints_representation.DatalogConstraintsMixin.set_constraints"]], "type (neurolang.datalog.constraints_representation.datalogconstraintsmixin attribute)": [[24, "neurolang.datalog.constraints_representation.DatalogConstraintsMixin.type"]], "type (neurolang.datalog.constraints_representation.datalogconstraintsprogram attribute)": [[24, "neurolang.datalog.constraints_representation.DatalogConstraintsProgram.type"]], "type (neurolang.datalog.constraints_representation.rightimplication attribute)": [[24, "neurolang.datalog.constraints_representation.RightImplication.type"]], "aggregatedvariablereplacedbyconstanterror": [[25, "neurolang.datalog.exceptions.AggregatedVariableReplacedByConstantError"]], "boundaggregationapplicationerror": [[25, "neurolang.datalog.exceptions.BoundAggregationApplicationError"]], "invalidmagicseterror": [[25, "neurolang.datalog.exceptions.InvalidMagicSetError"]], "negationinmagicsetsrewriteerror": [[25, "neurolang.datalog.exceptions.NegationInMagicSetsRewriteError"]], "noconstantpredicatefounderror": [[25, "neurolang.datalog.exceptions.NoConstantPredicateFoundError"]], "nonconjunctiveantecedentinmagicsetserror": [[25, "neurolang.datalog.exceptions.NonConjunctiveAntecedentInMagicSetsError"]], "neurolang.datalog.exceptions": [[25, "module-neurolang.datalog.exceptions"]], "collapseconjunctiveantecedents (class in neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.CollapseConjunctiveAntecedents"]], "equalitysymbollefthandsidenormalisemixin (class in neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.EqualitySymbolLeftHandSideNormaliseMixin"]], "flattenqueryinnonrecursiveucq (class in neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.FlattenQueryInNonRecursiveUCQ"]], "freshenfreevariables (class in neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.FreshenFreeVariables"]], "headconstanttobodyequality (class in neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.HeadConstantToBodyEquality"]], "headrepeatedvariabletobodyequality (class in neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.HeadRepeatedVariableToBodyEquality"]], "removeduplicatedantecedentpredicates (class in neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.RemoveDuplicatedAntecedentPredicates"]], "translatetodatalogsemantics (class in neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.TranslateToDatalogSemantics"]], "unifyvariableequalities (class in neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.UnifyVariableEqualities"]], "unifyvariableequalitiesmixin (class in neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.UnifyVariableEqualitiesMixin"]], "add_equality_with_constant() (neurolang.datalog.expression_processing.unifyvariableequalitiesmixin static method)": [[26, "neurolang.datalog.expression_processing.UnifyVariableEqualitiesMixin.add_equality_with_constant"]], "add_equality_with_symbol() (neurolang.datalog.expression_processing.unifyvariableequalitiesmixin static method)": [[26, "neurolang.datalog.expression_processing.UnifyVariableEqualitiesMixin.add_equality_with_symbol"]], "all_body_preds_in_set() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.all_body_preds_in_set"]], "any_body_preds_in_set() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.any_body_preds_in_set"]], "build_substitutions_from_equalities() (neurolang.datalog.expression_processing.unifyvariableequalitiesmixin static method)": [[26, "neurolang.datalog.expression_processing.UnifyVariableEqualitiesMixin.build_substitutions_from_equalities"]], "builtin_application() (neurolang.datalog.expression_processing.flattenqueryinnonrecursiveucq method)": [[26, "neurolang.datalog.expression_processing.FlattenQueryInNonRecursiveUCQ.builtin_application"]], "conjunct_formulas() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.conjunct_formulas"]], "conjunct_if_needed() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.conjunct_if_needed"]], "conjunction() (neurolang.datalog.expression_processing.flattenqueryinnonrecursiveucq method)": [[26, "neurolang.datalog.expression_processing.FlattenQueryInNonRecursiveUCQ.conjunction"]], "dependency_matrix() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.dependency_matrix"]], "enforce_conjunctive_antecedent() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.enforce_conjunctive_antecedent"]], "extract_and_unify_var_eqs_in_implication() (neurolang.datalog.expression_processing.unifyvariableequalitiesmixin method)": [[26, "neurolang.datalog.expression_processing.UnifyVariableEqualitiesMixin.extract_and_unify_var_eqs_in_implication"]], "extract_logic_atoms() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.extract_logic_atoms"]], "extract_logic_free_variables() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.extract_logic_free_variables"]], "extract_logic_predicates() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.extract_logic_predicates"]], "extract_variable_equalities() (neurolang.datalog.expression_processing.unifyvariableequalitiesmixin static method)": [[26, "neurolang.datalog.expression_processing.UnifyVariableEqualitiesMixin.extract_variable_equalities"]], "flatten_query() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.flatten_query"]], "implication_has_existential_variable_in_antecedent() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.implication_has_existential_variable_in_antecedent"]], "implication_with_collapsable_conjunctive_antecedent() (neurolang.datalog.expression_processing.collapseconjunctiveantecedents method)": [[26, "neurolang.datalog.expression_processing.CollapseConjunctiveAntecedents.implication_with_collapsable_conjunctive_antecedent"]], "implication_with_constant_term_in_head() (neurolang.datalog.expression_processing.headconstanttobodyequality method)": [[26, "neurolang.datalog.expression_processing.HeadConstantToBodyEquality.implication_with_constant_term_in_head"]], "implication_with_duplicated_antecedent_predicate() (neurolang.datalog.expression_processing.removeduplicatedantecedentpredicates method)": [[26, "neurolang.datalog.expression_processing.RemoveDuplicatedAntecedentPredicates.implication_with_duplicated_antecedent_predicate"]], "implication_with_free_variables() (neurolang.datalog.expression_processing.freshenfreevariables method)": [[26, "neurolang.datalog.expression_processing.FreshenFreeVariables.implication_with_free_variables"]], "implication_with_repeated_variable_in_head() (neurolang.datalog.expression_processing.headrepeatedvariabletobodyequality method)": [[26, "neurolang.datalog.expression_processing.HeadRepeatedVariableToBodyEquality.implication_with_repeated_variable_in_head"]], "is_aggregation_predicate() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.is_aggregation_predicate"]], "is_aggregation_rule() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.is_aggregation_rule"]], "is_conjunctive_expression() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.is_conjunctive_expression"]], "is_conjunctive_expression_with_nested_predicates() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.is_conjunctive_expression_with_nested_predicates"]], "is_ground_predicate() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.is_ground_predicate"]], "is_linear_rule() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.is_linear_rule"]], "is_rule_with_builtin() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.is_rule_with_builtin"]], "is_symb_to_const_equality() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.is_symb_to_const_equality"]], "is_to_be_sorted_equality() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.is_to_be_sorted_equality"]], "is_var_equality_to_var_or_const() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.is_var_equality_to_var_or_const"]], "maybe_deconjunct_single_pred() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.maybe_deconjunct_single_pred"]], "maybe_disjunct() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.maybe_disjunct"]], "negation() (neurolang.datalog.expression_processing.flattenqueryinnonrecursiveucq method)": [[26, "neurolang.datalog.expression_processing.FlattenQueryInNonRecursiveUCQ.negation"]], "negation_function_application() (neurolang.datalog.expression_processing.flattenqueryinnonrecursiveucq method)": [[26, "neurolang.datalog.expression_processing.FlattenQueryInNonRecursiveUCQ.negation_function_application"]], "neurolang.datalog.expression_processing": [[26, "module-neurolang.datalog.expression_processing"]], "program_has_loops() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.program_has_loops"]], "query_predicate() (neurolang.datalog.expression_processing.flattenqueryinnonrecursiveucq method)": [[26, "neurolang.datalog.expression_processing.FlattenQueryInNonRecursiveUCQ.query_predicate"]], "reachable_code() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.reachable_code"]], "remove_conjunction_duplicates() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.remove_conjunction_duplicates"]], "reverse_equality() (neurolang.datalog.expression_processing.equalitysymbollefthandsidenormalisemixin static method)": [[26, "neurolang.datalog.expression_processing.EqualitySymbolLeftHandSideNormaliseMixin.reverse_equality"]], "sort_antecedent_equalities() (neurolang.datalog.expression_processing.equalitysymbollefthandsidenormalisemixin method)": [[26, "neurolang.datalog.expression_processing.EqualitySymbolLeftHandSideNormaliseMixin.sort_antecedent_equalities"]], "stratify() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.stratify"]], "stratify_obtain_facts_stratum() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.stratify_obtain_facts_stratum"]], "stratify_obtain_new_stratum() (in module neurolang.datalog.expression_processing)": [[26, "neurolang.datalog.expression_processing.stratify_obtain_new_stratum"]], "type (neurolang.datalog.expression_processing.collapseconjunctiveantecedents attribute)": [[26, "neurolang.datalog.expression_processing.CollapseConjunctiveAntecedents.type"]], "type (neurolang.datalog.expression_processing.equalitysymbollefthandsidenormalisemixin attribute)": [[26, "neurolang.datalog.expression_processing.EqualitySymbolLeftHandSideNormaliseMixin.type"]], "type (neurolang.datalog.expression_processing.flattenqueryinnonrecursiveucq attribute)": [[26, "neurolang.datalog.expression_processing.FlattenQueryInNonRecursiveUCQ.type"]], "type (neurolang.datalog.expression_processing.freshenfreevariables attribute)": [[26, "neurolang.datalog.expression_processing.FreshenFreeVariables.type"]], "type (neurolang.datalog.expression_processing.headconstanttobodyequality attribute)": [[26, "neurolang.datalog.expression_processing.HeadConstantToBodyEquality.type"]], "type (neurolang.datalog.expression_processing.headrepeatedvariabletobodyequality attribute)": [[26, "neurolang.datalog.expression_processing.HeadRepeatedVariableToBodyEquality.type"]], "type (neurolang.datalog.expression_processing.removeduplicatedantecedentpredicates attribute)": [[26, "neurolang.datalog.expression_processing.RemoveDuplicatedAntecedentPredicates.type"]], "type (neurolang.datalog.expression_processing.translatetodatalogsemantics attribute)": [[26, "neurolang.datalog.expression_processing.TranslateToDatalogSemantics.type"]], "type (neurolang.datalog.expression_processing.unifyvariableequalities attribute)": [[26, "neurolang.datalog.expression_processing.UnifyVariableEqualities.type"]], "type (neurolang.datalog.expression_processing.unifyvariableequalitiesmixin attribute)": [[26, "neurolang.datalog.expression_processing.UnifyVariableEqualitiesMixin.type"]], "conjunction (class in neurolang.datalog.expressions)": [[27, "neurolang.datalog.expressions.Conjunction"]], "fact (class in neurolang.datalog.expressions)": [[27, "neurolang.datalog.expressions.Fact"]], "implication (class in neurolang.datalog.expressions)": [[27, "neurolang.datalog.expressions.Implication"]], "negation (class in neurolang.datalog.expressions)": [[27, "neurolang.datalog.expressions.Negation"]], "translatetologic (class in neurolang.datalog.expressions)": [[27, "neurolang.datalog.expressions.TranslateToLogic"]], "unarylogicoperator (class in neurolang.datalog.expressions)": [[27, "neurolang.datalog.expressions.UnaryLogicOperator"]], "union (class in neurolang.datalog.expressions)": [[27, "neurolang.datalog.expressions.Union"]], "build_conjunction_from_expression_block() (neurolang.datalog.expressions.translatetologic method)": [[27, "neurolang.datalog.expressions.TranslateToLogic.build_conjunction_from_expression_block"]], "fact (neurolang.datalog.expressions.fact property)": [[27, "neurolang.datalog.expressions.Fact.fact"]], "neurolang.datalog.expressions": [[27, "module-neurolang.datalog.expressions"]], "translate_true_implication() (neurolang.datalog.expressions.translatetologic method)": [[27, "neurolang.datalog.expressions.TranslateToLogic.translate_true_implication"]], "type (neurolang.datalog.expressions.conjunction attribute)": [[27, "neurolang.datalog.expressions.Conjunction.type"]], "type (neurolang.datalog.expressions.fact attribute)": [[27, "neurolang.datalog.expressions.Fact.type"]], "type (neurolang.datalog.expressions.implication attribute)": [[27, "neurolang.datalog.expressions.Implication.type"]], "type (neurolang.datalog.expressions.negation attribute)": [[27, "neurolang.datalog.expressions.Negation.type"]], "type (neurolang.datalog.expressions.translatetologic attribute)": [[27, "neurolang.datalog.expressions.TranslateToLogic.type"]], "type (neurolang.datalog.expressions.unarylogicoperator attribute)": [[27, "neurolang.datalog.expressions.UnaryLogicOperator.type"]], "type (neurolang.datalog.expressions.union attribute)": [[27, "neurolang.datalog.expressions.Union.type"]], "frozeninstance (class in neurolang.datalog.instance)": [[28, "neurolang.datalog.instance.FrozenInstance"]], "frozenmapinstance (class in neurolang.datalog.instance)": [[28, "neurolang.datalog.instance.FrozenMapInstance"]], "frozensetinstance (class in neurolang.datalog.instance)": [[28, "neurolang.datalog.instance.FrozenSetInstance"]], "instance (class in neurolang.datalog.instance)": [[28, "neurolang.datalog.instance.Instance"]], "mapinstance (class in neurolang.datalog.instance)": [[28, "neurolang.datalog.instance.MapInstance"]], "setinstance (class in neurolang.datalog.instance)": [[28, "neurolang.datalog.instance.SetInstance"]], "add() (neurolang.datalog.instance.setinstance method)": [[28, "neurolang.datalog.instance.SetInstance.add"]], "as_map() (neurolang.datalog.instance.frozenmapinstance method)": [[28, "neurolang.datalog.instance.FrozenMapInstance.as_map"]], "as_map() (neurolang.datalog.instance.frozensetinstance method)": [[28, "neurolang.datalog.instance.FrozenSetInstance.as_map"]], "as_map() (neurolang.datalog.instance.mapinstance method)": [[28, "neurolang.datalog.instance.MapInstance.as_map"]], "as_map() (neurolang.datalog.instance.setinstance method)": [[28, "neurolang.datalog.instance.SetInstance.as_map"]], "as_set() (neurolang.datalog.instance.frozenmapinstance method)": [[28, "neurolang.datalog.instance.FrozenMapInstance.as_set"]], "as_set() (neurolang.datalog.instance.frozensetinstance method)": [[28, "neurolang.datalog.instance.FrozenSetInstance.as_set"]], "as_set() (neurolang.datalog.instance.mapinstance method)": [[28, "neurolang.datalog.instance.MapInstance.as_set"]], "as_set() (neurolang.datalog.instance.setinstance method)": [[28, "neurolang.datalog.instance.SetInstance.as_set"]], "copy() (neurolang.datalog.instance.frozeninstance method)": [[28, "neurolang.datalog.instance.FrozenInstance.copy"]], "copy() (neurolang.datalog.instance.instance method)": [[28, "neurolang.datalog.instance.Instance.copy"]], "discard() (neurolang.datalog.instance.setinstance method)": [[28, "neurolang.datalog.instance.SetInstance.discard"]], "is_empty() (neurolang.datalog.instance.frozeninstance method)": [[28, "neurolang.datalog.instance.FrozenInstance.is_empty"]], "items() (neurolang.datalog.instance.frozenmapinstance method)": [[28, "neurolang.datalog.instance.FrozenMapInstance.items"]], "neurolang.datalog.instance": [[28, "module-neurolang.datalog.instance"]], "values() (neurolang.datalog.instance.frozenmapinstance method)": [[28, "neurolang.datalog.instance.FrozenMapInstance.values"]], "adornedsymbol (class in neurolang.datalog.magic_sets)": [[29, "neurolang.datalog.magic_sets.AdornedSymbol"]], "lefttorightsips (class in neurolang.datalog.magic_sets)": [[29, "neurolang.datalog.magic_sets.LeftToRightSIPS"]], "replaceadornedsymbolwalker (class in neurolang.datalog.magic_sets)": [[29, "neurolang.datalog.magic_sets.ReplaceAdornedSymbolWalker"]], "sips (class in neurolang.datalog.magic_sets)": [[29, "neurolang.datalog.magic_sets.SIPS"]], "adorn_antecedent() (in module neurolang.datalog.magic_sets)": [[29, "neurolang.datalog.magic_sets.adorn_antecedent"]], "adorn_code() (in module neurolang.datalog.magic_sets)": [[29, "neurolang.datalog.magic_sets.adorn_code"]], "create_balbin_magic_rules() (in module neurolang.datalog.magic_sets)": [[29, "neurolang.datalog.magic_sets.create_balbin_magic_rules"]], "create_magic_query_inits() (in module neurolang.datalog.magic_sets)": [[29, "neurolang.datalog.magic_sets.create_magic_query_inits"]], "creates_arcs() (neurolang.datalog.magic_sets.sips method)": [[29, "neurolang.datalog.magic_sets.SIPS.creates_arcs"]], "edb_with_prob_symbols() (in module neurolang.datalog.magic_sets)": [[29, "neurolang.datalog.magic_sets.edb_with_prob_symbols"]], "implication() (neurolang.datalog.magic_sets.replaceadornedsymbolwalker method)": [[29, "neurolang.datalog.magic_sets.ReplaceAdornedSymbolWalker.implication"]], "magic_predicate() (in module neurolang.datalog.magic_sets)": [[29, "neurolang.datalog.magic_sets.magic_predicate"]], "magic_rewrite() (in module neurolang.datalog.magic_sets)": [[29, "neurolang.datalog.magic_sets.magic_rewrite"]], "name (neurolang.datalog.magic_sets.adornedsymbol property)": [[29, "neurolang.datalog.magic_sets.AdornedSymbol.name"]], "neurolang.datalog.magic_sets": [[29, "module-neurolang.datalog.magic_sets"]], "reachable_adorned_code() (in module neurolang.datalog.magic_sets)": [[29, "neurolang.datalog.magic_sets.reachable_adorned_code"]], "replace_adorned_symbol() (neurolang.datalog.magic_sets.replaceadornedsymbolwalker method)": [[29, "neurolang.datalog.magic_sets.ReplaceAdornedSymbolWalker.replace_adorned_symbol"]], "type (neurolang.datalog.magic_sets.adornedsymbol attribute)": [[29, "neurolang.datalog.magic_sets.AdornedSymbol.type"]], "type (neurolang.datalog.magic_sets.replaceadornedsymbolwalker attribute)": [[29, "neurolang.datalog.magic_sets.ReplaceAdornedSymbolWalker.type"]], "datalogprogramnegation (class in neurolang.datalog.negation)": [[30, "neurolang.datalog.negation.DatalogProgramNegation"]], "datalogprogramnegationmixin (class in neurolang.datalog.negation)": [[30, "neurolang.datalog.negation.DatalogProgramNegationMixin"]], "negativefact (class in neurolang.datalog.negation)": [[30, "neurolang.datalog.negation.NegativeFact"]], "fact (neurolang.datalog.negation.negativefact property)": [[30, "neurolang.datalog.negation.NegativeFact.fact"]], "is_conjunctive_negation() (in module neurolang.datalog.negation)": [[30, "neurolang.datalog.negation.is_conjunctive_negation"]], "negation_constant() (neurolang.datalog.negation.datalogprogramnegationmixin method)": [[30, "neurolang.datalog.negation.DatalogProgramNegationMixin.negation_constant"]], "negative_fact() (neurolang.datalog.negation.datalogprogramnegationmixin method)": [[30, "neurolang.datalog.negation.DatalogProgramNegationMixin.negative_fact"]], "neurolang.datalog.negation": [[30, "module-neurolang.datalog.negation"]], "protected_keywords (neurolang.datalog.negation.datalogprogramnegation attribute)": [[30, "neurolang.datalog.negation.DatalogProgramNegation.protected_keywords"]], "statement_intensional() (neurolang.datalog.negation.datalogprogramnegationmixin method)": [[30, "neurolang.datalog.negation.DatalogProgramNegationMixin.statement_intensional"]], "type (neurolang.datalog.negation.datalogprogramnegation attribute)": [[30, "neurolang.datalog.negation.DatalogProgramNegation.type"]], "type (neurolang.datalog.negation.datalogprogramnegationmixin attribute)": [[30, "neurolang.datalog.negation.DatalogProgramNegationMixin.type"]], "type (neurolang.datalog.negation.negativefact attribute)": [[30, "neurolang.datalog.negation.NegativeFact.type"]], "ontologyparser (class in neurolang.datalog.ontologies_parser)": [[31, "neurolang.datalog.ontologies_parser.OntologyParser"]], "neurolang.datalog.ontologies_parser": [[31, "module-neurolang.datalog.ontologies_parser"]], "parse_ontology() (neurolang.datalog.ontologies_parser.ontologyparser method)": [[31, "neurolang.datalog.ontologies_parser.OntologyParser.parse_ontology"]], "extractfreevariablesrightimplicationwalker (class in neurolang.datalog.ontologies_rewriter)": [[32, "neurolang.datalog.ontologies_rewriter.ExtractFreeVariablesRightImplicationWalker"]], "ontologyrewriter (class in neurolang.datalog.ontologies_rewriter)": [[32, "neurolang.datalog.ontologies_rewriter.OntologyRewriter"]], "xrewrite() (neurolang.datalog.ontologies_rewriter.ontologyrewriter method)": [[32, "neurolang.datalog.ontologies_rewriter.OntologyRewriter.Xrewrite"]], "extract_variables_s() (neurolang.datalog.ontologies_rewriter.extractfreevariablesrightimplicationwalker method)": [[32, "neurolang.datalog.ontologies_rewriter.ExtractFreeVariablesRightImplicationWalker.extract_variables_s"]], "factorization_step() (neurolang.datalog.ontologies_rewriter.ontologyrewriter method)": [[32, "neurolang.datalog.ontologies_rewriter.OntologyRewriter.factorization_step"]], "neurolang.datalog.ontologies_rewriter": [[32, "module-neurolang.datalog.ontologies_rewriter"]], "rewriting_step() (neurolang.datalog.ontologies_rewriter.ontologyrewriter method)": [[32, "neurolang.datalog.ontologies_rewriter.OntologyRewriter.rewriting_step"]], "type (neurolang.datalog.ontologies_rewriter.extractfreevariablesrightimplicationwalker attribute)": [[32, "neurolang.datalog.ontologies_rewriter.ExtractFreeVariablesRightImplicationWalker.type"]], "translatetonamedra (class in neurolang.datalog.translate_to_named_ra)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA"]], "classify_formulas_obtain_named_function_applications() (neurolang.datalog.translate_to_named_ra.translatetonamedra method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.classify_formulas_obtain_named_function_applications"]], "classify_formulas_obtain_names() (neurolang.datalog.translate_to_named_ra.translatetonamedra method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.classify_formulas_obtain_names"]], "generate_ra_expression() (neurolang.datalog.translate_to_named_ra.translatetonamedra method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.generate_ra_expression"]], "is_col_to_const_equality() (neurolang.datalog.translate_to_named_ra.translatetonamedra static method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.is_col_to_const_equality"]], "neurolang.datalog.translate_to_named_ra": [[33, "module-neurolang.datalog.translate_to_named_ra"]], "obtain_negative_columns() (neurolang.datalog.translate_to_named_ra.translatetonamedra static method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.obtain_negative_columns"]], "process_destroy_formulas() (neurolang.datalog.translate_to_named_ra.translatetonamedra static method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.process_destroy_formulas"]], "process_equality_formula() (neurolang.datalog.translate_to_named_ra.translatetonamedra static method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.process_equality_formula"]], "process_equality_formulas() (neurolang.datalog.translate_to_named_ra.translatetonamedra static method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.process_equality_formulas"]], "process_equality_formulas_as_extended_projections() (neurolang.datalog.translate_to_named_ra.translatetonamedra static method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.process_equality_formulas_as_extended_projections"]], "process_equality_formulas_constant() (neurolang.datalog.translate_to_named_ra.translatetonamedra static method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.process_equality_formulas_constant"]], "process_extended_projection_formulas() (neurolang.datalog.translate_to_named_ra.translatetonamedra static method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.process_extended_projection_formulas"]], "process_negative_formulas() (neurolang.datalog.translate_to_named_ra.translatetonamedra static method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.process_negative_formulas"]], "process_positive_formulas() (neurolang.datalog.translate_to_named_ra.translatetonamedra static method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.process_positive_formulas"]], "process_selection_formulas() (neurolang.datalog.translate_to_named_ra.translatetonamedra static method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.process_selection_formulas"]], "translate_builtin_fa() (neurolang.datalog.translate_to_named_ra.translatetonamedra method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.translate_builtin_fa"]], "translate_builtin_fa_constants() (neurolang.datalog.translate_to_named_ra.translatetonamedra method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.translate_builtin_fa_constants"]], "translate_conjunction() (neurolang.datalog.translate_to_named_ra.translatetonamedra method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.translate_conjunction"]], "translate_disjunction() (neurolang.datalog.translate_to_named_ra.translatetonamedra method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.translate_disjunction"]], "translate_eq() (neurolang.datalog.translate_to_named_ra.translatetonamedra method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.translate_eq"]], "translate_eq_c_c() (neurolang.datalog.translate_to_named_ra.translatetonamedra method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.translate_eq_c_c"]], "translate_eq_c_fa() (neurolang.datalog.translate_to_named_ra.translatetonamedra method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.translate_eq_c_fa"]], "translate_eq_c_s() (neurolang.datalog.translate_to_named_ra.translatetonamedra method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.translate_eq_c_s"]], "translate_eq_fa_s() (neurolang.datalog.translate_to_named_ra.translatetonamedra method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.translate_eq_fa_s"]], "translate_eq_s_c() (neurolang.datalog.translate_to_named_ra.translatetonamedra method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.translate_eq_s_c"]], "translate_existential_predicate() (neurolang.datalog.translate_to_named_ra.translatetonamedra method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.translate_existential_predicate"]], "translate_fa() (neurolang.datalog.translate_to_named_ra.translatetonamedra method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.translate_fa"]], "translate_negation() (neurolang.datalog.translate_to_named_ra.translatetonamedra method)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.translate_negation"]], "type (neurolang.datalog.translate_to_named_ra.translatetonamedra attribute)": [[33, "neurolang.datalog.translate_to_named_ra.TranslateToNamedRA.type"]], "wrappednamedrelationalalgebrafrozenset (class in neurolang.datalog.wrapped_collections)": [[34, "neurolang.datalog.wrapped_collections.WrappedNamedRelationalAlgebraFrozenSet"]], "wrappednamedrelationalalgebrafrozensetmixin (class in neurolang.datalog.wrapped_collections)": [[34, "neurolang.datalog.wrapped_collections.WrappedNamedRelationalAlgebraFrozenSetMixin"]], "wrappedrelationalalgebrafrozenset (class in neurolang.datalog.wrapped_collections)": [[34, "neurolang.datalog.wrapped_collections.WrappedRelationalAlgebraFrozenSet"]], "wrappedrelationalalgebrafrozensetmixin (class in neurolang.datalog.wrapped_collections)": [[34, "neurolang.datalog.wrapped_collections.WrappedRelationalAlgebraFrozenSetMixin"]], "wrappedrelationalalgebraset (class in neurolang.datalog.wrapped_collections)": [[34, "neurolang.datalog.wrapped_collections.WrappedRelationalAlgebraSet"]], "wrappedrelationalalgebrasetbasemixin (class in neurolang.datalog.wrapped_collections)": [[34, "neurolang.datalog.wrapped_collections.WrappedRelationalAlgebraSetBaseMixin"]], "wrappedrelationalalgebrasetmixin (class in neurolang.datalog.wrapped_collections)": [[34, "neurolang.datalog.wrapped_collections.WrappedRelationalAlgebraSetMixin"]], "wrappedtypemap (class in neurolang.datalog.wrapped_collections)": [[34, "neurolang.datalog.wrapped_collections.WrappedTypeMap"]], "add() (neurolang.datalog.wrapped_collections.wrappedrelationalalgebrasetmixin method)": [[34, "neurolang.datalog.wrapped_collections.WrappedRelationalAlgebraSetMixin.add"]], "backend_2_python() (neurolang.datalog.wrapped_collections.wrappedtypemap method)": [[34, "neurolang.datalog.wrapped_collections.WrappedTypeMap.backend_2_python"]], "discard() (neurolang.datalog.wrapped_collections.wrappedrelationalalgebrasetmixin method)": [[34, "neurolang.datalog.wrapped_collections.WrappedRelationalAlgebraSetMixin.discard"]], "is_constant_tuple_or_tuple_of_constants() (neurolang.datalog.wrapped_collections.wrappedrelationalalgebrasetbasemixin static method)": [[34, "neurolang.datalog.wrapped_collections.WrappedRelationalAlgebraSetBaseMixin.is_constant_tuple_or_tuple_of_constants"]], "named_tuple_as_dict() (in module neurolang.datalog.wrapped_collections)": [[34, "neurolang.datalog.wrapped_collections.named_tuple_as_dict"]], "neurolang.datalog.wrapped_collections": [[34, "module-neurolang.datalog.wrapped_collections"]], "row_maps (neurolang.datalog.wrapped_collections.wrappedtypemap attribute)": [[34, "neurolang.datalog.wrapped_collections.WrappedTypeMap.row_maps"]], "row_type (neurolang.datalog.wrapped_collections.wrappednamedrelationalalgebrafrozensetmixin property)": [[34, "neurolang.datalog.wrapped_collections.WrappedNamedRelationalAlgebraFrozenSetMixin.row_type"]], "row_type (neurolang.datalog.wrapped_collections.wrappedrelationalalgebrasetbasemixin property)": [[34, "neurolang.datalog.wrapped_collections.WrappedRelationalAlgebraSetBaseMixin.row_type"]], "unwrap() (neurolang.datalog.wrapped_collections.wrappednamedrelationalalgebrafrozenset method)": [[34, "neurolang.datalog.wrapped_collections.WrappedNamedRelationalAlgebraFrozenSet.unwrap"]], "unwrap() (neurolang.datalog.wrapped_collections.wrappedrelationalalgebrafrozenset method)": [[34, "neurolang.datalog.wrapped_collections.WrappedRelationalAlgebraFrozenSet.unwrap"]], "unwrap() (neurolang.datalog.wrapped_collections.wrappedrelationalalgebraset method)": [[34, "neurolang.datalog.wrapped_collections.WrappedRelationalAlgebraSet.unwrap"]], "unwrapped_iter() (neurolang.datalog.wrapped_collections.wrappedrelationalalgebrasetbasemixin method)": [[34, "neurolang.datalog.wrapped_collections.WrappedRelationalAlgebraSetBaseMixin.unwrapped_iter"]], "chasenode (class in neurolang.datalog_chase)": [[35, "neurolang.datalog_chase.ChaseNode"]], "datalogchase (in module neurolang.datalog_chase)": [[35, "neurolang.datalog_chase.DatalogChase"]], "datalogchasegeneral (class in neurolang.datalog_chase)": [[35, "neurolang.datalog_chase.DatalogChaseGeneral"]], "datalogchasemgumixin (in module neurolang.datalog_chase)": [[35, "neurolang.datalog_chase.DatalogChaseMGUMixin"]], "datalogchaserelationalalgebramixin (in module neurolang.datalog_chase)": [[35, "neurolang.datalog_chase.DatalogChaseRelationalAlgebraMixin"]], "children (neurolang.datalog_chase.chasenode attribute)": [[35, "neurolang.datalog_chase.ChaseNode.children"]], "instance (neurolang.datalog_chase.chasenode attribute)": [[35, "neurolang.datalog_chase.ChaseNode.instance"]], "neurolang.datalog_chase": [[35, "module-neurolang.datalog_chase"]], "neurolang.exceptions": [[36, "module-neurolang.exceptions"]], "neurolang.expression_pattern_matching": [[37, "module-neurolang.expression_pattern_matching"]], "neurolang.expression_walker": [[38, "module-neurolang.expression_walker"]], "neurolang.expressions": [[39, "module-neurolang.expressions"]], "explicitvbr (class in neurolang.frontend)": [[40, "neurolang.frontend.ExplicitVBR"]], "explicitvbroverlay (class in neurolang.frontend)": [[40, "neurolang.frontend.ExplicitVBROverlay"]], "neurolangdl (class in neurolang.frontend)": [[40, "neurolang.frontend.NeurolangDL"]], "neurolangpdl (class in neurolang.frontend)": [[40, "neurolang.frontend.NeurolangPDL"]], "symbol (class in neurolang.frontend)": [[40, "neurolang.frontend.Symbol"]], "aabb_tree (neurolang.frontend.explicitvbr property)": [[40, "neurolang.frontend.ExplicitVBR.aabb_tree"]], "add_probabilistic_choice_from_tuples() (neurolang.frontend.neurolangpdl method)": [[40, "neurolang.frontend.NeurolangPDL.add_probabilistic_choice_from_tuples"]], "add_probabilistic_facts_from_tuples() (neurolang.frontend.neurolangpdl method)": [[40, "neurolang.frontend.NeurolangPDL.add_probabilistic_facts_from_tuples"]], "add_uniform_probabilistic_choice_over_set() (neurolang.frontend.neurolangpdl method)": [[40, "neurolang.frontend.NeurolangPDL.add_uniform_probabilistic_choice_over_set"]], "bounding_box (neurolang.frontend.explicitvbr property)": [[40, "neurolang.frontend.ExplicitVBR.bounding_box"]], "build_tree() (neurolang.frontend.explicitvbr method)": [[40, "neurolang.frontend.ExplicitVBR.build_tree"]], "current_program (neurolang.frontend.neurolangpdl property)": [[40, "neurolang.frontend.NeurolangPDL.current_program"]], "expression (neurolang.frontend.symbol property)": [[40, "neurolang.frontend.Symbol.expression"]], "generate_bounding_box() (neurolang.frontend.explicitvbr method)": [[40, "neurolang.frontend.ExplicitVBR.generate_bounding_box"]], "load_ontology() (neurolang.frontend.neurolangpdl method)": [[40, "neurolang.frontend.NeurolangPDL.load_ontology"]], "neurolang.frontend": [[40, "module-neurolang.frontend"]], "neurolang_symbol (neurolang.frontend.symbol property)": [[40, "neurolang.frontend.Symbol.neurolang_symbol"]], "solve_all() (neurolang.frontend.neurolangpdl method)": [[40, "neurolang.frontend.NeurolangPDL.solve_all"]], "spatial_image() (neurolang.frontend.explicitvbr method)": [[40, "neurolang.frontend.ExplicitVBR.spatial_image"]], "spatial_image() (neurolang.frontend.explicitvbroverlay method)": [[40, "neurolang.frontend.ExplicitVBROverlay.spatial_image"]], "symbol (neurolang.frontend.symbol property)": [[40, "neurolang.frontend.Symbol.symbol"]], "to_ijk() (neurolang.frontend.explicitvbr method)": [[40, "neurolang.frontend.ExplicitVBR.to_ijk"]], "to_xyz() (neurolang.frontend.explicitvbr method)": [[40, "neurolang.frontend.ExplicitVBR.to_xyz"]], "value (neurolang.frontend.symbol property)": [[40, "neurolang.frontend.Symbol.value"]], "astnode (class in neurolang.frontend.ast)": [[41, "neurolang.frontend.ast.ASTNode"]], "astwalker (class in neurolang.frontend.ast)": [[41, "neurolang.frontend.ast.ASTWalker"]], "evaluate() (neurolang.frontend.ast.astwalker method)": [[41, "neurolang.frontend.ast.ASTWalker.evaluate"]], "neurolang.frontend.ast": [[41, "module-neurolang.frontend.ast"]], "larkastconverter (class in neurolang.frontend.ast_lark)": [[42, "neurolang.frontend.ast_lark.LarkASTConverter"]], "neurolang.frontend.ast_lark": [[42, "module-neurolang.frontend.ast_lark"]], "neurolang.frontend.datalog": [[43, "module-neurolang.frontend.datalog"]], "datalogtransformer (class in neurolang.frontend.datalog.standard_syntax)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer"]], "externalsymbol (class in neurolang.frontend.datalog.standard_syntax)": [[44, "neurolang.frontend.datalog.standard_syntax.ExternalSymbol"]], "argument() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.argument"]], "arguments() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.arguments"]], "cmd_args() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.cmd_args"]], "cmd_identifier() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.cmd_identifier"]], "command() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.command"]], "comparison() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.comparison"]], "condition() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.condition"]], "conjunction() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.conjunction"]], "constant_predicate() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.constant_predicate"]], "constraint() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.constraint"]], "div_term() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.div_term"]], "existential_predicate() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.existential_predicate"]], "expressions() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.expressions"]], "ext_identifier() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.ext_identifier"]], "fact() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.fact"]], "factor() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.factor"]], "head_predicate() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.head_predicate"]], "id_application() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.id_application"]], "identifier() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.identifier"]], "identifier_regexp() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.identifier_regexp"]], "keyword_args() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.keyword_args"]], "keyword_item() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.keyword_item"]], "lambda_application() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.lambda_application"]], "lambda_expression() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.lambda_expression"]], "minus_op() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.minus_op"]], "minus_signed_id() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.minus_signed_id"]], "mul_term() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.mul_term"]], "neg_float() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.neg_float"]], "neg_int() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.neg_int"]], "negated_predicate() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.negated_predicate"]], "neurolang.frontend.datalog.standard_syntax": [[44, "module-neurolang.frontend.datalog.standard_syntax"]], "parse_rules() (in module neurolang.frontend.datalog.standard_syntax)": [[44, "neurolang.frontend.datalog.standard_syntax.parse_rules"]], "parser() (in module neurolang.frontend.datalog.standard_syntax)": [[44, "neurolang.frontend.datalog.standard_syntax.parser"]], "plus_op() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.plus_op"]], "pos_args() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.pos_args"]], "pos_float() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.pos_float"]], "pos_int() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.pos_int"]], "pos_item() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.pos_item"]], "pow_factor() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.pow_factor"]], "predicate() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.predicate"]], "probabilistic_fact() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.probabilistic_fact"]], "probabilistic_rule() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.probabilistic_rule"]], "query() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.query"]], "rule() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.rule"]], "signed_int_ext_identifier() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.signed_int_ext_identifier"]], "sing_factor() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.sing_factor"]], "sing_op() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.sing_op"]], "sing_term() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.sing_term"]], "start() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.start"]], "statement() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.statement"]], "statement_function() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.statement_function"]], "term() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.term"]], "text() (neurolang.frontend.datalog.standard_syntax.datalogtransformer method)": [[44, "neurolang.frontend.datalog.standard_syntax.DatalogTransformer.text"]], "type (neurolang.frontend.datalog.standard_syntax.externalsymbol attribute)": [[44, "neurolang.frontend.datalog.standard_syntax.ExternalSymbol.type"]], "column (class in neurolang.frontend.datalog.sugar)": [[45, "neurolang.frontend.datalog.sugar.Column"]], "convertattrstoselectbycolumn (class in neurolang.frontend.datalog.sugar)": [[45, "neurolang.frontend.datalog.sugar.ConvertAttrSToSelectByColumn"]], "recognisessugar (class in neurolang.frontend.datalog.sugar)": [[45, "neurolang.frontend.datalog.sugar.RecogniseSSugar"]], "selectbyfirstcolumn (class in neurolang.frontend.datalog.sugar)": [[45, "neurolang.frontend.datalog.sugar.SelectByFirstColumn"]], "translatecolumnstoatoms (class in neurolang.frontend.datalog.sugar)": [[45, "neurolang.frontend.datalog.sugar.TranslateColumnsToAtoms"]], "translateheadconstantstoequalities (class in neurolang.frontend.datalog.sugar)": [[45, "neurolang.frontend.datalog.sugar.TranslateHeadConstantsToEqualities"]], "translateprobabilisticquerymixin (class in neurolang.frontend.datalog.sugar)": [[45, "neurolang.frontend.datalog.sugar.TranslateProbabilisticQueryMixin"]], "translatequerybasedprobabilisticfactmixin (class in neurolang.frontend.datalog.sugar)": [[45, "neurolang.frontend.datalog.sugar.TranslateQueryBasedProbabilisticFactMixin"]], "translatessugartoselectbycolumn (class in neurolang.frontend.datalog.sugar)": [[45, "neurolang.frontend.datalog.sugar.TranslateSSugarToSelectByColumn"]], "translateselectbyfirstcolumn (class in neurolang.frontend.datalog.sugar)": [[45, "neurolang.frontend.datalog.sugar.TranslateSelectByFirstColumn"]], "application_column_sugar() (neurolang.frontend.datalog.sugar.translatecolumnstoatoms method)": [[45, "neurolang.frontend.datalog.sugar.TranslateColumnsToAtoms.application_column_sugar"]], "application_column_sugar() (neurolang.frontend.datalog.sugar.translateselectbyfirstcolumn method)": [[45, "neurolang.frontend.datalog.sugar.TranslateSelectByFirstColumn.application_column_sugar"]], "conditional_query() (neurolang.frontend.datalog.sugar.translateprobabilisticquerymixin method)": [[45, "neurolang.frontend.datalog.sugar.TranslateProbabilisticQueryMixin.conditional_query"]], "conjunction_column_sugar() (neurolang.frontend.datalog.sugar.translatecolumnstoatoms method)": [[45, "neurolang.frontend.datalog.sugar.TranslateColumnsToAtoms.conjunction_column_sugar"]], "conjunction_column_sugar() (neurolang.frontend.datalog.sugar.translateselectbyfirstcolumn method)": [[45, "neurolang.frontend.datalog.sugar.TranslateSelectByFirstColumn.conjunction_column_sugar"]], "constant() (neurolang.frontend.datalog.sugar.recognisessugar method)": [[45, "neurolang.frontend.datalog.sugar.RecogniseSSugar.constant"]], "conversion() (neurolang.frontend.datalog.sugar.convertattrstoselectbycolumn method)": [[45, "neurolang.frontend.datalog.sugar.ConvertAttrSToSelectByColumn.conversion"]], "head_constants_to_equalities() (neurolang.frontend.datalog.sugar.translateheadconstantstoequalities method)": [[45, "neurolang.frontend.datalog.sugar.TranslateHeadConstantsToEqualities.head_constants_to_equalities"]], "implication_column_sugar() (neurolang.frontend.datalog.sugar.translatecolumnstoatoms method)": [[45, "neurolang.frontend.datalog.sugar.TranslateColumnsToAtoms.implication_column_sugar"]], "implication_column_sugar() (neurolang.frontend.datalog.sugar.translateselectbyfirstcolumn method)": [[45, "neurolang.frontend.datalog.sugar.TranslateSelectByFirstColumn.implication_column_sugar"]], "implication_select_by_left_head() (neurolang.frontend.datalog.sugar.translateselectbyfirstcolumn method)": [[45, "neurolang.frontend.datalog.sugar.TranslateSelectByFirstColumn.implication_select_by_left_head"]], "neurolang.frontend.datalog.sugar": [[45, "module-neurolang.frontend.datalog.sugar"]], "others() (neurolang.frontend.datalog.sugar.recognisessugar method)": [[45, "neurolang.frontend.datalog.sugar.RecogniseSSugar.others"]], "query_based_probchoice_wannabe() (neurolang.frontend.datalog.sugar.translatequerybasedprobabilisticfactmixin method)": [[45, "neurolang.frontend.datalog.sugar.TranslateQueryBasedProbabilisticFactMixin.query_based_probchoice_wannabe"]], "query_based_probfact_wannabe() (neurolang.frontend.datalog.sugar.translatequerybasedprobabilisticfactmixin method)": [[45, "neurolang.frontend.datalog.sugar.TranslateQueryBasedProbabilisticFactMixin.query_based_probfact_wannabe"]], "replace_s_getattr_by_first_column() (neurolang.frontend.datalog.sugar.translatessugartoselectbycolumn method)": [[45, "neurolang.frontend.datalog.sugar.TranslateSSugarToSelectByColumn.replace_s_getattr_by_first_column"]], "rewrite_conditional_query() (neurolang.frontend.datalog.sugar.translateprobabilisticquerymixin method)": [[45, "neurolang.frontend.datalog.sugar.TranslateProbabilisticQueryMixin.rewrite_conditional_query"]], "s_sugar() (neurolang.frontend.datalog.sugar.recognisessugar method)": [[45, "neurolang.frontend.datalog.sugar.RecogniseSSugar.s_sugar"]], "symbol() (neurolang.frontend.datalog.sugar.recognisessugar method)": [[45, "neurolang.frontend.datalog.sugar.RecogniseSSugar.symbol"]], "type (neurolang.frontend.datalog.sugar.column attribute)": [[45, "neurolang.frontend.datalog.sugar.Column.type"]], "type (neurolang.frontend.datalog.sugar.convertattrstoselectbycolumn attribute)": [[45, "neurolang.frontend.datalog.sugar.ConvertAttrSToSelectByColumn.type"]], "type (neurolang.frontend.datalog.sugar.recognisessugar attribute)": [[45, "neurolang.frontend.datalog.sugar.RecogniseSSugar.type"]], "type (neurolang.frontend.datalog.sugar.selectbyfirstcolumn attribute)": [[45, "neurolang.frontend.datalog.sugar.SelectByFirstColumn.type"]], "type (neurolang.frontend.datalog.sugar.translatecolumnstoatoms attribute)": [[45, "neurolang.frontend.datalog.sugar.TranslateColumnsToAtoms.type"]], "type (neurolang.frontend.datalog.sugar.translateheadconstantstoequalities attribute)": [[45, "neurolang.frontend.datalog.sugar.TranslateHeadConstantsToEqualities.type"]], "type (neurolang.frontend.datalog.sugar.translateprobabilisticquerymixin attribute)": [[45, "neurolang.frontend.datalog.sugar.TranslateProbabilisticQueryMixin.type"]], "type (neurolang.frontend.datalog.sugar.translatequerybasedprobabilisticfactmixin attribute)": [[45, "neurolang.frontend.datalog.sugar.TranslateQueryBasedProbabilisticFactMixin.type"]], "type (neurolang.frontend.datalog.sugar.translatessugartoselectbycolumn attribute)": [[45, "neurolang.frontend.datalog.sugar.TranslateSSugarToSelectByColumn.type"]], "type (neurolang.frontend.datalog.sugar.translateselectbyfirstcolumn attribute)": [[45, "neurolang.frontend.datalog.sugar.TranslateSelectByFirstColumn.type"]], "within_language_prob_query() (neurolang.frontend.datalog.sugar.translateprobabilisticquerymixin method)": [[45, "neurolang.frontend.datalog.sugar.TranslateProbabilisticQueryMixin.within_language_prob_query"]], "detecteuclideandistanceboundmatrix (class in neurolang.frontend.datalog.sugar.spatial)": [[46, "neurolang.frontend.datalog.sugar.spatial.DetectEuclideanDistanceBoundMatrix"]], "translateeuclideandistanceboundmatrixmixin (class in neurolang.frontend.datalog.sugar.spatial)": [[46, "neurolang.frontend.datalog.sugar.spatial.TranslateEuclideanDistanceBoundMatrixMixin"]], "any_other_expression() (neurolang.frontend.datalog.sugar.spatial.detecteuclideandistanceboundmatrix method)": [[46, "neurolang.frontend.datalog.sugar.spatial.DetectEuclideanDistanceBoundMatrix.any_other_expression"]], "euclidean_spatial_bound() (neurolang.frontend.datalog.sugar.spatial.translateeuclideandistanceboundmatrixmixin method)": [[46, "neurolang.frontend.datalog.sugar.spatial.TranslateEuclideanDistanceBoundMatrixMixin.euclidean_spatial_bound"]], "get_distance_upper_bound() (neurolang.frontend.datalog.sugar.spatial.detecteuclideandistanceboundmatrix static method)": [[46, "neurolang.frontend.datalog.sugar.spatial.DetectEuclideanDistanceBoundMatrix.get_distance_upper_bound"]], "get_range_pred_for_coord() (neurolang.frontend.datalog.sugar.spatial.detecteuclideandistanceboundmatrix static method)": [[46, "neurolang.frontend.datalog.sugar.spatial.DetectEuclideanDistanceBoundMatrix.get_range_pred_for_coord"]], "get_var_to_euclidean_equality() (neurolang.frontend.datalog.sugar.spatial.detecteuclideandistanceboundmatrix static method)": [[46, "neurolang.frontend.datalog.sugar.spatial.DetectEuclideanDistanceBoundMatrix.get_var_to_euclidean_equality"]], "implication() (neurolang.frontend.datalog.sugar.spatial.detecteuclideandistanceboundmatrix method)": [[46, "neurolang.frontend.datalog.sugar.spatial.DetectEuclideanDistanceBoundMatrix.implication"]], "neurolang.frontend.datalog.sugar.spatial": [[46, "module-neurolang.frontend.datalog.sugar.spatial"]], "safe_range_pred_to_coord_set() (neurolang.frontend.datalog.sugar.spatial.translateeuclideandistanceboundmatrixmixin method)": [[46, "neurolang.frontend.datalog.sugar.spatial.TranslateEuclideanDistanceBoundMatrixMixin.safe_range_pred_to_coord_set"]], "solve_spatial_bound() (neurolang.frontend.datalog.sugar.spatial.translateeuclideandistanceboundmatrixmixin static method)": [[46, "neurolang.frontend.datalog.sugar.spatial.TranslateEuclideanDistanceBoundMatrixMixin.solve_spatial_bound"]], "type (neurolang.frontend.datalog.sugar.spatial.detecteuclideandistanceboundmatrix attribute)": [[46, "neurolang.frontend.datalog.sugar.spatial.DetectEuclideanDistanceBoundMatrix.type"]], "type (neurolang.frontend.datalog.sugar.spatial.translateeuclideandistanceboundmatrixmixin attribute)": [[46, "neurolang.frontend.datalog.sugar.spatial.TranslateEuclideanDistanceBoundMatrixMixin.type"]], "upper_bound_to_max_dist() (neurolang.frontend.datalog.sugar.spatial.translateeuclideandistanceboundmatrixmixin static method)": [[46, "neurolang.frontend.datalog.sugar.spatial.TranslateEuclideanDistanceBoundMatrixMixin.upper_bound_to_max_dist"]], "probfol2datalogmixin (class in neurolang.frontend.datalog.syntax_preprocessing)": [[47, "neurolang.frontend.datalog.syntax_preprocessing.ProbFol2DatalogMixin"]], "neurolang.frontend.datalog.syntax_preprocessing": [[47, "module-neurolang.frontend.datalog.syntax_preprocessing"]], "translate_implication() (neurolang.frontend.datalog.syntax_preprocessing.probfol2datalogmixin method)": [[47, "neurolang.frontend.datalog.syntax_preprocessing.ProbFol2DatalogMixin.translate_implication"]], "translate_marg_query() (neurolang.frontend.datalog.syntax_preprocessing.probfol2datalogmixin method)": [[47, "neurolang.frontend.datalog.syntax_preprocessing.ProbFol2DatalogMixin.translate_marg_query"]], "type (neurolang.frontend.datalog.syntax_preprocessing.probfol2datalogmixin attribute)": [[47, "neurolang.frontend.datalog.syntax_preprocessing.ProbFol2DatalogMixin.type"]], "explicitvbr (class in neurolang.frontend.deterministic_frontend)": [[48, "neurolang.frontend.deterministic_frontend.ExplicitVBR"]], "explicitvbroverlay (class in neurolang.frontend.deterministic_frontend)": [[48, "neurolang.frontend.deterministic_frontend.ExplicitVBROverlay"]], "neurolangdl (class in neurolang.frontend.deterministic_frontend)": [[48, "neurolang.frontend.deterministic_frontend.NeurolangDL"]], "symbol (class in neurolang.frontend.deterministic_frontend)": [[48, "neurolang.frontend.deterministic_frontend.Symbol"]], "aabb_tree (neurolang.frontend.deterministic_frontend.explicitvbr property)": [[48, "neurolang.frontend.deterministic_frontend.ExplicitVBR.aabb_tree"]], "bounding_box (neurolang.frontend.deterministic_frontend.explicitvbr property)": [[48, "neurolang.frontend.deterministic_frontend.ExplicitVBR.bounding_box"]], "build_tree() (neurolang.frontend.deterministic_frontend.explicitvbr method)": [[48, "neurolang.frontend.deterministic_frontend.ExplicitVBR.build_tree"]], "expression (neurolang.frontend.deterministic_frontend.symbol property)": [[48, "neurolang.frontend.deterministic_frontend.Symbol.expression"]], "generate_bounding_box() (neurolang.frontend.deterministic_frontend.explicitvbr method)": [[48, "neurolang.frontend.deterministic_frontend.ExplicitVBR.generate_bounding_box"]], "neurolang.frontend.deterministic_frontend": [[48, "module-neurolang.frontend.deterministic_frontend"]], "neurolang_symbol (neurolang.frontend.deterministic_frontend.symbol property)": [[48, "neurolang.frontend.deterministic_frontend.Symbol.neurolang_symbol"]], "spatial_image() (neurolang.frontend.deterministic_frontend.explicitvbr method)": [[48, "neurolang.frontend.deterministic_frontend.ExplicitVBR.spatial_image"]], "spatial_image() (neurolang.frontend.deterministic_frontend.explicitvbroverlay method)": [[48, "neurolang.frontend.deterministic_frontend.ExplicitVBROverlay.spatial_image"]], "symbol (neurolang.frontend.deterministic_frontend.symbol property)": [[48, "neurolang.frontend.deterministic_frontend.Symbol.symbol"]], "to_ijk() (neurolang.frontend.deterministic_frontend.explicitvbr method)": [[48, "neurolang.frontend.deterministic_frontend.ExplicitVBR.to_ijk"]], "to_xyz() (neurolang.frontend.deterministic_frontend.explicitvbr method)": [[48, "neurolang.frontend.deterministic_frontend.ExplicitVBR.to_xyz"]], "value (neurolang.frontend.deterministic_frontend.symbol property)": [[48, "neurolang.frontend.deterministic_frontend.Symbol.value"]], "neurolang.frontend.drs": [[49, "module-neurolang.frontend.drs"]], "chart (class in neurolang.frontend.drs.chart_parser)": [[50, "neurolang.frontend.drs.chart_parser.Chart"]], "chartparser (class in neurolang.frontend.drs.chart_parser)": [[50, "neurolang.frontend.drs.chart_parser.ChartParser"]], "chartparser.edge (class in neurolang.frontend.drs.chart_parser)": [[50, "neurolang.frontend.drs.chart_parser.ChartParser.Edge"]], "dictlexicon (class in neurolang.frontend.drs.chart_parser)": [[50, "neurolang.frontend.drs.chart_parser.DictLexicon"]], "grammar (class in neurolang.frontend.drs.chart_parser)": [[50, "neurolang.frontend.drs.chart_parser.Grammar"]], "lexicon (class in neurolang.frontend.drs.chart_parser)": [[50, "neurolang.frontend.drs.chart_parser.Lexicon"]], "rootrule (class in neurolang.frontend.drs.chart_parser)": [[50, "neurolang.frontend.drs.chart_parser.RootRule"]], "rule (class in neurolang.frontend.drs.chart_parser)": [[50, "neurolang.frontend.drs.chart_parser.Rule"]], "tokenizer (class in neurolang.frontend.drs.chart_parser)": [[50, "neurolang.frontend.drs.chart_parser.Tokenizer"]], "completed (neurolang.frontend.drs.chart_parser.chartparser.edge attribute)": [[50, "neurolang.frontend.drs.chart_parser.ChartParser.Edge.completed"]], "get_meanings() (neurolang.frontend.drs.chart_parser.dictlexicon method)": [[50, "neurolang.frontend.drs.chart_parser.DictLexicon.get_meanings"]], "get_meanings() (neurolang.frontend.drs.chart_parser.lexicon method)": [[50, "neurolang.frontend.drs.chart_parser.Lexicon.get_meanings"]], "head (neurolang.frontend.drs.chart_parser.chartparser.edge attribute)": [[50, "neurolang.frontend.drs.chart_parser.ChartParser.Edge.head"]], "neurolang.frontend.drs.chart_parser": [[50, "module-neurolang.frontend.drs.chart_parser"]], "next_token() (neurolang.frontend.drs.chart_parser.tokenizer method)": [[50, "neurolang.frontend.drs.chart_parser.Tokenizer.next_token"]], "parse() (neurolang.frontend.drs.chart_parser.chartparser method)": [[50, "neurolang.frontend.drs.chart_parser.ChartParser.parse"]], "recognize() (neurolang.frontend.drs.chart_parser.chartparser method)": [[50, "neurolang.frontend.drs.chart_parser.ChartParser.recognize"]], "remaining (neurolang.frontend.drs.chart_parser.chartparser.edge attribute)": [[50, "neurolang.frontend.drs.chart_parser.ChartParser.Edge.remaining"]], "rule (neurolang.frontend.drs.chart_parser.chartparser.edge attribute)": [[50, "neurolang.frontend.drs.chart_parser.ChartParser.Edge.rule"]], "tokenize() (neurolang.frontend.drs.chart_parser.tokenizer method)": [[50, "neurolang.frontend.drs.chart_parser.Tokenizer.tokenize"]], "type (neurolang.frontend.drs.chart_parser.grammar attribute)": [[50, "neurolang.frontend.drs.chart_parser.Grammar.type"]], "type (neurolang.frontend.drs.chart_parser.rootrule attribute)": [[50, "neurolang.frontend.drs.chart_parser.RootRule.type"]], "type (neurolang.frontend.drs.chart_parser.rule attribute)": [[50, "neurolang.frontend.drs.chart_parser.Rule.type"]], "unification (neurolang.frontend.drs.chart_parser.chartparser.edge attribute)": [[50, "neurolang.frontend.drs.chart_parser.ChartParser.Edge.unification"]], "used_edges (neurolang.frontend.drs.chart_parser.chartparser.edge attribute)": [[50, "neurolang.frontend.drs.chart_parser.ChartParser.Edge.used_edges"]], "yield_comma() (neurolang.frontend.drs.chart_parser.tokenizer method)": [[50, "neurolang.frontend.drs.chart_parser.Tokenizer.yield_comma"]], "yield_quote() (neurolang.frontend.drs.chart_parser.tokenizer method)": [[50, "neurolang.frontend.drs.chart_parser.Tokenizer.yield_quote"]], "yield_word() (neurolang.frontend.drs.chart_parser.tokenizer method)": [[50, "neurolang.frontend.drs.chart_parser.Tokenizer.yield_word"]], "drs (class in neurolang.frontend.drs.drs_builder)": [[51, "neurolang.frontend.drs.drs_builder.DRS"]], "drs2fol (class in neurolang.frontend.drs.drs_builder)": [[51, "neurolang.frontend.drs.drs_builder.DRS2FOL"]], "drsbuilder (class in neurolang.frontend.drs.drs_builder)": [[51, "neurolang.frontend.drs.drs_builder.DRSBuilder"]], "comma_and() (neurolang.frontend.drs.drs_builder.drsbuilder method)": [[51, "neurolang.frontend.drs.drs_builder.DRSBuilder.comma_and"]], "conditional() (neurolang.frontend.drs.drs_builder.drsbuilder method)": [[51, "neurolang.frontend.drs.drs_builder.DRSBuilder.conditional"]], "drs() (neurolang.frontend.drs.drs_builder.drs2fol method)": [[51, "neurolang.frontend.drs.drs_builder.DRS2FOL.drs"]], "float_drs() (neurolang.frontend.drs.drs_builder.drsbuilder method)": [[51, "neurolang.frontend.drs.drs_builder.DRSBuilder.float_drs"]], "implication() (neurolang.frontend.drs.drs_builder.drs2fol method)": [[51, "neurolang.frontend.drs.drs_builder.DRS2FOL.implication"]], "implication() (neurolang.frontend.drs.drs_builder.drsbuilder method)": [[51, "neurolang.frontend.drs.drs_builder.DRSBuilder.implication"]], "indefinite_noun_phrase() (neurolang.frontend.drs.drs_builder.drsbuilder method)": [[51, "neurolang.frontend.drs.drs_builder.DRSBuilder.indefinite_noun_phrase"]], "indent() (in module neurolang.frontend.drs.drs_builder)": [[51, "neurolang.frontend.drs.drs_builder.indent"]], "join_drs() (neurolang.frontend.drs.drs_builder.drsbuilder method)": [[51, "neurolang.frontend.drs.drs_builder.DRSBuilder.join_drs"]], "lit_noun_phrase() (neurolang.frontend.drs.drs_builder.drsbuilder method)": [[51, "neurolang.frontend.drs.drs_builder.DRSBuilder.lit_noun_phrase"]], "neurolang.frontend.drs.drs_builder": [[51, "module-neurolang.frontend.drs.drs_builder"]], "predicate() (neurolang.frontend.drs.drs_builder.drsbuilder method)": [[51, "neurolang.frontend.drs.drs_builder.DRSBuilder.predicate"]], "proper_names() (neurolang.frontend.drs.drs_builder.drsbuilder method)": [[51, "neurolang.frontend.drs.drs_builder.DRSBuilder.proper_names"]], "quoted_predicate() (neurolang.frontend.drs.drs_builder.drsbuilder method)": [[51, "neurolang.frontend.drs.drs_builder.DRSBuilder.quoted_predicate"]], "sentence_list() (neurolang.frontend.drs.drs_builder.drsbuilder method)": [[51, "neurolang.frontend.drs.drs_builder.DRSBuilder.sentence_list"]], "simple_and() (neurolang.frontend.drs.drs_builder.drsbuilder method)": [[51, "neurolang.frontend.drs.drs_builder.DRSBuilder.simple_and"]], "single_sentence_list() (neurolang.frontend.drs.drs_builder.drsbuilder method)": [[51, "neurolang.frontend.drs.drs_builder.DRSBuilder.single_sentence_list"]], "type (neurolang.frontend.drs.drs_builder.drs attribute)": [[51, "neurolang.frontend.drs.drs_builder.DRS.type"]], "type (neurolang.frontend.drs.drs_builder.drs2fol attribute)": [[51, "neurolang.frontend.drs.drs_builder.DRS2FOL.type"]], "type (neurolang.frontend.drs.drs_builder.drsbuilder attribute)": [[51, "neurolang.frontend.drs.drs_builder.DRSBuilder.type"]], "unary_conjunction() (neurolang.frontend.drs.drs_builder.drs2fol method)": [[51, "neurolang.frontend.drs.drs_builder.DRS2FOL.unary_conjunction"]], "var_apposition() (neurolang.frontend.drs.drs_builder.drsbuilder method)": [[51, "neurolang.frontend.drs.drs_builder.DRSBuilder.var_apposition"]], "var_noun_phrase() (neurolang.frontend.drs.drs_builder.drsbuilder method)": [[51, "neurolang.frontend.drs.drs_builder.DRSBuilder.var_noun_phrase"]], "englishbaselexicon (class in neurolang.frontend.drs.english_grammar)": [[52, "neurolang.frontend.drs.english_grammar.EnglishBaseLexicon"]], "case (class in neurolang.frontend.drs.english_grammar)": [[52, "neurolang.frontend.drs.english_grammar.case"]], "female (neurolang.frontend.drs.english_grammar.gen attribute)": [[52, "neurolang.frontend.drs.english_grammar.gen.female"]], "gen (class in neurolang.frontend.drs.english_grammar)": [[52, "neurolang.frontend.drs.english_grammar.gen"]], "get_meanings() (neurolang.frontend.drs.english_grammar.englishbaselexicon method)": [[52, "neurolang.frontend.drs.english_grammar.EnglishBaseLexicon.get_meanings"]], "male (neurolang.frontend.drs.english_grammar.gen attribute)": [[52, "neurolang.frontend.drs.english_grammar.gen.male"]], "neurolang.frontend.drs.english_grammar": [[52, "module-neurolang.frontend.drs.english_grammar"]], "nom (neurolang.frontend.drs.english_grammar.case attribute)": [[52, "neurolang.frontend.drs.english_grammar.case.nom"]], "notnom (neurolang.frontend.drs.english_grammar.case attribute)": [[52, "neurolang.frontend.drs.english_grammar.case.notnom"]], "num (class in neurolang.frontend.drs.english_grammar)": [[52, "neurolang.frontend.drs.english_grammar.num"]], "plural (neurolang.frontend.drs.english_grammar.num attribute)": [[52, "neurolang.frontend.drs.english_grammar.num.plural"]], "singular (neurolang.frontend.drs.english_grammar.num attribute)": [[52, "neurolang.frontend.drs.english_grammar.num.singular"]], "thing (neurolang.frontend.drs.english_grammar.gen attribute)": [[52, "neurolang.frontend.drs.english_grammar.gen.thing"]], "ambiguoussentenceexception": [[53, "neurolang.frontend.drs.exceptions.AmbiguousSentenceException"]], "couldnotparseexception": [[53, "neurolang.frontend.drs.exceptions.CouldNotParseException"]], "grammarexception": [[53, "neurolang.frontend.drs.exceptions.GrammarException"]], "parsedatalogpredicateexception": [[53, "neurolang.frontend.drs.exceptions.ParseDatalogPredicateException"]], "parseexception": [[53, "neurolang.frontend.drs.exceptions.ParseException"]], "tokenizeexception": [[53, "neurolang.frontend.drs.exceptions.TokenizeException"]], "translatetodatalogexception": [[53, "neurolang.frontend.drs.exceptions.TranslateToDatalogException"]], "neurolang.frontend.drs.exceptions": [[53, "module-neurolang.frontend.drs.exceptions"]], "transformintoconjunctionofdatalogsentences (class in neurolang.frontend.drs.translate_to_dl)": [[54, "neurolang.frontend.drs.translate_to_dl.TransformIntoConjunctionOfDatalogSentences"]], "translatetodatalog (class in neurolang.frontend.drs.translate_to_dl)": [[54, "neurolang.frontend.drs.translate_to_dl.TranslateToDatalog"]], "neurolang.frontend.drs.translate_to_dl": [[54, "module-neurolang.frontend.drs.translate_to_dl"]], "translate_block() (neurolang.frontend.drs.translate_to_dl.translatetodatalog method)": [[54, "neurolang.frontend.drs.translate_to_dl.TranslateToDatalog.translate_block"]], "translate_logical_sentence() (neurolang.frontend.drs.translate_to_dl.translatetodatalog method)": [[54, "neurolang.frontend.drs.translate_to_dl.TranslateToDatalog.translate_logical_sentence"]], "translate_sentence() (neurolang.frontend.drs.translate_to_dl.translatetodatalog method)": [[54, "neurolang.frontend.drs.translate_to_dl.TranslateToDatalog.translate_sentence"]], "type (neurolang.frontend.drs.translate_to_dl.transformintoconjunctionofdatalogsentences attribute)": [[54, "neurolang.frontend.drs.translate_to_dl.TransformIntoConjunctionOfDatalogSentences.type"]], "numpyfunctionsmixin (class in neurolang.frontend.frontend_extensions)": [[55, "neurolang.frontend.frontend_extensions.NumpyFunctionsMixin"]], "constant_cos (neurolang.frontend.frontend_extensions.numpyfunctionsmixin attribute)": [[55, "neurolang.frontend.frontend_extensions.NumpyFunctionsMixin.constant_cos"]], "constant_exp (neurolang.frontend.frontend_extensions.numpyfunctionsmixin attribute)": [[55, "neurolang.frontend.frontend_extensions.NumpyFunctionsMixin.constant_exp"]], "constant_log (neurolang.frontend.frontend_extensions.numpyfunctionsmixin attribute)": [[55, "neurolang.frontend.frontend_extensions.NumpyFunctionsMixin.constant_log"]], "constant_log10 (neurolang.frontend.frontend_extensions.numpyfunctionsmixin attribute)": [[55, "neurolang.frontend.frontend_extensions.NumpyFunctionsMixin.constant_log10"]], "constant_sin (neurolang.frontend.frontend_extensions.numpyfunctionsmixin attribute)": [[55, "neurolang.frontend.frontend_extensions.NumpyFunctionsMixin.constant_sin"]], "constant_tan (neurolang.frontend.frontend_extensions.numpyfunctionsmixin attribute)": [[55, "neurolang.frontend.frontend_extensions.NumpyFunctionsMixin.constant_tan"]], "neurolang.frontend.frontend_extensions": [[55, "module-neurolang.frontend.frontend_extensions"]], "studyid (class in neurolang.frontend.neurosynth_utils)": [[57, "neurolang.frontend.neurosynth_utils.StudyID"]], "tfidf (class in neurolang.frontend.neurosynth_utils)": [[57, "neurolang.frontend.neurosynth_utils.TfIDf"]], "fetch_feature_data() (in module neurolang.frontend.neurosynth_utils)": [[57, "neurolang.frontend.neurosynth_utils.fetch_feature_data"]], "fetch_neurosynth_peak_data() (in module neurolang.frontend.neurosynth_utils)": [[57, "neurolang.frontend.neurosynth_utils.fetch_neurosynth_peak_data"]], "fetch_study_metadata() (in module neurolang.frontend.neurosynth_utils)": [[57, "neurolang.frontend.neurosynth_utils.fetch_study_metadata"]], "get_ns_mni_peaks_reported() (in module neurolang.frontend.neurosynth_utils)": [[57, "neurolang.frontend.neurosynth_utils.get_ns_mni_peaks_reported"]], "get_ns_term_study_associations() (in module neurolang.frontend.neurosynth_utils)": [[57, "neurolang.frontend.neurosynth_utils.get_ns_term_study_associations"]], "neurolang.frontend.neurosynth_utils": [[57, "module-neurolang.frontend.neurosynth_utils"]], "neurolangpdl (class in neurolang.frontend.probabilistic_frontend)": [[58, "neurolang.frontend.probabilistic_frontend.NeurolangPDL"]], "regionfrontendcplogicsolver (class in neurolang.frontend.probabilistic_frontend)": [[58, "neurolang.frontend.probabilistic_frontend.RegionFrontendCPLogicSolver"]], "add_probabilistic_choice_from_tuples() (neurolang.frontend.probabilistic_frontend.neurolangpdl method)": [[58, "neurolang.frontend.probabilistic_frontend.NeurolangPDL.add_probabilistic_choice_from_tuples"]], "add_probabilistic_facts_from_tuples() (neurolang.frontend.probabilistic_frontend.neurolangpdl method)": [[58, "neurolang.frontend.probabilistic_frontend.NeurolangPDL.add_probabilistic_facts_from_tuples"]], "add_uniform_probabilistic_choice_over_set() (neurolang.frontend.probabilistic_frontend.neurolangpdl method)": [[58, "neurolang.frontend.probabilistic_frontend.NeurolangPDL.add_uniform_probabilistic_choice_over_set"]], "current_program (neurolang.frontend.probabilistic_frontend.neurolangpdl property)": [[58, "neurolang.frontend.probabilistic_frontend.NeurolangPDL.current_program"]], "function_anatomical_anterior_of() (neurolang.frontend.probabilistic_frontend.regionfrontendcplogicsolver method)": [[58, "neurolang.frontend.probabilistic_frontend.RegionFrontendCPLogicSolver.function_anatomical_anterior_of"]], "function_anatomical_inferior_of() (neurolang.frontend.probabilistic_frontend.regionfrontendcplogicsolver method)": [[58, "neurolang.frontend.probabilistic_frontend.RegionFrontendCPLogicSolver.function_anatomical_inferior_of"]], "function_anatomical_posterior_of() (neurolang.frontend.probabilistic_frontend.regionfrontendcplogicsolver method)": [[58, "neurolang.frontend.probabilistic_frontend.RegionFrontendCPLogicSolver.function_anatomical_posterior_of"]], "function_anatomical_superior_of() (neurolang.frontend.probabilistic_frontend.regionfrontendcplogicsolver method)": [[58, "neurolang.frontend.probabilistic_frontend.RegionFrontendCPLogicSolver.function_anatomical_superior_of"]], "function_anterior_of() (neurolang.frontend.probabilistic_frontend.regionfrontendcplogicsolver method)": [[58, "neurolang.frontend.probabilistic_frontend.RegionFrontendCPLogicSolver.function_anterior_of"]], "function_inferior_of() (neurolang.frontend.probabilistic_frontend.regionfrontendcplogicsolver method)": [[58, "neurolang.frontend.probabilistic_frontend.RegionFrontendCPLogicSolver.function_inferior_of"]], "function_left_of() (neurolang.frontend.probabilistic_frontend.regionfrontendcplogicsolver method)": [[58, "neurolang.frontend.probabilistic_frontend.RegionFrontendCPLogicSolver.function_left_of"]], "function_overlapping() (neurolang.frontend.probabilistic_frontend.regionfrontendcplogicsolver method)": [[58, "neurolang.frontend.probabilistic_frontend.RegionFrontendCPLogicSolver.function_overlapping"]], "function_posterior_of() (neurolang.frontend.probabilistic_frontend.regionfrontendcplogicsolver method)": [[58, "neurolang.frontend.probabilistic_frontend.RegionFrontendCPLogicSolver.function_posterior_of"]], "function_right_of() (neurolang.frontend.probabilistic_frontend.regionfrontendcplogicsolver method)": [[58, "neurolang.frontend.probabilistic_frontend.RegionFrontendCPLogicSolver.function_right_of"]], "function_superior_of() (neurolang.frontend.probabilistic_frontend.regionfrontendcplogicsolver method)": [[58, "neurolang.frontend.probabilistic_frontend.RegionFrontendCPLogicSolver.function_superior_of"]], "load_ontology() (neurolang.frontend.probabilistic_frontend.neurolangpdl method)": [[58, "neurolang.frontend.probabilistic_frontend.NeurolangPDL.load_ontology"]], "neurolang.frontend.probabilistic_frontend": [[58, "module-neurolang.frontend.probabilistic_frontend"]], "protected_keywords (neurolang.frontend.probabilistic_frontend.regionfrontendcplogicsolver attribute)": [[58, "neurolang.frontend.probabilistic_frontend.RegionFrontendCPLogicSolver.protected_keywords"]], "solve_all() (neurolang.frontend.probabilistic_frontend.neurolangpdl method)": [[58, "neurolang.frontend.probabilistic_frontend.NeurolangPDL.solve_all"]], "type (neurolang.frontend.probabilistic_frontend.regionfrontendcplogicsolver attribute)": [[58, "neurolang.frontend.probabilistic_frontend.RegionFrontendCPLogicSolver.type"]], "neurosynthmixin (class in neurolang.frontend.query_resolution)": [[59, "neurolang.frontend.query_resolution.NeuroSynthMixin"]], "querybuilderbase (class in neurolang.frontend.query_resolution)": [[59, "neurolang.frontend.query_resolution.QueryBuilderBase"]], "querysymbolsproxy (class in neurolang.frontend.query_resolution)": [[59, "neurolang.frontend.query_resolution.QuerySymbolsProxy"]], "regionmixin (class in neurolang.frontend.query_resolution)": [[59, "neurolang.frontend.query_resolution.RegionMixin"]], "add_atlas_set() (neurolang.frontend.query_resolution.regionmixin method)": [[59, "neurolang.frontend.query_resolution.RegionMixin.add_atlas_set"]], "add_region() (neurolang.frontend.query_resolution.regionmixin method)": [[59, "neurolang.frontend.query_resolution.RegionMixin.add_region"]], "add_region_set() (neurolang.frontend.query_resolution.regionmixin method)": [[59, "neurolang.frontend.query_resolution.RegionMixin.add_region_set"]], "add_symbol() (neurolang.frontend.query_resolution.querybuilderbase method)": [[59, "neurolang.frontend.query_resolution.QueryBuilderBase.add_symbol"]], "add_tuple_set() (neurolang.frontend.query_resolution.querybuilderbase method)": [[59, "neurolang.frontend.query_resolution.QueryBuilderBase.add_tuple_set"]], "all() (neurolang.frontend.query_resolution.querybuilderbase method)": [[59, "neurolang.frontend.query_resolution.QueryBuilderBase.all"]], "create_region() (neurolang.frontend.query_resolution.regionmixin static method)": [[59, "neurolang.frontend.query_resolution.RegionMixin.create_region"]], "del_symbol() (neurolang.frontend.query_resolution.querybuilderbase method)": [[59, "neurolang.frontend.query_resolution.QueryBuilderBase.del_symbol"]], "environment (neurolang.frontend.query_resolution.querybuilderbase property)": [[59, "neurolang.frontend.query_resolution.QueryBuilderBase.environment"]], "exists() (neurolang.frontend.query_resolution.querybuilderbase method)": [[59, "neurolang.frontend.query_resolution.QueryBuilderBase.exists"]], "functions (neurolang.frontend.query_resolution.querybuilderbase property)": [[59, "neurolang.frontend.query_resolution.QueryBuilderBase.functions"]], "get_symbol() (neurolang.frontend.query_resolution.querybuilderbase method)": [[59, "neurolang.frontend.query_resolution.QueryBuilderBase.get_symbol"]], "load_neurosynth_mni_peaks_reported() (neurolang.frontend.query_resolution.neurosynthmixin method)": [[59, "neurolang.frontend.query_resolution.NeuroSynthMixin.load_neurosynth_mni_peaks_reported"]], "load_neurosynth_study_ids() (neurolang.frontend.query_resolution.neurosynthmixin method)": [[59, "neurolang.frontend.query_resolution.NeuroSynthMixin.load_neurosynth_study_ids"]], "load_neurosynth_term_study_associations() (neurolang.frontend.query_resolution.neurosynthmixin method)": [[59, "neurolang.frontend.query_resolution.NeuroSynthMixin.load_neurosynth_term_study_associations"]], "make_implicit_regions_explicit() (neurolang.frontend.query_resolution.regionmixin method)": [[59, "neurolang.frontend.query_resolution.RegionMixin.make_implicit_regions_explicit"]], "neurolang.frontend.query_resolution": [[59, "module-neurolang.frontend.query_resolution"]], "new_region_symbol() (neurolang.frontend.query_resolution.regionmixin method)": [[59, "neurolang.frontend.query_resolution.RegionMixin.new_region_symbol"]], "new_symbol() (neurolang.frontend.query_resolution.querybuilderbase method)": [[59, "neurolang.frontend.query_resolution.QueryBuilderBase.new_symbol"]], "region_names (neurolang.frontend.query_resolution.regionmixin property)": [[59, "neurolang.frontend.query_resolution.RegionMixin.region_names"]], "region_set_names (neurolang.frontend.query_resolution.regionmixin property)": [[59, "neurolang.frontend.query_resolution.RegionMixin.region_set_names"]], "scope (neurolang.frontend.query_resolution.querybuilderbase property)": [[59, "neurolang.frontend.query_resolution.QueryBuilderBase.scope"]], "sphere() (neurolang.frontend.query_resolution.regionmixin method)": [[59, "neurolang.frontend.query_resolution.RegionMixin.sphere"]], "symbol_table (neurolang.frontend.query_resolution.querybuilderbase property)": [[59, "neurolang.frontend.query_resolution.QueryBuilderBase.symbol_table"]], "symbols (neurolang.frontend.query_resolution.querybuilderbase property)": [[59, "neurolang.frontend.query_resolution.QueryBuilderBase.symbols"]], "types (neurolang.frontend.query_resolution.querybuilderbase property)": [[59, "neurolang.frontend.query_resolution.QueryBuilderBase.types"]], "querybuilderdatalog (class in neurolang.frontend.query_resolution_datalog)": [[60, "neurolang.frontend.query_resolution_datalog.QueryBuilderDatalog"]], "add_constraint() (neurolang.frontend.query_resolution_datalog.querybuilderdatalog method)": [[60, "neurolang.frontend.query_resolution_datalog.QueryBuilderDatalog.add_constraint"]], "add_tuple_set() (neurolang.frontend.query_resolution_datalog.querybuilderdatalog method)": [[60, "neurolang.frontend.query_resolution_datalog.QueryBuilderDatalog.add_tuple_set"]], "compute_datalog_program_for_autocompletion() (neurolang.frontend.query_resolution_datalog.querybuilderdatalog method)": [[60, "neurolang.frontend.query_resolution_datalog.QueryBuilderDatalog.compute_datalog_program_for_autocompletion"]], "current_program (neurolang.frontend.query_resolution_datalog.querybuilderdatalog property)": [[60, "neurolang.frontend.query_resolution_datalog.QueryBuilderDatalog.current_program"]], "execute_datalog_program() (neurolang.frontend.query_resolution_datalog.querybuilderdatalog method)": [[60, "neurolang.frontend.query_resolution_datalog.QueryBuilderDatalog.execute_datalog_program"]], "magic_sets_rewrite_program() (neurolang.frontend.query_resolution_datalog.querybuilderdatalog method)": [[60, "neurolang.frontend.query_resolution_datalog.QueryBuilderDatalog.magic_sets_rewrite_program"]], "neurolang.frontend.query_resolution_datalog": [[60, "module-neurolang.frontend.query_resolution_datalog"]], "predicate_parameter_names() (neurolang.frontend.query_resolution_datalog.querybuilderdatalog method)": [[60, "neurolang.frontend.query_resolution_datalog.QueryBuilderDatalog.predicate_parameter_names"]], "query() (neurolang.frontend.query_resolution_datalog.querybuilderdatalog method)": [[60, "neurolang.frontend.query_resolution_datalog.QueryBuilderDatalog.query"]], "reset_program() (neurolang.frontend.query_resolution_datalog.querybuilderdatalog method)": [[60, "neurolang.frontend.query_resolution_datalog.QueryBuilderDatalog.reset_program"]], "solve_all() (neurolang.frontend.query_resolution_datalog.querybuilderdatalog method)": [[60, "neurolang.frontend.query_resolution_datalog.QueryBuilderDatalog.solve_all"]], "all (class in neurolang.frontend.query_resolution_expressions)": [[61, "neurolang.frontend.query_resolution_expressions.All"]], "exists (class in neurolang.frontend.query_resolution_expressions)": [[61, "neurolang.frontend.query_resolution_expressions.Exists"]], "expression (class in neurolang.frontend.query_resolution_expressions)": [[61, "neurolang.frontend.query_resolution_expressions.Expression"]], "fact (class in neurolang.frontend.query_resolution_expressions)": [[61, "neurolang.frontend.query_resolution_expressions.Fact"]], "implication (class in neurolang.frontend.query_resolution_expressions)": [[61, "neurolang.frontend.query_resolution_expressions.Implication"]], "operation (class in neurolang.frontend.query_resolution_expressions)": [[61, "neurolang.frontend.query_resolution_expressions.Operation"]], "query (class in neurolang.frontend.query_resolution_expressions)": [[61, "neurolang.frontend.query_resolution_expressions.Query"]], "rightimplication (class in neurolang.frontend.query_resolution_expressions)": [[61, "neurolang.frontend.query_resolution_expressions.RightImplication"]], "symbol (class in neurolang.frontend.query_resolution_expressions)": [[61, "neurolang.frontend.query_resolution_expressions.Symbol"]], "translateexpressiontofrontendexpression (class in neurolang.frontend.query_resolution_expressions)": [[61, "neurolang.frontend.query_resolution_expressions.TranslateExpressionToFrontEndExpression"]], "conjunction() (neurolang.frontend.query_resolution_expressions.translateexpressiontofrontendexpression method)": [[61, "neurolang.frontend.query_resolution_expressions.TranslateExpressionToFrontEndExpression.conjunction"]], "constant() (neurolang.frontend.query_resolution_expressions.translateexpressiontofrontendexpression method)": [[61, "neurolang.frontend.query_resolution_expressions.TranslateExpressionToFrontEndExpression.constant"]], "do() (neurolang.frontend.query_resolution_expressions.expression method)": [[61, "neurolang.frontend.query_resolution_expressions.Expression.do"]], "exists() (neurolang.frontend.query_resolution_expressions.translateexpressiontofrontendexpression method)": [[61, "neurolang.frontend.query_resolution_expressions.TranslateExpressionToFrontEndExpression.exists"]], "expression (neurolang.frontend.query_resolution_expressions.symbol property)": [[61, "neurolang.frontend.query_resolution_expressions.Symbol.expression"]], "fact() (neurolang.frontend.query_resolution_expressions.translateexpressiontofrontendexpression method)": [[61, "neurolang.frontend.query_resolution_expressions.TranslateExpressionToFrontEndExpression.fact"]], "forall() (neurolang.frontend.query_resolution_expressions.translateexpressiontofrontendexpression method)": [[61, "neurolang.frontend.query_resolution_expressions.TranslateExpressionToFrontEndExpression.forall"]], "help() (neurolang.frontend.query_resolution_expressions.expression method)": [[61, "neurolang.frontend.query_resolution_expressions.Expression.help"]], "implication() (neurolang.frontend.query_resolution_expressions.translateexpressiontofrontendexpression method)": [[61, "neurolang.frontend.query_resolution_expressions.TranslateExpressionToFrontEndExpression.implication"]], "negation() (neurolang.frontend.query_resolution_expressions.translateexpressiontofrontendexpression method)": [[61, "neurolang.frontend.query_resolution_expressions.TranslateExpressionToFrontEndExpression.negation"]], "neurolang.frontend.query_resolution_expressions": [[61, "module-neurolang.frontend.query_resolution_expressions"]], "neurolang_symbol (neurolang.frontend.query_resolution_expressions.symbol property)": [[61, "neurolang.frontend.query_resolution_expressions.Symbol.neurolang_symbol"]], "op_bind() (in module neurolang.frontend.query_resolution_expressions)": [[61, "neurolang.frontend.query_resolution_expressions.op_bind"]], "operator_repr (neurolang.frontend.query_resolution_expressions.operation attribute)": [[61, "neurolang.frontend.query_resolution_expressions.Operation.operator_repr"]], "right_implication() (neurolang.frontend.query_resolution_expressions.translateexpressiontofrontendexpression method)": [[61, "neurolang.frontend.query_resolution_expressions.TranslateExpressionToFrontEndExpression.right_implication"]], "rop_bind() (in module neurolang.frontend.query_resolution_expressions)": [[61, "neurolang.frontend.query_resolution_expressions.rop_bind"]], "symbol (neurolang.frontend.query_resolution_expressions.symbol property)": [[61, "neurolang.frontend.query_resolution_expressions.Symbol.symbol"]], "symbol() (neurolang.frontend.query_resolution_expressions.translateexpressiontofrontendexpression method)": [[61, "neurolang.frontend.query_resolution_expressions.TranslateExpressionToFrontEndExpression.symbol"]], "type (neurolang.frontend.query_resolution_expressions.expression property)": [[61, "neurolang.frontend.query_resolution_expressions.Expression.type"]], "type (neurolang.frontend.query_resolution_expressions.translateexpressiontofrontendexpression attribute)": [[61, "neurolang.frontend.query_resolution_expressions.TranslateExpressionToFrontEndExpression.type"]], "value (neurolang.frontend.query_resolution_expressions.symbol property)": [[61, "neurolang.frontend.query_resolution_expressions.Symbol.value"]], "walk_function_application() (neurolang.frontend.query_resolution_expressions.translateexpressiontofrontendexpression method)": [[61, "neurolang.frontend.query_resolution_expressions.TranslateExpressionToFrontEndExpression.walk_function_application"]], "before() (in module neurolang.interval_algebra)": [[62, "neurolang.interval_algebra.before"]], "converse() (in module neurolang.interval_algebra)": [[62, "neurolang.interval_algebra.converse"]], "during() (in module neurolang.interval_algebra)": [[62, "neurolang.interval_algebra.during"]], "equals() (in module neurolang.interval_algebra)": [[62, "neurolang.interval_algebra.equals"]], "finishes() (in module neurolang.interval_algebra)": [[62, "neurolang.interval_algebra.finishes"]], "get_intervals_relations() (in module neurolang.interval_algebra)": [[62, "neurolang.interval_algebra.get_intervals_relations"]], "meets() (in module neurolang.interval_algebra)": [[62, "neurolang.interval_algebra.meets"]], "negate() (in module neurolang.interval_algebra)": [[62, "neurolang.interval_algebra.negate"]], "neurolang.interval_algebra": [[62, "module-neurolang.interval_algebra"]], "overlaps() (in module neurolang.interval_algebra)": [[62, "neurolang.interval_algebra.overlaps"]], "starts() (in module neurolang.interval_algebra)": [[62, "neurolang.interval_algebra.starts"]], "v_before() (in module neurolang.interval_algebra)": [[62, "neurolang.interval_algebra.v_before"]], "v_during() (in module neurolang.interval_algebra)": [[62, "neurolang.interval_algebra.v_during"]], "v_equals() (in module neurolang.interval_algebra)": [[62, "neurolang.interval_algebra.v_equals"]], "v_finishes() (in module neurolang.interval_algebra)": [[62, "neurolang.interval_algebra.v_finishes"]], "v_meets() (in module neurolang.interval_algebra)": [[62, "neurolang.interval_algebra.v_meets"]], "v_overlaps() (in module neurolang.interval_algebra)": [[62, "neurolang.interval_algebra.v_overlaps"]], "v_starts() (in module neurolang.interval_algebra)": [[62, "neurolang.interval_algebra.v_starts"]], "neurolang.logic": [[63, "module-neurolang.logic"]], "extractfreevariableswalker (class in neurolang.logic.expression_processing)": [[64, "neurolang.logic.expression_processing.ExtractFreeVariablesWalker"]], "extractlogicatoms (class in neurolang.logic.expression_processing)": [[64, "neurolang.logic.expression_processing.ExtractLogicAtoms"]], "extractlogicpredicates (class in neurolang.logic.expression_processing)": [[64, "neurolang.logic.expression_processing.ExtractLogicPredicates"]], "hasexistentialpredicates (class in neurolang.logic.expression_processing)": [[64, "neurolang.logic.expression_processing.HasExistentialPredicates"]], "logicsolver (class in neurolang.logic.expression_processing)": [[64, "neurolang.logic.expression_processing.LogicSolver"]], "translatetologic (class in neurolang.logic.expression_processing)": [[64, "neurolang.logic.expression_processing.TranslateToLogic"]], "walklogicprogramaggregatingsets (class in neurolang.logic.expression_processing)": [[64, "neurolang.logic.expression_processing.WalkLogicProgramAggregatingSets"]], "build_conjunction() (neurolang.logic.expression_processing.translatetologic method)": [[64, "neurolang.logic.expression_processing.TranslateToLogic.build_conjunction"]], "build_disjunction() (neurolang.logic.expression_processing.translatetologic method)": [[64, "neurolang.logic.expression_processing.TranslateToLogic.build_disjunction"]], "build_negation() (neurolang.logic.expression_processing.translatetologic method)": [[64, "neurolang.logic.expression_processing.TranslateToLogic.build_negation"]], "conjunction() (neurolang.logic.expression_processing.walklogicprogramaggregatingsets method)": [[64, "neurolang.logic.expression_processing.WalkLogicProgramAggregatingSets.conjunction"]], "constant() (neurolang.logic.expression_processing.extractlogicatoms method)": [[64, "neurolang.logic.expression_processing.ExtractLogicAtoms.constant"]], "constant() (neurolang.logic.expression_processing.extractlogicpredicates method)": [[64, "neurolang.logic.expression_processing.ExtractLogicPredicates.constant"]], "disjunction() (neurolang.logic.expression_processing.walklogicprogramaggregatingsets method)": [[64, "neurolang.logic.expression_processing.WalkLogicProgramAggregatingSets.disjunction"]], "evaluate_conjunction() (neurolang.logic.expression_processing.logicsolver method)": [[64, "neurolang.logic.expression_processing.LogicSolver.evaluate_conjunction"]], "evaluate_disjunction() (neurolang.logic.expression_processing.logicsolver method)": [[64, "neurolang.logic.expression_processing.LogicSolver.evaluate_disjunction"]], "evaluate_implication() (neurolang.logic.expression_processing.logicsolver method)": [[64, "neurolang.logic.expression_processing.LogicSolver.evaluate_implication"]], "evaluate_implication_false_antecedent() (neurolang.logic.expression_processing.logicsolver method)": [[64, "neurolang.logic.expression_processing.LogicSolver.evaluate_implication_false_antecedent"]], "evaluate_implication_false_consequent() (neurolang.logic.expression_processing.logicsolver method)": [[64, "neurolang.logic.expression_processing.LogicSolver.evaluate_implication_false_consequent"]], "evaluate_implication_true_antecedent() (neurolang.logic.expression_processing.logicsolver method)": [[64, "neurolang.logic.expression_processing.LogicSolver.evaluate_implication_true_antecedent"]], "evaluate_implication_true_consequent() (neurolang.logic.expression_processing.logicsolver method)": [[64, "neurolang.logic.expression_processing.LogicSolver.evaluate_implication_true_consequent"]], "evaluate_negation() (neurolang.logic.expression_processing.logicsolver method)": [[64, "neurolang.logic.expression_processing.LogicSolver.evaluate_negation"]], "existential_predicate() (neurolang.logic.expression_processing.hasexistentialpredicates method)": [[64, "neurolang.logic.expression_processing.HasExistentialPredicates.existential_predicate"]], "extract_logic_atoms() (in module neurolang.logic.expression_processing)": [[64, "neurolang.logic.expression_processing.extract_logic_atoms"]], "extract_logic_free_variables() (in module neurolang.logic.expression_processing)": [[64, "neurolang.logic.expression_processing.extract_logic_free_variables"]], "extract_logic_predicates() (in module neurolang.logic.expression_processing)": [[64, "neurolang.logic.expression_processing.extract_logic_predicates"]], "extract_predicates_fa() (neurolang.logic.expression_processing.extractlogicatoms method)": [[64, "neurolang.logic.expression_processing.ExtractLogicAtoms.extract_predicates_fa"]], "extract_predicates_fa() (neurolang.logic.expression_processing.extractlogicpredicates method)": [[64, "neurolang.logic.expression_processing.ExtractLogicPredicates.extract_predicates_fa"]], "extract_variables_fa() (neurolang.logic.expression_processing.extractfreevariableswalker method)": [[64, "neurolang.logic.expression_processing.ExtractFreeVariablesWalker.extract_variables_fa"]], "extract_variables_q() (neurolang.logic.expression_processing.extractfreevariableswalker method)": [[64, "neurolang.logic.expression_processing.ExtractFreeVariablesWalker.extract_variables_q"]], "extract_variables_s() (neurolang.logic.expression_processing.extractfreevariableswalker method)": [[64, "neurolang.logic.expression_processing.ExtractFreeVariablesWalker.extract_variables_s"]], "extract_variables_symbol() (neurolang.logic.expression_processing.extractfreevariableswalker method)": [[64, "neurolang.logic.expression_processing.ExtractFreeVariablesWalker.extract_variables_symbol"]], "has_existential_quantifiers() (in module neurolang.logic.expression_processing)": [[64, "neurolang.logic.expression_processing.has_existential_quantifiers"]], "is_logic_function_application() (in module neurolang.logic.expression_processing)": [[64, "neurolang.logic.expression_processing.is_logic_function_application"]], "logic_operator() (neurolang.logic.expression_processing.walklogicprogramaggregatingsets method)": [[64, "neurolang.logic.expression_processing.WalkLogicProgramAggregatingSets.logic_operator"]], "nary() (neurolang.logic.expression_processing.hasexistentialpredicates method)": [[64, "neurolang.logic.expression_processing.HasExistentialPredicates.nary"]], "negation() (neurolang.logic.expression_processing.extractlogicpredicates method)": [[64, "neurolang.logic.expression_processing.ExtractLogicPredicates.negation"]], "negation() (neurolang.logic.expression_processing.walklogicprogramaggregatingsets method)": [[64, "neurolang.logic.expression_processing.WalkLogicProgramAggregatingSets.negation"]], "neurolang.logic.expression_processing": [[64, "module-neurolang.logic.expression_processing"]], "operator() (neurolang.logic.expression_processing.hasexistentialpredicates method)": [[64, "neurolang.logic.expression_processing.HasExistentialPredicates.operator"]], "quantifier() (neurolang.logic.expression_processing.walklogicprogramaggregatingsets method)": [[64, "neurolang.logic.expression_processing.WalkLogicProgramAggregatingSets.quantifier"]], "symbol() (neurolang.logic.expression_processing.extractlogicatoms method)": [[64, "neurolang.logic.expression_processing.ExtractLogicAtoms.symbol"]], "symbol() (neurolang.logic.expression_processing.extractlogicpredicates method)": [[64, "neurolang.logic.expression_processing.ExtractLogicPredicates.symbol"]], "translate_logic_operator() (neurolang.logic.expression_processing.translatetologic method)": [[64, "neurolang.logic.expression_processing.TranslateToLogic.translate_logic_operator"]], "type (neurolang.logic.expression_processing.extractfreevariableswalker attribute)": [[64, "neurolang.logic.expression_processing.ExtractFreeVariablesWalker.type"]], "type (neurolang.logic.expression_processing.extractlogicatoms attribute)": [[64, "neurolang.logic.expression_processing.ExtractLogicAtoms.type"]], "type (neurolang.logic.expression_processing.extractlogicpredicates attribute)": [[64, "neurolang.logic.expression_processing.ExtractLogicPredicates.type"]], "type (neurolang.logic.expression_processing.hasexistentialpredicates attribute)": [[64, "neurolang.logic.expression_processing.HasExistentialPredicates.type"]], "type (neurolang.logic.expression_processing.logicsolver attribute)": [[64, "neurolang.logic.expression_processing.LogicSolver.type"]], "type (neurolang.logic.expression_processing.translatetologic attribute)": [[64, "neurolang.logic.expression_processing.TranslateToLogic.type"]], "type (neurolang.logic.expression_processing.walklogicprogramaggregatingsets attribute)": [[64, "neurolang.logic.expression_processing.WalkLogicProgramAggregatingSets.type"]], "union() (neurolang.logic.expression_processing.walklogicprogramaggregatingsets method)": [[64, "neurolang.logic.expression_processing.WalkLogicProgramAggregatingSets.union"]], "walk_binary_logic_expression() (neurolang.logic.expression_processing.walklogicprogramaggregatingsets method)": [[64, "neurolang.logic.expression_processing.WalkLogicProgramAggregatingSets.walk_binary_logic_expression"]], "walk_function_application() (neurolang.logic.expression_processing.hasexistentialpredicates method)": [[64, "neurolang.logic.expression_processing.HasExistentialPredicates.walk_function_application"]], "walk_nary() (neurolang.logic.expression_processing.walklogicprogramaggregatingsets method)": [[64, "neurolang.logic.expression_processing.WalkLogicProgramAggregatingSets.walk_nary"]], "convertsrnftohornclause (class in neurolang.logic.horn_clauses)": [[65, "neurolang.logic.horn_clauses.ConvertSRNFToHornClause"]], "fol2datalogmixin (class in neurolang.logic.horn_clauses)": [[65, "neurolang.logic.horn_clauses.Fol2DatalogMixin"]], "fol2datalogtranslationexception": [[65, "neurolang.logic.horn_clauses.Fol2DatalogTranslationException"]], "hornclause (class in neurolang.logic.horn_clauses)": [[65, "neurolang.logic.horn_clauses.HornClause"]], "hornfact (class in neurolang.logic.horn_clauses)": [[65, "neurolang.logic.horn_clauses.HornFact"]], "movenegationstoatomsorexistentialquantifiers (class in neurolang.logic.horn_clauses)": [[65, "neurolang.logic.horn_clauses.MoveNegationsToAtomsOrExistentialQuantifiers"]], "neurolangtranslatetohornclauseexception": [[65, "neurolang.logic.horn_clauses.NeuroLangTranslateToHornClauseException"]], "rangerestrictedvariables (class in neurolang.logic.horn_clauses)": [[65, "neurolang.logic.horn_clauses.RangeRestrictedVariables"]], "translatehornclausestodatalog (class in neurolang.logic.horn_clauses)": [[65, "neurolang.logic.horn_clauses.TranslateHornClausesToDatalog"]], "atom() (neurolang.logic.horn_clauses.convertsrnftohornclause method)": [[65, "neurolang.logic.horn_clauses.ConvertSRNFToHornClause.atom"]], "conjunction() (neurolang.logic.horn_clauses.convertsrnftohornclause method)": [[65, "neurolang.logic.horn_clauses.ConvertSRNFToHornClause.conjunction"]], "conjunction() (neurolang.logic.horn_clauses.rangerestrictedvariables method)": [[65, "neurolang.logic.horn_clauses.RangeRestrictedVariables.conjunction"]], "convert_srnf_to_horn_clauses() (in module neurolang.logic.horn_clauses)": [[65, "neurolang.logic.horn_clauses.convert_srnf_to_horn_clauses"]], "convert_to_srnf() (in module neurolang.logic.horn_clauses)": [[65, "neurolang.logic.horn_clauses.convert_to_srnf"]], "disjunction() (neurolang.logic.horn_clauses.convertsrnftohornclause method)": [[65, "neurolang.logic.horn_clauses.ConvertSRNFToHornClause.disjunction"]], "disjunction() (neurolang.logic.horn_clauses.rangerestrictedvariables method)": [[65, "neurolang.logic.horn_clauses.RangeRestrictedVariables.disjunction"]], "existential() (neurolang.logic.horn_clauses.convertsrnftohornclause method)": [[65, "neurolang.logic.horn_clauses.ConvertSRNFToHornClause.existential"]], "existential() (neurolang.logic.horn_clauses.rangerestrictedvariables method)": [[65, "neurolang.logic.horn_clauses.RangeRestrictedVariables.existential"]], "fol_query_to_datalog_program() (in module neurolang.logic.horn_clauses)": [[65, "neurolang.logic.horn_clauses.fol_query_to_datalog_program"]], "function() (neurolang.logic.horn_clauses.rangerestrictedvariables method)": [[65, "neurolang.logic.horn_clauses.RangeRestrictedVariables.function"]], "horn_fact() (neurolang.logic.horn_clauses.translatehornclausestodatalog method)": [[65, "neurolang.logic.horn_clauses.TranslateHornClausesToDatalog.horn_fact"]], "horn_rule() (neurolang.logic.horn_clauses.translatehornclausestodatalog method)": [[65, "neurolang.logic.horn_clauses.TranslateHornClausesToDatalog.horn_rule"]], "is_safe_range() (in module neurolang.logic.horn_clauses)": [[65, "neurolang.logic.horn_clauses.is_safe_range"]], "negated_atom() (neurolang.logic.horn_clauses.convertsrnftohornclause method)": [[65, "neurolang.logic.horn_clauses.ConvertSRNFToHornClause.negated_atom"]], "negated_existential() (neurolang.logic.horn_clauses.convertsrnftohornclause method)": [[65, "neurolang.logic.horn_clauses.ConvertSRNFToHornClause.negated_existential"]], "negated_existential() (neurolang.logic.horn_clauses.movenegationstoatomsorexistentialquantifiers method)": [[65, "neurolang.logic.horn_clauses.MoveNegationsToAtomsOrExistentialQuantifiers.negated_existential"]], "negation() (neurolang.logic.horn_clauses.rangerestrictedvariables method)": [[65, "neurolang.logic.horn_clauses.RangeRestrictedVariables.negation"]], "neurolang.logic.horn_clauses": [[65, "module-neurolang.logic.horn_clauses"]], "quantifier() (neurolang.logic.horn_clauses.translatehornclausestodatalog method)": [[65, "neurolang.logic.horn_clauses.TranslateHornClausesToDatalog.quantifier"]], "range_restricted_variables() (in module neurolang.logic.horn_clauses)": [[65, "neurolang.logic.horn_clauses.range_restricted_variables"]], "translate_horn_clauses_to_datalog() (in module neurolang.logic.horn_clauses)": [[65, "neurolang.logic.horn_clauses.translate_horn_clauses_to_datalog"]], "translate_implication() (neurolang.logic.horn_clauses.fol2datalogmixin method)": [[65, "neurolang.logic.horn_clauses.Fol2DatalogMixin.translate_implication"]], "type (neurolang.logic.horn_clauses.convertsrnftohornclause attribute)": [[65, "neurolang.logic.horn_clauses.ConvertSRNFToHornClause.type"]], "type (neurolang.logic.horn_clauses.fol2datalogmixin attribute)": [[65, "neurolang.logic.horn_clauses.Fol2DatalogMixin.type"]], "type (neurolang.logic.horn_clauses.hornclause attribute)": [[65, "neurolang.logic.horn_clauses.HornClause.type"]], "type (neurolang.logic.horn_clauses.hornfact attribute)": [[65, "neurolang.logic.horn_clauses.HornFact.type"]], "type (neurolang.logic.horn_clauses.movenegationstoatomsorexistentialquantifiers attribute)": [[65, "neurolang.logic.horn_clauses.MoveNegationsToAtomsOrExistentialQuantifiers.type"]], "type (neurolang.logic.horn_clauses.rangerestrictedvariables attribute)": [[65, "neurolang.logic.horn_clauses.RangeRestrictedVariables.type"]], "type (neurolang.logic.horn_clauses.translatehornclausestodatalog attribute)": [[65, "neurolang.logic.horn_clauses.TranslateHornClausesToDatalog.type"]], "union() (neurolang.logic.horn_clauses.translatehornclausestodatalog method)": [[65, "neurolang.logic.horn_clauses.TranslateHornClausesToDatalog.union"]], "unknown() (neurolang.logic.horn_clauses.convertsrnftohornclause method)": [[65, "neurolang.logic.horn_clauses.ConvertSRNFToHornClause.unknown"]], "checkconjunctivequerywithnegation (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.CheckConjunctiveQueryWithNegation"]], "collapseconjunctions (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.CollapseConjunctions"]], "collapseconjunctionsmixin (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.CollapseConjunctionsMixin"]], "collapsedisjunctions (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.CollapseDisjunctions"]], "collapsedisjunctionsmixin (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.CollapseDisjunctionsMixin"]], "desambiguatequantifiedvariables (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.DesambiguateQuantifiedVariables"]], "distributeconjunctions (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.DistributeConjunctions"]], "distributedisjunctions (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.DistributeDisjunctions"]], "distributeimplicationswithconjunctiveheads (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.DistributeImplicationsWithConjunctiveHeads"]], "distributeuniversalquantifiers (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.DistributeUniversalQuantifiers"]], "eliminateimplications (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.EliminateImplications"]], "extractboundvariables (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.ExtractBoundVariables"]], "extractconjunctivequerywithnegation (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.ExtractConjunctiveQueryWithNegation"]], "extractfolfreevariables (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.ExtractFOLFreeVariables"]], "fonegelogicexpression (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.FONegELogicExpression"]], "factorquantifiersmixin (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.FactorQuantifiersMixin"]], "freshenvariableswhenquantified (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.FreshenVariablesWhenQuantified"]], "guaranteeconjunction (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.GuaranteeConjunction"]], "guaranteedisjunction (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.GuaranteeDisjunction"]], "logicexpressionwalker (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.LogicExpressionWalker"]], "makeexistentialsimplicit (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.MakeExistentialsImplicit"]], "makeuniversalsimplicit (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.MakeUniversalsImplicit"]], "movenegationstoatoms (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.MoveNegationsToAtoms"]], "movenegationstoatomsinfonege (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.MoveNegationsToAtomsInFONegE"]], "movenegationstoatomsmixin (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.MoveNegationsToAtomsMixin"]], "movenegationstoatomssimpleoperationsmixin (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.MoveNegationsToAtomsSimpleOperationsMixin"]], "movequantifiersup (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.MoveQuantifiersUp"]], "movequantifiersupfonege (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.MoveQuantifiersUpFONegE"]], "pullexistentialupfromnegation (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.PullExistentialUpFromNegation"]], "pulluniversalupfromnegation (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.PullUniversalUpFromNegation"]], "pushexistentialsdown (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.PushExistentialsDown"]], "pushexistentialsdownmixin (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.PushExistentialsDownMixin"]], "pushquantifiersdown (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.PushQuantifiersDown"]], "pushuniversalsdown (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.PushUniversalsDown"]], "pushuniversalsdownmixin (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.PushUniversalsDownMixin"]], "removeduplicatedconjunctsdisjuncts (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.RemoveDuplicatedConjunctsDisjuncts"]], "removeexistentialonvariables (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.RemoveExistentialOnVariables"]], "removeexistentialpredicates (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.RemoveExistentialPredicates"]], "removetrivialoperations (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.RemoveTrivialOperations"]], "removetrivialoperationsmixin (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.RemoveTrivialOperationsMixin"]], "removeuniversalpredicates (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.RemoveUniversalPredicates"]], "replacefreesymbolwalker (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.ReplaceFreeSymbolWalker"]], "usedquantifiers (class in neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.UsedQuantifiers"]], "abort_implication() (neurolang.logic.transformations.fonegelogicexpression method)": [[66, "neurolang.logic.transformations.FONegELogicExpression.abort_implication"]], "abort_universal_predicate() (neurolang.logic.transformations.fonegelogicexpression method)": [[66, "neurolang.logic.transformations.FONegELogicExpression.abort_universal_predicate"]], "conjunction() (neurolang.logic.transformations.checkconjunctivequerywithnegation method)": [[66, "neurolang.logic.transformations.CheckConjunctiveQueryWithNegation.conjunction"]], "conjunction() (neurolang.logic.transformations.collapseconjunctionsmixin method)": [[66, "neurolang.logic.transformations.CollapseConjunctionsMixin.conjunction"]], "conjunction() (neurolang.logic.transformations.extractconjunctivequerywithnegation method)": [[66, "neurolang.logic.transformations.ExtractConjunctiveQueryWithNegation.conjunction"]], "conjunction() (neurolang.logic.transformations.removeduplicatedconjunctsdisjuncts method)": [[66, "neurolang.logic.transformations.RemoveDuplicatedConjunctsDisjuncts.conjunction"]], "conjunction() (neurolang.logic.transformations.usedquantifiers method)": [[66, "neurolang.logic.transformations.UsedQuantifiers.conjunction"]], "conjunction_with_quantifiers() (neurolang.logic.transformations.factorquantifiersmixin method)": [[66, "neurolang.logic.transformations.FactorQuantifiersMixin.conjunction_with_quantifiers"]], "convert_to_pnf_with_cnf_matrix() (in module neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.convert_to_pnf_with_cnf_matrix"]], "convert_to_pnf_with_dnf_matrix() (in module neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.convert_to_pnf_with_dnf_matrix"]], "default() (neurolang.logic.transformations.checkconjunctivequerywithnegation method)": [[66, "neurolang.logic.transformations.CheckConjunctiveQueryWithNegation.default"]], "disjunction() (neurolang.logic.transformations.collapsedisjunctionsmixin method)": [[66, "neurolang.logic.transformations.CollapseDisjunctionsMixin.disjunction"]], "disjunction() (neurolang.logic.transformations.removeduplicatedconjunctsdisjuncts method)": [[66, "neurolang.logic.transformations.RemoveDuplicatedConjunctsDisjuncts.disjunction"]], "disjunction() (neurolang.logic.transformations.usedquantifiers method)": [[66, "neurolang.logic.transformations.UsedQuantifiers.disjunction"]], "disjunction_with_quantifiers() (neurolang.logic.transformations.factorquantifiersmixin method)": [[66, "neurolang.logic.transformations.FactorQuantifiersMixin.disjunction_with_quantifiers"]], "distribute() (neurolang.logic.transformations.distributeconjunctions method)": [[66, "neurolang.logic.transformations.DistributeConjunctions.distribute"]], "distribute() (neurolang.logic.transformations.distributedisjunctions method)": [[66, "neurolang.logic.transformations.DistributeDisjunctions.distribute"]], "distribute_implication_with_conjunctive_head() (neurolang.logic.transformations.distributeimplicationswithconjunctiveheads method)": [[66, "neurolang.logic.transformations.DistributeImplicationsWithConjunctiveHeads.distribute_implication_with_conjunctive_head"]], "distribute_universal_quantifier() (neurolang.logic.transformations.distributeuniversalquantifiers method)": [[66, "neurolang.logic.transformations.DistributeUniversalQuantifiers.distribute_universal_quantifier"]], "dont_push_when_it_can_be_unsafe() (neurolang.logic.transformations.pushexistentialsdownmixin method)": [[66, "neurolang.logic.transformations.PushExistentialsDownMixin.dont_push_when_it_can_be_unsafe"]], "existential() (neurolang.logic.transformations.makeexistentialsimplicit method)": [[66, "neurolang.logic.transformations.MakeExistentialsImplicit.existential"]], "existential() (neurolang.logic.transformations.removeexistentialonvariables method)": [[66, "neurolang.logic.transformations.RemoveExistentialOnVariables.existential"]], "existential_predicate() (neurolang.logic.transformations.checkconjunctivequerywithnegation method)": [[66, "neurolang.logic.transformations.CheckConjunctiveQueryWithNegation.existential_predicate"]], "existential_predicate() (neurolang.logic.transformations.extractconjunctivequerywithnegation method)": [[66, "neurolang.logic.transformations.ExtractConjunctiveQueryWithNegation.existential_predicate"]], "existential_predicate() (neurolang.logic.transformations.removeexistentialpredicates method)": [[66, "neurolang.logic.transformations.RemoveExistentialPredicates.existential_predicate"]], "extract_variables_s() (neurolang.logic.transformations.extractfolfreevariables method)": [[66, "neurolang.logic.transformations.ExtractFOLFreeVariables.extract_variables_s"]], "f_app() (neurolang.logic.transformations.checkconjunctivequerywithnegation method)": [[66, "neurolang.logic.transformations.CheckConjunctiveQueryWithNegation.f_app"]], "f_app() (neurolang.logic.transformations.extractconjunctivequerywithnegation method)": [[66, "neurolang.logic.transformations.ExtractConjunctiveQueryWithNegation.f_app"]], "function() (neurolang.logic.transformations.usedquantifiers method)": [[66, "neurolang.logic.transformations.UsedQuantifiers.function"]], "guarantee_conjunction() (neurolang.logic.transformations.guaranteeconjunction method)": [[66, "neurolang.logic.transformations.GuaranteeConjunction.guarantee_conjunction"]], "guarantee_conjunction() (neurolang.logic.transformations.guaranteedisjunction method)": [[66, "neurolang.logic.transformations.GuaranteeDisjunction.guarantee_conjunction"]], "implication() (neurolang.logic.transformations.desambiguatequantifiedvariables method)": [[66, "neurolang.logic.transformations.DesambiguateQuantifiedVariables.implication"]], "implication() (neurolang.logic.transformations.usedquantifiers method)": [[66, "neurolang.logic.transformations.UsedQuantifiers.implication"]], "nary_logic_operator() (neurolang.logic.transformations.desambiguatequantifiedvariables method)": [[66, "neurolang.logic.transformations.DesambiguateQuantifiedVariables.nary_logic_operator"]], "nary_op_has_duplicated_formulas() (in module neurolang.logic.transformations)": [[66, "neurolang.logic.transformations.nary_op_has_duplicated_formulas"]], "neg() (neurolang.logic.transformations.extractconjunctivequerywithnegation method)": [[66, "neurolang.logic.transformations.ExtractConjunctiveQueryWithNegation.neg"]], "negated_conjunction() (neurolang.logic.transformations.movenegationstoatomssimpleoperationsmixin method)": [[66, "neurolang.logic.transformations.MoveNegationsToAtomsSimpleOperationsMixin.negated_conjunction"]], "negated_disjunction() (neurolang.logic.transformations.movenegationstoatomssimpleoperationsmixin method)": [[66, "neurolang.logic.transformations.MoveNegationsToAtomsSimpleOperationsMixin.negated_disjunction"]], "negated_existential() (neurolang.logic.transformations.pullexistentialupfromnegation method)": [[66, "neurolang.logic.transformations.PullExistentialUpFromNegation.negated_existential"]], "negated_universal() (neurolang.logic.transformations.pulluniversalupfromnegation method)": [[66, "neurolang.logic.transformations.PullUniversalUpFromNegation.negated_universal"]], "negation() (neurolang.logic.transformations.checkconjunctivequerywithnegation method)": [[66, "neurolang.logic.transformations.CheckConjunctiveQueryWithNegation.negation"]], "negation() (neurolang.logic.transformations.usedquantifiers method)": [[66, "neurolang.logic.transformations.UsedQuantifiers.negation"]], "nested_existential() (neurolang.logic.transformations.pushexistentialsdownmixin method)": [[66, "neurolang.logic.transformations.PushExistentialsDownMixin.nested_existential"]], "neurolang.logic.transformations": [[66, "module-neurolang.logic.transformations"]], "process_function_application() (neurolang.logic.transformations.extractboundvariables method)": [[66, "neurolang.logic.transformations.ExtractBoundVariables.process_function_application"]], "process_symbol() (neurolang.logic.transformations.extractboundvariables method)": [[66, "neurolang.logic.transformations.ExtractBoundVariables.process_symbol"]], "pure_conjunction() (neurolang.logic.transformations.extractconjunctivequerywithnegation method)": [[66, "neurolang.logic.transformations.ExtractConjunctiveQueryWithNegation.pure_conjunction"]], "push_eliminate_trivial_operation() (neurolang.logic.transformations.pushexistentialsdownmixin method)": [[66, "neurolang.logic.transformations.PushExistentialsDownMixin.push_eliminate_trivial_operation"]], "push_eliminate_trivial_operation() (neurolang.logic.transformations.pushuniversalsdownmixin method)": [[66, "neurolang.logic.transformations.PushUniversalsDownMixin.push_eliminate_trivial_operation"]], "push_existential_down() (neurolang.logic.transformations.pushexistentialsdownmixin method)": [[66, "neurolang.logic.transformations.PushExistentialsDownMixin.push_existential_down"]], "push_existential_down_disjunction() (neurolang.logic.transformations.pushexistentialsdownmixin method)": [[66, "neurolang.logic.transformations.PushExistentialsDownMixin.push_existential_down_disjunction"]], "push_universal_down_conjunction() (neurolang.logic.transformations.pushuniversalsdownmixin method)": [[66, "neurolang.logic.transformations.PushUniversalsDownMixin.push_universal_down_conjunction"]], "push_universal_down_disjunction() (neurolang.logic.transformations.pushuniversalsdownmixin method)": [[66, "neurolang.logic.transformations.PushUniversalsDownMixin.push_universal_down_disjunction"]], "quantifier() (neurolang.logic.transformations.desambiguatequantifiedvariables method)": [[66, "neurolang.logic.transformations.DesambiguateQuantifiedVariables.quantifier"]], "quantifier() (neurolang.logic.transformations.extractboundvariables method)": [[66, "neurolang.logic.transformations.ExtractBoundVariables.quantifier"]], "quantifier() (neurolang.logic.transformations.usedquantifiers method)": [[66, "neurolang.logic.transformations.UsedQuantifiers.quantifier"]], "remove_double_negation() (neurolang.logic.transformations.removetrivialoperationsmixin method)": [[66, "neurolang.logic.transformations.RemoveTrivialOperationsMixin.remove_double_negation"]], "remove_implication() (neurolang.logic.transformations.eliminateimplications method)": [[66, "neurolang.logic.transformations.EliminateImplications.remove_implication"]], "remove_single() (neurolang.logic.transformations.removetrivialoperationsmixin method)": [[66, "neurolang.logic.transformations.RemoveTrivialOperationsMixin.remove_single"]], "remove_trivial_existential() (neurolang.logic.transformations.pushexistentialsdownmixin method)": [[66, "neurolang.logic.transformations.PushExistentialsDownMixin.remove_trivial_existential"]], "remove_trivial_universal() (neurolang.logic.transformations.pushuniversalsdownmixin method)": [[66, "neurolang.logic.transformations.PushUniversalsDownMixin.remove_trivial_universal"]], "replace_variable_in_quantifier() (neurolang.logic.transformations.freshenvariableswhenquantified method)": [[66, "neurolang.logic.transformations.FreshenVariablesWhenQuantified.replace_variable_in_quantifier"]], "rotate() (neurolang.logic.transformations.distributeconjunctions method)": [[66, "neurolang.logic.transformations.DistributeConjunctions.rotate"]], "rotate() (neurolang.logic.transformations.distributedisjunctions method)": [[66, "neurolang.logic.transformations.DistributeDisjunctions.rotate"]], "split() (neurolang.logic.transformations.distributeconjunctions method)": [[66, "neurolang.logic.transformations.DistributeConjunctions.split"]], "split() (neurolang.logic.transformations.distributedisjunctions method)": [[66, "neurolang.logic.transformations.DistributeDisjunctions.split"]], "stop_if_bound() (neurolang.logic.transformations.replacefreesymbolwalker method)": [[66, "neurolang.logic.transformations.ReplaceFreeSymbolWalker.stop_if_bound"]], "symbol() (neurolang.logic.transformations.usedquantifiers method)": [[66, "neurolang.logic.transformations.UsedQuantifiers.symbol"]], "type (neurolang.logic.transformations.checkconjunctivequerywithnegation attribute)": [[66, "neurolang.logic.transformations.CheckConjunctiveQueryWithNegation.type"]], "type (neurolang.logic.transformations.collapseconjunctions attribute)": [[66, "neurolang.logic.transformations.CollapseConjunctions.type"]], "type (neurolang.logic.transformations.collapseconjunctionsmixin attribute)": [[66, "neurolang.logic.transformations.CollapseConjunctionsMixin.type"]], "type (neurolang.logic.transformations.collapsedisjunctions attribute)": [[66, "neurolang.logic.transformations.CollapseDisjunctions.type"]], "type (neurolang.logic.transformations.collapsedisjunctionsmixin attribute)": [[66, "neurolang.logic.transformations.CollapseDisjunctionsMixin.type"]], "type (neurolang.logic.transformations.desambiguatequantifiedvariables attribute)": [[66, "neurolang.logic.transformations.DesambiguateQuantifiedVariables.type"]], "type (neurolang.logic.transformations.distributeconjunctions attribute)": [[66, "neurolang.logic.transformations.DistributeConjunctions.type"]], "type (neurolang.logic.transformations.distributedisjunctions attribute)": [[66, "neurolang.logic.transformations.DistributeDisjunctions.type"]], "type (neurolang.logic.transformations.distributeimplicationswithconjunctiveheads attribute)": [[66, "neurolang.logic.transformations.DistributeImplicationsWithConjunctiveHeads.type"]], "type (neurolang.logic.transformations.distributeuniversalquantifiers attribute)": [[66, "neurolang.logic.transformations.DistributeUniversalQuantifiers.type"]], "type (neurolang.logic.transformations.eliminateimplications attribute)": [[66, "neurolang.logic.transformations.EliminateImplications.type"]], "type (neurolang.logic.transformations.extractboundvariables attribute)": [[66, "neurolang.logic.transformations.ExtractBoundVariables.type"]], "type (neurolang.logic.transformations.extractconjunctivequerywithnegation attribute)": [[66, "neurolang.logic.transformations.ExtractConjunctiveQueryWithNegation.type"]], "type (neurolang.logic.transformations.extractfolfreevariables attribute)": [[66, "neurolang.logic.transformations.ExtractFOLFreeVariables.type"]], "type (neurolang.logic.transformations.fonegelogicexpression attribute)": [[66, "neurolang.logic.transformations.FONegELogicExpression.type"]], "type (neurolang.logic.transformations.factorquantifiersmixin attribute)": [[66, "neurolang.logic.transformations.FactorQuantifiersMixin.type"]], "type (neurolang.logic.transformations.freshenvariableswhenquantified attribute)": [[66, "neurolang.logic.transformations.FreshenVariablesWhenQuantified.type"]], "type (neurolang.logic.transformations.guaranteeconjunction attribute)": [[66, "neurolang.logic.transformations.GuaranteeConjunction.type"]], "type (neurolang.logic.transformations.guaranteedisjunction attribute)": [[66, "neurolang.logic.transformations.GuaranteeDisjunction.type"]], "type (neurolang.logic.transformations.logicexpressionwalker attribute)": [[66, "neurolang.logic.transformations.LogicExpressionWalker.type"]], "type (neurolang.logic.transformations.makeexistentialsimplicit attribute)": [[66, "neurolang.logic.transformations.MakeExistentialsImplicit.type"]], "type (neurolang.logic.transformations.makeuniversalsimplicit attribute)": [[66, "neurolang.logic.transformations.MakeUniversalsImplicit.type"]], "type (neurolang.logic.transformations.movenegationstoatoms attribute)": [[66, "neurolang.logic.transformations.MoveNegationsToAtoms.type"]], "type (neurolang.logic.transformations.movenegationstoatomsinfonege attribute)": [[66, "neurolang.logic.transformations.MoveNegationsToAtomsInFONegE.type"]], "type (neurolang.logic.transformations.movenegationstoatomsmixin attribute)": [[66, "neurolang.logic.transformations.MoveNegationsToAtomsMixin.type"]], "type (neurolang.logic.transformations.movenegationstoatomssimpleoperationsmixin attribute)": [[66, "neurolang.logic.transformations.MoveNegationsToAtomsSimpleOperationsMixin.type"]], "type (neurolang.logic.transformations.movequantifiersup attribute)": [[66, "neurolang.logic.transformations.MoveQuantifiersUp.type"]], "type (neurolang.logic.transformations.movequantifiersupfonege attribute)": [[66, "neurolang.logic.transformations.MoveQuantifiersUpFONegE.type"]], "type (neurolang.logic.transformations.pullexistentialupfromnegation attribute)": [[66, "neurolang.logic.transformations.PullExistentialUpFromNegation.type"]], "type (neurolang.logic.transformations.pulluniversalupfromnegation attribute)": [[66, "neurolang.logic.transformations.PullUniversalUpFromNegation.type"]], "type (neurolang.logic.transformations.pushexistentialsdown attribute)": [[66, "neurolang.logic.transformations.PushExistentialsDown.type"]], "type (neurolang.logic.transformations.pushexistentialsdownmixin attribute)": [[66, "neurolang.logic.transformations.PushExistentialsDownMixin.type"]], "type (neurolang.logic.transformations.pushquantifiersdown attribute)": [[66, "neurolang.logic.transformations.PushQuantifiersDown.type"]], "type (neurolang.logic.transformations.pushuniversalsdown attribute)": [[66, "neurolang.logic.transformations.PushUniversalsDown.type"]], "type (neurolang.logic.transformations.pushuniversalsdownmixin attribute)": [[66, "neurolang.logic.transformations.PushUniversalsDownMixin.type"]], "type (neurolang.logic.transformations.removeduplicatedconjunctsdisjuncts attribute)": [[66, "neurolang.logic.transformations.RemoveDuplicatedConjunctsDisjuncts.type"]], "type (neurolang.logic.transformations.removeexistentialonvariables attribute)": [[66, "neurolang.logic.transformations.RemoveExistentialOnVariables.type"]], "type (neurolang.logic.transformations.removeexistentialpredicates attribute)": [[66, "neurolang.logic.transformations.RemoveExistentialPredicates.type"]], "type (neurolang.logic.transformations.removetrivialoperations attribute)": [[66, "neurolang.logic.transformations.RemoveTrivialOperations.type"]], "type (neurolang.logic.transformations.removetrivialoperationsmixin attribute)": [[66, "neurolang.logic.transformations.RemoveTrivialOperationsMixin.type"]], "type (neurolang.logic.transformations.removeuniversalpredicates attribute)": [[66, "neurolang.logic.transformations.RemoveUniversalPredicates.type"]], "type (neurolang.logic.transformations.replacefreesymbolwalker attribute)": [[66, "neurolang.logic.transformations.ReplaceFreeSymbolWalker.type"]], "type (neurolang.logic.transformations.usedquantifiers attribute)": [[66, "neurolang.logic.transformations.UsedQuantifiers.type"]], "universal() (neurolang.logic.transformations.makeuniversalsimplicit method)": [[66, "neurolang.logic.transformations.MakeUniversalsImplicit.universal"]], "universal() (neurolang.logic.transformations.removeuniversalpredicates method)": [[66, "neurolang.logic.transformations.RemoveUniversalPredicates.universal"]], "walk_constant() (neurolang.logic.transformations.logicexpressionwalker method)": [[66, "neurolang.logic.transformations.LogicExpressionWalker.walk_constant"]], "walk_function() (neurolang.logic.transformations.logicexpressionwalker method)": [[66, "neurolang.logic.transformations.LogicExpressionWalker.walk_function"]], "walk_implication() (neurolang.logic.transformations.logicexpressionwalker method)": [[66, "neurolang.logic.transformations.LogicExpressionWalker.walk_implication"]], "walk_nary() (neurolang.logic.transformations.logicexpressionwalker method)": [[66, "neurolang.logic.transformations.LogicExpressionWalker.walk_nary"]], "walk_negation() (neurolang.logic.transformations.logicexpressionwalker method)": [[66, "neurolang.logic.transformations.LogicExpressionWalker.walk_negation"]], "walk_quantifier() (neurolang.logic.transformations.logicexpressionwalker method)": [[66, "neurolang.logic.transformations.LogicExpressionWalker.walk_quantifier"]], "walk_symbol() (neurolang.logic.transformations.logicexpressionwalker method)": [[66, "neurolang.logic.transformations.LogicExpressionWalker.walk_symbol"]], "walk_through_implication() (neurolang.logic.transformations.freshenvariableswhenquantified method)": [[66, "neurolang.logic.transformations.FreshenVariablesWhenQuantified.walk_through_implication"]], "apply_substitution() (in module neurolang.logic.unification)": [[67, "neurolang.logic.unification.apply_substitution"]], "apply_substitution_arguments() (in module neurolang.logic.unification)": [[67, "neurolang.logic.unification.apply_substitution_arguments"]], "compose_substitutions() (in module neurolang.logic.unification)": [[67, "neurolang.logic.unification.compose_substitutions"]], "merge_substitutions() (in module neurolang.logic.unification)": [[67, "neurolang.logic.unification.merge_substitutions"]], "most_general_unifier() (in module neurolang.logic.unification)": [[67, "neurolang.logic.unification.most_general_unifier"]], "most_general_unifier_arguments() (in module neurolang.logic.unification)": [[67, "neurolang.logic.unification.most_general_unifier_arguments"]], "most_general_unifier_extract_arguments() (in module neurolang.logic.unification)": [[67, "neurolang.logic.unification.most_general_unifier_extract_arguments"]], "neurolang.logic.unification": [[67, "module-neurolang.logic.unification"]], "explicitvbr (class in neurolang.neurolang)": [[68, "neurolang.neurolang.ExplicitVBR"]], "explicitvbroverlay (class in neurolang.neurolang)": [[68, "neurolang.neurolang.ExplicitVBROverlay"]], "neurolangdl (class in neurolang.neurolang)": [[68, "neurolang.neurolang.NeurolangDL"]], "neurolangpdl (class in neurolang.neurolang)": [[68, "neurolang.neurolang.NeurolangPDL"]], "aabb_tree (neurolang.neurolang.explicitvbr property)": [[68, "neurolang.neurolang.ExplicitVBR.aabb_tree"]], "add_probabilistic_choice_from_tuples() (neurolang.neurolang.neurolangpdl method)": [[68, "neurolang.neurolang.NeurolangPDL.add_probabilistic_choice_from_tuples"]], "add_probabilistic_facts_from_tuples() (neurolang.neurolang.neurolangpdl method)": [[68, "neurolang.neurolang.NeurolangPDL.add_probabilistic_facts_from_tuples"]], "add_uniform_probabilistic_choice_over_set() (neurolang.neurolang.neurolangpdl method)": [[68, "neurolang.neurolang.NeurolangPDL.add_uniform_probabilistic_choice_over_set"]], "bounding_box (neurolang.neurolang.explicitvbr property)": [[68, "neurolang.neurolang.ExplicitVBR.bounding_box"]], "build_tree() (neurolang.neurolang.explicitvbr method)": [[68, "neurolang.neurolang.ExplicitVBR.build_tree"]], "current_program (neurolang.neurolang.neurolangpdl property)": [[68, "neurolang.neurolang.NeurolangPDL.current_program"]], "generate_bounding_box() (neurolang.neurolang.explicitvbr method)": [[68, "neurolang.neurolang.ExplicitVBR.generate_bounding_box"]], "load_ontology() (neurolang.neurolang.neurolangpdl method)": [[68, "neurolang.neurolang.NeurolangPDL.load_ontology"]], "neurolang.neurolang": [[68, "module-neurolang.neurolang"]], "solve_all() (neurolang.neurolang.neurolangpdl method)": [[68, "neurolang.neurolang.NeurolangPDL.solve_all"]], "spatial_image() (neurolang.neurolang.explicitvbr method)": [[68, "neurolang.neurolang.ExplicitVBR.spatial_image"]], "spatial_image() (neurolang.neurolang.explicitvbroverlay method)": [[68, "neurolang.neurolang.ExplicitVBROverlay.spatial_image"]], "to_ijk() (neurolang.neurolang.explicitvbr method)": [[68, "neurolang.neurolang.ExplicitVBR.to_ijk"]], "to_xyz() (neurolang.neurolang.explicitvbr method)": [[68, "neurolang.neurolang.ExplicitVBR.to_xyz"]], "neurolangintermediaterepresentationcompiler (class in neurolang.neurolang_compiler)": [[69, "neurolang.neurolang_compiler.NeuroLangIntermediateRepresentationCompiler"]], "compile() (neurolang.neurolang_compiler.neurolangintermediaterepresentationcompiler method)": [[69, "neurolang.neurolang_compiler.NeuroLangIntermediateRepresentationCompiler.compile"]], "neurolang.neurolang_compiler": [[69, "module-neurolang.neurolang_compiler"]], "pop_scope() (neurolang.neurolang_compiler.neurolangintermediaterepresentationcompiler method)": [[69, "neurolang.neurolang_compiler.NeuroLangIntermediateRepresentationCompiler.pop_scope"]], "push_scope() (neurolang.neurolang_compiler.neurolangintermediaterepresentationcompiler method)": [[69, "neurolang.neurolang_compiler.NeuroLangIntermediateRepresentationCompiler.push_scope"]], "symbol_table (neurolang.neurolang_compiler.neurolangintermediaterepresentationcompiler property)": [[69, "neurolang.neurolang_compiler.NeuroLangIntermediateRepresentationCompiler.symbol_table"]], "boundary (class in neurolang.perior_tree)": [[70, "neurolang.perior_tree.Boundary"]], "boundedaabb (class in neurolang.perior_tree)": [[70, "neurolang.perior_tree.BoundedAABB"]], "node (class in neurolang.perior_tree)": [[70, "neurolang.perior_tree.Node"]], "tree (class in neurolang.perior_tree)": [[70, "neurolang.perior_tree.Tree"]], "add() (neurolang.perior_tree.tree method)": [[70, "neurolang.perior_tree.Tree.add"]], "adjust_direction() (neurolang.perior_tree.boundary method)": [[70, "neurolang.perior_tree.Boundary.adjust_direction"]], "adjust_position() (neurolang.perior_tree.boundary method)": [[70, "neurolang.perior_tree.Boundary.adjust_position"]], "adjust_to_bound() (neurolang.perior_tree.boundedaabb method)": [[70, "neurolang.perior_tree.BoundedAABB.adjust_to_bound"]], "cardinal_tiles() (neurolang.perior_tree.boundedaabb method)": [[70, "neurolang.perior_tree.BoundedAABB.cardinal_tiles"]], "center (neurolang.perior_tree.boundedaabb property)": [[70, "neurolang.perior_tree.BoundedAABB.center"]], "contains() (neurolang.perior_tree.boundedaabb method)": [[70, "neurolang.perior_tree.BoundedAABB.contains"]], "contains_tuple() (neurolang.perior_tree.boundedaabb method)": [[70, "neurolang.perior_tree.BoundedAABB.contains_tuple"]], "direction_matrix() (neurolang.perior_tree.boundedaabb method)": [[70, "neurolang.perior_tree.BoundedAABB.direction_matrix"]], "expand() (neurolang.perior_tree.boundedaabb method)": [[70, "neurolang.perior_tree.BoundedAABB.expand"]], "expand_object() (neurolang.perior_tree.boundedaabb method)": [[70, "neurolang.perior_tree.BoundedAABB.expand_object"]], "expand_region_box() (neurolang.perior_tree.tree method)": [[70, "neurolang.perior_tree.Tree.expand_region_box"]], "expand_tuple() (neurolang.perior_tree.boundedaabb method)": [[70, "neurolang.perior_tree.BoundedAABB.expand_tuple"]], "intersects() (neurolang.perior_tree.boundedaabb method)": [[70, "neurolang.perior_tree.BoundedAABB.intersects"]], "is_leaf (neurolang.perior_tree.node property)": [[70, "neurolang.perior_tree.Node.is_leaf"]], "methdispatch() (in module neurolang.perior_tree)": [[70, "neurolang.perior_tree.methdispatch"]], "neurolang.perior_tree": [[70, "module-neurolang.perior_tree"]], "query_regions_axdir() (neurolang.perior_tree.tree method)": [[70, "neurolang.perior_tree.Tree.query_regions_axdir"]], "query_regions_contained_in_box() (neurolang.perior_tree.tree method)": [[70, "neurolang.perior_tree.Tree.query_regions_contained_in_box"]], "volume (neurolang.perior_tree.boundedaabb property)": [[70, "neurolang.perior_tree.BoundedAABB.volume"]], "width (neurolang.perior_tree.boundedaabb property)": [[70, "neurolang.perior_tree.BoundedAABB.width"]], "neurolang.probabilistic": [[71, "module-neurolang.probabilistic"]], "is_contained() (in module neurolang.probabilistic.containment)": [[72, "neurolang.probabilistic.containment.is_contained"]], "is_contained_rule() (in module neurolang.probabilistic.containment)": [[72, "neurolang.probabilistic.containment.is_contained_rule"]], "neurolang.probabilistic.containment": [[72, "module-neurolang.probabilistic.containment"]], "build_always_true_provenance_relation() (in module neurolang.probabilistic.cplogic)": [[73, "neurolang.probabilistic.cplogic.build_always_true_provenance_relation"]], "fresh_name_relation() (in module neurolang.probabilistic.cplogic)": [[73, "neurolang.probabilistic.cplogic.fresh_name_relation"]], "neurolang.probabilistic.cplogic": [[73, "module-neurolang.probabilistic.cplogic"]], "rename_columns_for_args_to_match() (in module neurolang.probabilistic.cplogic)": [[73, "neurolang.probabilistic.cplogic.rename_columns_for_args_to_match"]], "andplatenode (class in neurolang.probabilistic.cplogic.cplogic_to_gm)": [[74, "neurolang.probabilistic.cplogic.cplogic_to_gm.AndPlateNode"]], "bernoulliplatenode (class in neurolang.probabilistic.cplogic.cplogic_to_gm)": [[74, "neurolang.probabilistic.cplogic.cplogic_to_gm.BernoulliPlateNode"]], "cplogicgroundingtographicalmodeltranslator (class in neurolang.probabilistic.cplogic.cplogic_to_gm)": [[74, "neurolang.probabilistic.cplogic.cplogic_to_gm.CPLogicGroundingToGraphicalModelTranslator"]], "graphicalmodel (class in neurolang.probabilistic.cplogic.cplogic_to_gm)": [[74, "neurolang.probabilistic.cplogic.cplogic_to_gm.GraphicalModel"]], "narychoiceplatenode (class in neurolang.probabilistic.cplogic.cplogic_to_gm)": [[74, "neurolang.probabilistic.cplogic.cplogic_to_gm.NaryChoicePlateNode"]], "narychoiceresultplatenode (class in neurolang.probabilistic.cplogic.cplogic_to_gm)": [[74, "neurolang.probabilistic.cplogic.cplogic_to_gm.NaryChoiceResultPlateNode"]], "platenode (class in neurolang.probabilistic.cplogic.cplogic_to_gm)": [[74, "neurolang.probabilistic.cplogic.cplogic_to_gm.PlateNode"]], "probabilisticplatenode (class in neurolang.probabilistic.cplogic.cplogic_to_gm)": [[74, "neurolang.probabilistic.cplogic.cplogic_to_gm.ProbabilisticPlateNode"]], "add_plate_node() (neurolang.probabilistic.cplogic.cplogic_to_gm.cplogicgroundingtographicalmodeltranslator method)": [[74, "neurolang.probabilistic.cplogic.cplogic_to_gm.CPLogicGroundingToGraphicalModelTranslator.add_plate_node"]], "block_of_groundings() (neurolang.probabilistic.cplogic.cplogic_to_gm.cplogicgroundingtographicalmodeltranslator method)": [[74, "neurolang.probabilistic.cplogic.cplogic_to_gm.CPLogicGroundingToGraphicalModelTranslator.block_of_groundings"]], "extensional_set_grounding() (neurolang.probabilistic.cplogic.cplogic_to_gm.cplogicgroundingtographicalmodeltranslator method)": [[74, "neurolang.probabilistic.cplogic.cplogic_to_gm.CPLogicGroundingToGraphicalModelTranslator.extensional_set_grounding"]], "get_node() (neurolang.probabilistic.cplogic.cplogic_to_gm.graphicalmodel method)": [[74, "neurolang.probabilistic.cplogic.cplogic_to_gm.GraphicalModel.get_node"]], "get_parent_node_symbols() (neurolang.probabilistic.cplogic.cplogic_to_gm.graphicalmodel method)": [[74, "neurolang.probabilistic.cplogic.cplogic_to_gm.GraphicalModel.get_parent_node_symbols"]], "intensional_rule_grounding() (neurolang.probabilistic.cplogic.cplogic_to_gm.cplogicgroundingtographicalmodeltranslator method)": [[74, "neurolang.probabilistic.cplogic.cplogic_to_gm.CPLogicGroundingToGraphicalModelTranslator.intensional_rule_grounding"]], "is_extensional_grounding() (in module neurolang.probabilistic.cplogic.cplogic_to_gm)": [[74, "neurolang.probabilistic.cplogic.cplogic_to_gm.is_extensional_grounding"]], "neurolang.probabilistic.cplogic.cplogic_to_gm": [[74, "module-neurolang.probabilistic.cplogic.cplogic_to_gm"]], "probabilistic_choice_grounding() (neurolang.probabilistic.cplogic.cplogic_to_gm.cplogicgroundingtographicalmodeltranslator method)": [[74, "neurolang.probabilistic.cplogic.cplogic_to_gm.CPLogicGroundingToGraphicalModelTranslator.probabilistic_choice_grounding"]], "probfact_set_grounding() (neurolang.probabilistic.cplogic.cplogic_to_gm.cplogicgroundingtographicalmodeltranslator method)": [[74, "neurolang.probabilistic.cplogic.cplogic_to_gm.CPLogicGroundingToGraphicalModelTranslator.probfact_set_grounding"]], "type (neurolang.probabilistic.cplogic.cplogic_to_gm.andplatenode attribute)": [[74, "neurolang.probabilistic.cplogic.cplogic_to_gm.AndPlateNode.type"]], "type (neurolang.probabilistic.cplogic.cplogic_to_gm.bernoulliplatenode attribute)": [[74, "neurolang.probabilistic.cplogic.cplogic_to_gm.BernoulliPlateNode.type"]], "type (neurolang.probabilistic.cplogic.cplogic_to_gm.cplogicgroundingtographicalmodeltranslator attribute)": [[74, "neurolang.probabilistic.cplogic.cplogic_to_gm.CPLogicGroundingToGraphicalModelTranslator.type"]], "type (neurolang.probabilistic.cplogic.cplogic_to_gm.graphicalmodel attribute)": [[74, "neurolang.probabilistic.cplogic.cplogic_to_gm.GraphicalModel.type"]], "type (neurolang.probabilistic.cplogic.cplogic_to_gm.narychoiceplatenode attribute)": [[74, "neurolang.probabilistic.cplogic.cplogic_to_gm.NaryChoicePlateNode.type"]], "type (neurolang.probabilistic.cplogic.cplogic_to_gm.narychoiceresultplatenode attribute)": [[74, "neurolang.probabilistic.cplogic.cplogic_to_gm.NaryChoiceResultPlateNode.type"]], "type (neurolang.probabilistic.cplogic.cplogic_to_gm.platenode attribute)": [[74, "neurolang.probabilistic.cplogic.cplogic_to_gm.PlateNode.type"]], "type (neurolang.probabilistic.cplogic.cplogic_to_gm.probabilisticplatenode attribute)": [[74, "neurolang.probabilistic.cplogic.cplogic_to_gm.ProbabilisticPlateNode.type"]], "chase (class in neurolang.probabilistic.cplogic.grounding)": [[76, "neurolang.probabilistic.cplogic.grounding.Chase"]], "datalog (class in neurolang.probabilistic.cplogic.grounding)": [[76, "neurolang.probabilistic.cplogic.grounding.Datalog"]], "build_extensional_grounding() (in module neurolang.probabilistic.cplogic.grounding)": [[76, "neurolang.probabilistic.cplogic.grounding.build_extensional_grounding"]], "build_grounding() (in module neurolang.probabilistic.cplogic.grounding)": [[76, "neurolang.probabilistic.cplogic.grounding.build_grounding"]], "build_pchoice_grounding() (in module neurolang.probabilistic.cplogic.grounding)": [[76, "neurolang.probabilistic.cplogic.grounding.build_pchoice_grounding"]], "build_pfact_grounding_from_set() (in module neurolang.probabilistic.cplogic.grounding)": [[76, "neurolang.probabilistic.cplogic.grounding.build_pfact_grounding_from_set"]], "build_probabilistic_grounding() (in module neurolang.probabilistic.cplogic.grounding)": [[76, "neurolang.probabilistic.cplogic.grounding.build_probabilistic_grounding"]], "build_rule_grounding() (in module neurolang.probabilistic.cplogic.grounding)": [[76, "neurolang.probabilistic.cplogic.grounding.build_rule_grounding"]], "cplogic_to_datalog() (in module neurolang.probabilistic.cplogic.grounding)": [[76, "neurolang.probabilistic.cplogic.grounding.cplogic_to_datalog"]], "get_grounding_dependencies() (in module neurolang.probabilistic.cplogic.grounding)": [[76, "neurolang.probabilistic.cplogic.grounding.get_grounding_dependencies"]], "get_grounding_pred_symb() (in module neurolang.probabilistic.cplogic.grounding)": [[76, "neurolang.probabilistic.cplogic.grounding.get_grounding_pred_symb"]], "get_grounding_predicate() (in module neurolang.probabilistic.cplogic.grounding)": [[76, "neurolang.probabilistic.cplogic.grounding.get_grounding_predicate"]], "ground_cplogic_program() (in module neurolang.probabilistic.cplogic.grounding)": [[76, "neurolang.probabilistic.cplogic.grounding.ground_cplogic_program"]], "neurolang.probabilistic.cplogic.grounding": [[76, "module-neurolang.probabilistic.cplogic.grounding"]], "protected_keywords (neurolang.probabilistic.cplogic.grounding.datalog attribute)": [[76, "neurolang.probabilistic.cplogic.grounding.Datalog.protected_keywords"]], "remove_probability_column() (in module neurolang.probabilistic.cplogic.grounding)": [[76, "neurolang.probabilistic.cplogic.grounding.remove_probability_column"]], "topological_sort_groundings() (in module neurolang.probabilistic.cplogic.grounding)": [[76, "neurolang.probabilistic.cplogic.grounding.topological_sort_groundings"]], "topological_sort_groundings_util() (in module neurolang.probabilistic.cplogic.grounding)": [[76, "neurolang.probabilistic.cplogic.grounding.topological_sort_groundings_util"]], "type (neurolang.probabilistic.cplogic.grounding.datalog attribute)": [[76, "neurolang.probabilistic.cplogic.grounding.Datalog.type"]], "cplogicmixin (class in neurolang.probabilistic.cplogic.program)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicMixin"]], "cplogicprogram (class in neurolang.probabilistic.cplogic.program)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicProgram"]], "add_probabilistic_choice_from_tuples() (neurolang.probabilistic.cplogic.program.cplogicmixin method)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicMixin.add_probabilistic_choice_from_tuples"]], "add_probabilistic_facts_from_tuples() (neurolang.probabilistic.cplogic.program.cplogicmixin method)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicMixin.add_probabilistic_facts_from_tuples"]], "extensional_database() (neurolang.probabilistic.cplogic.program.cplogicmixin method)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicMixin.extensional_database"]], "marg_implication() (neurolang.probabilistic.cplogic.program.cplogicmixin method)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicMixin.marg_implication"]], "neurolang.probabilistic.cplogic.program": [[78, "module-neurolang.probabilistic.cplogic.program"]], "pchoice_pred_symb_set_symb (neurolang.probabilistic.cplogic.program.cplogicmixin attribute)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicMixin.pchoice_pred_symb_set_symb"]], "pchoice_pred_symbs (neurolang.probabilistic.cplogic.program.cplogicmixin property)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicMixin.pchoice_pred_symbs"]], "pfact_pred_symb_set_symb (neurolang.probabilistic.cplogic.program.cplogicmixin attribute)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicMixin.pfact_pred_symb_set_symb"]], "pfact_pred_symbs (neurolang.probabilistic.cplogic.program.cplogicmixin property)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicMixin.pfact_pred_symbs"]], "predicate_symbols (neurolang.probabilistic.cplogic.program.cplogicmixin property)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicMixin.predicate_symbols"]], "probabilistic_choices() (neurolang.probabilistic.cplogic.program.cplogicmixin method)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicMixin.probabilistic_choices"]], "probabilistic_fact() (neurolang.probabilistic.cplogic.program.cplogicmixin method)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicMixin.probabilistic_fact"]], "probabilistic_facts() (neurolang.probabilistic.cplogic.program.cplogicmixin method)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicMixin.probabilistic_facts"]], "probabilistic_predicate_symbols (neurolang.probabilistic.cplogic.program.cplogicmixin property)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicMixin.probabilistic_predicate_symbols"]], "protected_keywords (neurolang.probabilistic.cplogic.program.cplogicmixin attribute)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicMixin.protected_keywords"]], "protected_keywords (neurolang.probabilistic.cplogic.program.cplogicprogram attribute)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicProgram.protected_keywords"]], "query_based_probabilistic_choice() (neurolang.probabilistic.cplogic.program.cplogicmixin method)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicMixin.query_based_probabilistic_choice"]], "query_based_probabilistic_fact() (neurolang.probabilistic.cplogic.program.cplogicmixin method)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicMixin.query_based_probabilistic_fact"]], "query_based_probabilistic_predicate() (neurolang.probabilistic.cplogic.program.cplogicmixin method)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicMixin.query_based_probabilistic_predicate"]], "type (neurolang.probabilistic.cplogic.program.cplogicmixin attribute)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicMixin.type"]], "type (neurolang.probabilistic.cplogic.program.cplogicprogram attribute)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicProgram.type"]], "union_with_probabilistic_facts() (neurolang.probabilistic.cplogic.program.cplogicmixin method)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicMixin.union_with_probabilistic_facts"]], "within_language_marg_query() (neurolang.probabilistic.cplogic.program.cplogicmixin method)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicMixin.within_language_marg_query"]], "within_language_prob_queries() (neurolang.probabilistic.cplogic.program.cplogicmixin method)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicMixin.within_language_prob_queries"]], "within_language_succ_query() (neurolang.probabilistic.cplogic.program.cplogicmixin method)": [[78, "neurolang.probabilistic.cplogic.program.CPLogicMixin.within_language_succ_query"]], "dalvi_suciu_lift() (in module neurolang.probabilistic.dalvi_suciu_lift)": [[80, "neurolang.probabilistic.dalvi_suciu_lift.dalvi_suciu_lift"]], "neurolang.probabilistic.dalvi_suciu_lift": [[80, "module-neurolang.probabilistic.dalvi_suciu_lift"]], "solve_marg_query() (in module neurolang.probabilistic.dalvi_suciu_lift)": [[80, "neurolang.probabilistic.dalvi_suciu_lift.solve_marg_query"]], "solve_succ_query() (in module neurolang.probabilistic.dalvi_suciu_lift)": [[80, "neurolang.probabilistic.dalvi_suciu_lift.solve_succ_query"]], "discretedistribution (class in neurolang.probabilistic.distributions)": [[81, "neurolang.probabilistic.distributions.DiscreteDistribution"]], "distribution (class in neurolang.probabilistic.distributions)": [[81, "neurolang.probabilistic.distributions.Distribution"]], "tabledistribution (class in neurolang.probabilistic.distributions)": [[81, "neurolang.probabilistic.distributions.TableDistribution"]], "conditioned_on() (neurolang.probabilistic.distributions.tabledistribution method)": [[81, "neurolang.probabilistic.distributions.TableDistribution.conditioned_on"]], "expectation() (neurolang.probabilistic.distributions.distribution method)": [[81, "neurolang.probabilistic.distributions.Distribution.expectation"]], "expectation() (neurolang.probabilistic.distributions.tabledistribution method)": [[81, "neurolang.probabilistic.distributions.TableDistribution.expectation"]], "neurolang.probabilistic.distributions": [[81, "module-neurolang.probabilistic.distributions"]], "probability() (neurolang.probabilistic.distributions.distribution method)": [[81, "neurolang.probabilistic.distributions.Distribution.probability"]], "probability() (neurolang.probabilistic.distributions.tabledistribution method)": [[81, "neurolang.probabilistic.distributions.TableDistribution.probability"]], "support (neurolang.probabilistic.distributions.distribution property)": [[81, "neurolang.probabilistic.distributions.Distribution.support"]], "support (neurolang.probabilistic.distributions.tabledistribution property)": [[81, "neurolang.probabilistic.distributions.TableDistribution.support"]], "distributiondoesnotsumtooneerror": [[82, "neurolang.probabilistic.exceptions.DistributionDoesNotSumToOneError"]], "forbiddenconditionalquerynoprob": [[82, "neurolang.probabilistic.exceptions.ForbiddenConditionalQueryNoProb"]], "forbiddenconditionalquerynonconjunctive": [[82, "neurolang.probabilistic.exceptions.ForbiddenConditionalQueryNonConjunctive"]], "malformedprobabilistictupleerror": [[82, "neurolang.probabilistic.exceptions.MalformedProbabilisticTupleError"]], "noteasilyshatterableerror": [[82, "neurolang.probabilistic.exceptions.NotEasilyShatterableError"]], "nothierarchicalqueryexception": [[82, "neurolang.probabilistic.exceptions.NotHierarchicalQueryException"]], "repeatedtuplesinprobabilisticrelationerror": [[82, "neurolang.probabilistic.exceptions.RepeatedTuplesInProbabilisticRelationError"]], "uncomparabledistributionserror": [[82, "neurolang.probabilistic.exceptions.UncomparableDistributionsError"]], "unsupportedprobabilisticqueryerror": [[82, "neurolang.probabilistic.exceptions.UnsupportedProbabilisticQueryError"]], "neurolang.probabilistic.exceptions": [[82, "module-neurolang.probabilistic.exceptions"]], "add_to_union() (in module neurolang.probabilistic.expression_processing)": [[83, "neurolang.probabilistic.expression_processing.add_to_union"]], "build_probabilistic_fact_set() (in module neurolang.probabilistic.expression_processing)": [[83, "neurolang.probabilistic.expression_processing.build_probabilistic_fact_set"]], "check_probabilistic_choice_set_probabilities_sum_to_one() (in module neurolang.probabilistic.expression_processing)": [[83, "neurolang.probabilistic.expression_processing.check_probabilistic_choice_set_probabilities_sum_to_one"]], "const_or_symb_as_python_type() (in module neurolang.probabilistic.expression_processing)": [[83, "neurolang.probabilistic.expression_processing.const_or_symb_as_python_type"]], "construct_within_language_succ_result() (in module neurolang.probabilistic.expression_processing)": [[83, "neurolang.probabilistic.expression_processing.construct_within_language_succ_result"]], "get_probchoice_variable_equalities() (in module neurolang.probabilistic.expression_processing)": [[83, "neurolang.probabilistic.expression_processing.get_probchoice_variable_equalities"]], "get_within_language_prob_query_prob_term() (in module neurolang.probabilistic.expression_processing)": [[83, "neurolang.probabilistic.expression_processing.get_within_language_prob_query_prob_term"]], "group_preds_by_functor() (in module neurolang.probabilistic.expression_processing)": [[83, "neurolang.probabilistic.expression_processing.group_preds_by_functor"]], "group_probabilistic_facts_by_pred_symb() (in module neurolang.probabilistic.expression_processing)": [[83, "neurolang.probabilistic.expression_processing.group_probabilistic_facts_by_pred_symb"]], "is_builtin() (in module neurolang.probabilistic.expression_processing)": [[83, "neurolang.probabilistic.expression_processing.is_builtin"]], "is_probabilistic_fact() (in module neurolang.probabilistic.expression_processing)": [[83, "neurolang.probabilistic.expression_processing.is_probabilistic_fact"]], "is_probabilistic_predicate_symbol() (in module neurolang.probabilistic.expression_processing)": [[83, "neurolang.probabilistic.expression_processing.is_probabilistic_predicate_symbol"]], "is_query_based_probpredicate() (in module neurolang.probabilistic.expression_processing)": [[83, "neurolang.probabilistic.expression_processing.is_query_based_probpredicate"]], "is_within_language_prob_query() (in module neurolang.probabilistic.expression_processing)": [[83, "neurolang.probabilistic.expression_processing.is_within_language_prob_query"]], "lift_optimization_for_choice_predicates() (in module neurolang.probabilistic.expression_processing)": [[83, "neurolang.probabilistic.expression_processing.lift_optimization_for_choice_predicates"]], "neurolang.probabilistic.expression_processing": [[83, "module-neurolang.probabilistic.expression_processing"]], "separate_deterministic_probabilistic_code() (in module neurolang.probabilistic.expression_processing)": [[83, "neurolang.probabilistic.expression_processing.separate_deterministic_probabilistic_code"]], "union_contains_probabilistic_facts() (in module neurolang.probabilistic.expression_processing)": [[83, "neurolang.probabilistic.expression_processing.union_contains_probabilistic_facts"]], "within_language_succ_query_to_intensional_rule() (in module neurolang.probabilistic.expression_processing)": [[83, "neurolang.probabilistic.expression_processing.within_language_succ_query_to_intensional_rule"]], "condition (class in neurolang.probabilistic.expressions)": [[84, "neurolang.probabilistic.expressions.Condition"]], "grounding (class in neurolang.probabilistic.expressions)": [[84, "neurolang.probabilistic.expressions.Grounding"]], "probabilisticbinarylogicoperator (class in neurolang.probabilistic.expressions)": [[84, "neurolang.probabilistic.expressions.ProbabilisticBinaryLogicOperator"]], "probabilisticchoice (class in neurolang.probabilistic.expressions)": [[84, "neurolang.probabilistic.expressions.ProbabilisticChoice"]], "probabilisticchoicegrounding (class in neurolang.probabilistic.expressions)": [[84, "neurolang.probabilistic.expressions.ProbabilisticChoiceGrounding"]], "probabilisticfact (class in neurolang.probabilistic.expressions)": [[84, "neurolang.probabilistic.expressions.ProbabilisticFact"]], "probabilisticpredicate (class in neurolang.probabilistic.expressions)": [[84, "neurolang.probabilistic.expressions.ProbabilisticPredicate"]], "probabilisticquery (class in neurolang.probabilistic.expressions)": [[84, "neurolang.probabilistic.expressions.ProbabilisticQuery"]], "args (neurolang.probabilistic.expressions.probabilisticpredicate property)": [[84, "neurolang.probabilistic.expressions.ProbabilisticPredicate.args"]], "functor (neurolang.probabilistic.expressions.probabilisticpredicate property)": [[84, "neurolang.probabilistic.expressions.ProbabilisticPredicate.functor"]], "neurolang.probabilistic.expressions": [[84, "module-neurolang.probabilistic.expressions"]], "type (neurolang.probabilistic.expressions.condition attribute)": [[84, "neurolang.probabilistic.expressions.Condition.type"]], "type (neurolang.probabilistic.expressions.grounding attribute)": [[84, "neurolang.probabilistic.expressions.Grounding.type"]], "type (neurolang.probabilistic.expressions.probabilisticbinarylogicoperator attribute)": [[84, "neurolang.probabilistic.expressions.ProbabilisticBinaryLogicOperator.type"]], "type (neurolang.probabilistic.expressions.probabilisticchoice attribute)": [[84, "neurolang.probabilistic.expressions.ProbabilisticChoice.type"]], "type (neurolang.probabilistic.expressions.probabilisticchoicegrounding attribute)": [[84, "neurolang.probabilistic.expressions.ProbabilisticChoiceGrounding.type"]], "type (neurolang.probabilistic.expressions.probabilisticfact attribute)": [[84, "neurolang.probabilistic.expressions.ProbabilisticFact.type"]], "type (neurolang.probabilistic.expressions.probabilisticpredicate attribute)": [[84, "neurolang.probabilistic.expressions.ProbabilisticPredicate.type"]], "type (neurolang.probabilistic.expressions.probabilisticquery attribute)": [[84, "neurolang.probabilistic.expressions.ProbabilisticQuery.type"]], "replacewlqwalker (class in neurolang.probabilistic.magic_sets_processing)": [[85, "neurolang.probabilistic.magic_sets_processing.ReplaceWLQWalker"]], "implication() (neurolang.probabilistic.magic_sets_processing.replacewlqwalker method)": [[85, "neurolang.probabilistic.magic_sets_processing.ReplaceWLQWalker.implication"]], "neurolang.probabilistic.magic_sets_processing": [[85, "module-neurolang.probabilistic.magic_sets_processing"]], "probabilistic_postprocess_magic_rules() (in module neurolang.probabilistic.magic_sets_processing)": [[85, "neurolang.probabilistic.magic_sets_processing.probabilistic_postprocess_magic_rules"]], "replace_probabilistic_predicate() (neurolang.probabilistic.magic_sets_processing.replacewlqwalker method)": [[85, "neurolang.probabilistic.magic_sets_processing.ReplaceWLQWalker.replace_probabilistic_predicate"]], "replace_probabilistic_queries() (neurolang.probabilistic.magic_sets_processing.replacewlqwalker method)": [[85, "neurolang.probabilistic.magic_sets_processing.ReplaceWLQWalker.replace_probabilistic_queries"]], "type (neurolang.probabilistic.magic_sets_processing.replacewlqwalker attribute)": [[85, "neurolang.probabilistic.magic_sets_processing.ReplaceWLQWalker.type"]], "update_rules_with_new_prob_expressions() (in module neurolang.probabilistic.magic_sets_processing)": [[85, "neurolang.probabilistic.magic_sets_processing.update_rules_with_new_prob_expressions"]], "ppdl (class in neurolang.probabilistic.ppdl)": [[86, "neurolang.probabilistic.ppdl.PPDL"]], "ppdldeltasymbol (class in neurolang.probabilistic.ppdl)": [[86, "neurolang.probabilistic.ppdl.PPDLDeltaSymbol"]], "ppdldeltaterm (class in neurolang.probabilistic.ppdl)": [[86, "neurolang.probabilistic.ppdl.PPDLDeltaTerm"]], "ppdlmixin (class in neurolang.probabilistic.ppdl)": [[86, "neurolang.probabilistic.ppdl.PPDLMixin"]], "get_dterm() (in module neurolang.probabilistic.ppdl)": [[86, "neurolang.probabilistic.ppdl.get_dterm"]], "get_dterm_index() (in module neurolang.probabilistic.ppdl)": [[86, "neurolang.probabilistic.ppdl.get_dterm_index"]], "is_ppdl_rule() (in module neurolang.probabilistic.ppdl)": [[86, "neurolang.probabilistic.ppdl.is_ppdl_rule"]], "neurolang.probabilistic.ppdl": [[86, "module-neurolang.probabilistic.ppdl"]], "ppdl_rule() (neurolang.probabilistic.ppdl.ppdlmixin method)": [[86, "neurolang.probabilistic.ppdl.PPDLMixin.ppdl_rule"]], "protected_keywords (neurolang.probabilistic.ppdl.ppdl attribute)": [[86, "neurolang.probabilistic.ppdl.PPDL.protected_keywords"]], "type (neurolang.probabilistic.ppdl.ppdl attribute)": [[86, "neurolang.probabilistic.ppdl.PPDL.type"]], "type (neurolang.probabilistic.ppdl.ppdldeltasymbol attribute)": [[86, "neurolang.probabilistic.ppdl.PPDLDeltaSymbol.type"]], "type (neurolang.probabilistic.ppdl.ppdldeltaterm attribute)": [[86, "neurolang.probabilistic.ppdl.PPDLDeltaTerm.type"]], "type (neurolang.probabilistic.ppdl.ppdlmixin attribute)": [[86, "neurolang.probabilistic.ppdl.PPDLMixin.type"]], "deterministicfactset (class in neurolang.probabilistic.probabilistic_ra_utils)": [[87, "neurolang.probabilistic.probabilistic_ra_utils.DeterministicFactSet"]], "getprobabilisticsetatom (class in neurolang.probabilistic.probabilistic_ra_utils)": [[87, "neurolang.probabilistic.probabilistic_ra_utils.GetProbabilisticSetAtom"]], "nonliftable (class in neurolang.probabilistic.probabilistic_ra_utils)": [[87, "neurolang.probabilistic.probabilistic_ra_utils.NonLiftable"]], "probabilisticchoiceset (class in neurolang.probabilistic.probabilistic_ra_utils)": [[87, "neurolang.probabilistic.probabilistic_ra_utils.ProbabilisticChoiceSet"]], "probabilisticfactset (class in neurolang.probabilistic.probabilistic_ra_utils)": [[87, "neurolang.probabilistic.probabilistic_ra_utils.ProbabilisticFactSet"]], "classify_and_wrap_symbols() (in module neurolang.probabilistic.probabilistic_ra_utils)": [[87, "neurolang.probabilistic.probabilistic_ra_utils.classify_and_wrap_symbols"]], "default() (neurolang.probabilistic.probabilistic_ra_utils.getprobabilisticsetatom method)": [[87, "neurolang.probabilistic.probabilistic_ra_utils.GetProbabilisticSetAtom.default"]], "generate_probabilistic_symbol_table_for_query() (in module neurolang.probabilistic.probabilistic_ra_utils)": [[87, "neurolang.probabilistic.probabilistic_ra_utils.generate_probabilistic_symbol_table_for_query"]], "is_atom_a_deterministic_relation() (in module neurolang.probabilistic.probabilistic_ra_utils)": [[87, "neurolang.probabilistic.probabilistic_ra_utils.is_atom_a_deterministic_relation"]], "is_atom_a_probabilistic_choice_relation() (in module neurolang.probabilistic.probabilistic_ra_utils)": [[87, "neurolang.probabilistic.probabilistic_ra_utils.is_atom_a_probabilistic_choice_relation"]], "is_atom_a_probabilistic_fact_relation() (in module neurolang.probabilistic.probabilistic_ra_utils)": [[87, "neurolang.probabilistic.probabilistic_ra_utils.is_atom_a_probabilistic_fact_relation"]], "neurolang.probabilistic.probabilistic_ra_utils": [[87, "module-neurolang.probabilistic.probabilistic_ra_utils"]], "projection() (neurolang.probabilistic.probabilistic_ra_utils.getprobabilisticsetatom method)": [[87, "neurolang.probabilistic.probabilistic_ra_utils.GetProbabilisticSetAtom.projection"]], "resolve_symbol() (neurolang.probabilistic.probabilistic_ra_utils.getprobabilisticsetatom method)": [[87, "neurolang.probabilistic.probabilistic_ra_utils.GetProbabilisticSetAtom.resolve_symbol"]], "type (neurolang.probabilistic.probabilistic_ra_utils.deterministicfactset attribute)": [[87, "neurolang.probabilistic.probabilistic_ra_utils.DeterministicFactSet.type"]], "type (neurolang.probabilistic.probabilistic_ra_utils.getprobabilisticsetatom attribute)": [[87, "neurolang.probabilistic.probabilistic_ra_utils.GetProbabilisticSetAtom.type"]], "type (neurolang.probabilistic.probabilistic_ra_utils.nonliftable attribute)": [[87, "neurolang.probabilistic.probabilistic_ra_utils.NonLiftable.type"]], "type (neurolang.probabilistic.probabilistic_ra_utils.probabilisticchoiceset attribute)": [[87, "neurolang.probabilistic.probabilistic_ra_utils.ProbabilisticChoiceSet.type"]], "type (neurolang.probabilistic.probabilistic_ra_utils.probabilisticfactset attribute)": [[87, "neurolang.probabilistic.probabilistic_ra_utils.ProbabilisticFactSet.type"]], "probsemiringsolver (class in neurolang.probabilistic.probabilistic_semiring_solver)": [[88, "neurolang.probabilistic.probabilistic_semiring_solver.ProbSemiringSolver"]], "probsemiringsolvermixin (class in neurolang.probabilistic.probabilistic_semiring_solver)": [[88, "neurolang.probabilistic.probabilistic_semiring_solver.ProbSemiringSolverMixin"]], "probsemiringtorelationalalgebrasolver (class in neurolang.probabilistic.probabilistic_semiring_solver)": [[88, "neurolang.probabilistic.probabilistic_semiring_solver.ProbSemiringToRelationalAlgebraSolver"]], "deterministic_fact_set() (neurolang.probabilistic.probabilistic_semiring_solver.probsemiringsolvermixin method)": [[88, "neurolang.probabilistic.probabilistic_semiring_solver.ProbSemiringSolverMixin.deterministic_fact_set"]], "deterministic_fact_set_general() (neurolang.probabilistic.probabilistic_semiring_solver.probsemiringsolvermixin method)": [[88, "neurolang.probabilistic.probabilistic_semiring_solver.ProbSemiringSolverMixin.deterministic_fact_set_general"]], "eliminate_superfluous_projection() (neurolang.probabilistic.probabilistic_semiring_solver.probsemiringsolvermixin method)": [[88, "neurolang.probabilistic.probabilistic_semiring_solver.ProbSemiringSolverMixin.eliminate_superfluous_projection"]], "empty_deterministic_fact_set() (neurolang.probabilistic.probabilistic_semiring_solver.probsemiringsolvermixin method)": [[88, "neurolang.probabilistic.probabilistic_semiring_solver.ProbSemiringSolverMixin.empty_deterministic_fact_set"]], "neurolang.probabilistic.probabilistic_semiring_solver": [[88, "module-neurolang.probabilistic.probabilistic_semiring_solver"]], "probabilistic_choice_set() (neurolang.probabilistic.probabilistic_semiring_solver.probsemiringsolvermixin method)": [[88, "neurolang.probabilistic.probabilistic_semiring_solver.ProbSemiringSolverMixin.probabilistic_choice_set"]], "probabilistic_choice_set_to_symbol() (neurolang.probabilistic.probabilistic_semiring_solver.probsemiringsolvermixin method)": [[88, "neurolang.probabilistic.probabilistic_semiring_solver.ProbSemiringSolverMixin.probabilistic_choice_set_to_symbol"]], "probabilistic_fact_set() (neurolang.probabilistic.probabilistic_semiring_solver.probsemiringsolvermixin method)": [[88, "neurolang.probabilistic.probabilistic_semiring_solver.ProbSemiringSolverMixin.probabilistic_fact_set"]], "probabilistic_fact_set_invalid() (neurolang.probabilistic.probabilistic_semiring_solver.probsemiringsolvermixin method)": [[88, "neurolang.probabilistic.probabilistic_semiring_solver.ProbSemiringSolverMixin.probabilistic_fact_set_invalid"]], "push_projection_in_deterministic() (neurolang.probabilistic.probabilistic_semiring_solver.probsemiringsolvermixin method)": [[88, "neurolang.probabilistic.probabilistic_semiring_solver.ProbSemiringSolverMixin.push_projection_in_deterministic"]], "type (neurolang.probabilistic.probabilistic_semiring_solver.probsemiringsolver attribute)": [[88, "neurolang.probabilistic.probabilistic_semiring_solver.ProbSemiringSolver.type"]], "type (neurolang.probabilistic.probabilistic_semiring_solver.probsemiringsolvermixin attribute)": [[88, "neurolang.probabilistic.probabilistic_semiring_solver.ProbSemiringSolverMixin.type"]], "type (neurolang.probabilistic.probabilistic_semiring_solver.probsemiringtorelationalalgebrasolver attribute)": [[88, "neurolang.probabilistic.probabilistic_semiring_solver.ProbSemiringToRelationalAlgebraSolver.type"]], "addneededprojections (class in neurolang.probabilistic.query_resolution)": [[89, "neurolang.probabilistic.query_resolution.AddNeededProjections"]], "filterzeroprobability (class in neurolang.probabilistic.query_resolution)": [[89, "neurolang.probabilistic.query_resolution.FilterZeroProbability"]], "floatarithmeticsimplifier (class in neurolang.probabilistic.query_resolution)": [[89, "neurolang.probabilistic.query_resolution.FloatArithmeticSimplifier"]], "querybasedprobfacttodetrule (class in neurolang.probabilistic.query_resolution)": [[89, "neurolang.probabilistic.query_resolution.QueryBasedProbFactToDetRule"]], "raqueryoptimiser (class in neurolang.probabilistic.query_resolution)": [[89, "neurolang.probabilistic.query_resolution.RAQueryOptimiser"]], "add_projection() (neurolang.probabilistic.query_resolution.addneededprojections method)": [[89, "neurolang.probabilistic.query_resolution.AddNeededProjections.add_projection"]], "add_zero_filter() (neurolang.probabilistic.query_resolution.filterzeroprobability method)": [[89, "neurolang.probabilistic.query_resolution.FilterZeroProbability.add_zero_filter"]], "compute_probabilistic_solution() (in module neurolang.probabilistic.query_resolution)": [[89, "neurolang.probabilistic.query_resolution.compute_probabilistic_solution"]], "compute_projections_needed_to_reintroduce_head_terms() (in module neurolang.probabilistic.query_resolution)": [[89, "neurolang.probabilistic.query_resolution.compute_projections_needed_to_reintroduce_head_terms"]], "generate_provenance_query_solver() (in module neurolang.probabilistic.query_resolution)": [[89, "neurolang.probabilistic.query_resolution.generate_provenance_query_solver"]], "lift_solve_marg_query() (in module neurolang.probabilistic.query_resolution)": [[89, "neurolang.probabilistic.query_resolution.lift_solve_marg_query"]], "neurolang.probabilistic.query_resolution": [[89, "module-neurolang.probabilistic.query_resolution"]], "query_based_probafact() (neurolang.probabilistic.query_resolution.querybasedprobfacttodetrule method)": [[89, "neurolang.probabilistic.query_resolution.QueryBasedProbFactToDetRule.query_based_probafact"]], "simplify_mul_left() (neurolang.probabilistic.query_resolution.floatarithmeticsimplifier method)": [[89, "neurolang.probabilistic.query_resolution.FloatArithmeticSimplifier.simplify_mul_left"]], "simplify_mul_right() (neurolang.probabilistic.query_resolution.floatarithmeticsimplifier method)": [[89, "neurolang.probabilistic.query_resolution.FloatArithmeticSimplifier.simplify_mul_right"]], "type (neurolang.probabilistic.query_resolution.addneededprojections attribute)": [[89, "neurolang.probabilistic.query_resolution.AddNeededProjections.type"]], "type (neurolang.probabilistic.query_resolution.filterzeroprobability attribute)": [[89, "neurolang.probabilistic.query_resolution.FilterZeroProbability.type"]], "type (neurolang.probabilistic.query_resolution.floatarithmeticsimplifier attribute)": [[89, "neurolang.probabilistic.query_resolution.FloatArithmeticSimplifier.type"]], "type (neurolang.probabilistic.query_resolution.querybasedprobfacttodetrule attribute)": [[89, "neurolang.probabilistic.query_resolution.QueryBasedProbFactToDetRule.type"]], "type (neurolang.probabilistic.query_resolution.raqueryoptimiser attribute)": [[89, "neurolang.probabilistic.query_resolution.RAQueryOptimiser.type"]], "union_with_query_based_pfact() (neurolang.probabilistic.query_resolution.querybasedprobfacttodetrule method)": [[89, "neurolang.probabilistic.query_resolution.QueryBasedProbFactToDetRule.union_with_query_based_pfact"]], "neurolang.probabilistic.ranking": [[90, "module-neurolang.probabilistic.ranking"]], "partially_rank_query() (in module neurolang.probabilistic.ranking)": [[90, "neurolang.probabilistic.ranking.partially_rank_query"]], "verify_that_the_query_is_ranked() (in module neurolang.probabilistic.ranking)": [[90, "neurolang.probabilistic.ranking.verify_that_the_query_is_ranked"]], "normalizenotequals (class in neurolang.probabilistic.shattering)": [[91, "neurolang.probabilistic.shattering.NormalizeNotEquals"]], "relationalalgebraselectionconjunction (class in neurolang.probabilistic.shattering)": [[91, "neurolang.probabilistic.shattering.RelationalAlgebraSelectionConjunction"]], "shatterequalities (class in neurolang.probabilistic.shattering)": [[91, "neurolang.probabilistic.shattering.ShatterEqualities"]], "atom_to_constant_to_ra_conditions() (in module neurolang.probabilistic.shattering)": [[91, "neurolang.probabilistic.shattering.atom_to_constant_to_RA_conditions"]], "conditions_per_symbol() (in module neurolang.probabilistic.shattering)": [[91, "neurolang.probabilistic.shattering.conditions_per_symbol"]], "flip_ne_arguments() (neurolang.probabilistic.shattering.normalizenotequals method)": [[91, "neurolang.probabilistic.shattering.NormalizeNotEquals.flip_ne_arguments"]], "neurolang.probabilistic.shattering": [[91, "module-neurolang.probabilistic.shattering"]], "selection_conjunction() (neurolang.probabilistic.shattering.relationalalgebraselectionconjunction method)": [[91, "neurolang.probabilistic.shattering.RelationalAlgebraSelectionConjunction.selection_conjunction"]], "sets_per_symbol() (in module neurolang.probabilistic.shattering)": [[91, "neurolang.probabilistic.shattering.sets_per_symbol"]], "shatter_constants() (in module neurolang.probabilistic.shattering)": [[91, "neurolang.probabilistic.shattering.shatter_constants"]], "shatter_inequalities() (neurolang.probabilistic.shattering.shatterequalities method)": [[91, "neurolang.probabilistic.shattering.ShatterEqualities.shatter_inequalities"]], "shatter_symbol() (neurolang.probabilistic.shattering.shatterequalities method)": [[91, "neurolang.probabilistic.shattering.ShatterEqualities.shatter_symbol"]], "type (neurolang.probabilistic.shattering.normalizenotequals attribute)": [[91, "neurolang.probabilistic.shattering.NormalizeNotEquals.type"]], "type (neurolang.probabilistic.shattering.relationalalgebraselectionconjunction attribute)": [[91, "neurolang.probabilistic.shattering.RelationalAlgebraSelectionConjunction.type"]], "type (neurolang.probabilistic.shattering.shatterequalities attribute)": [[91, "neurolang.probabilistic.shattering.ShatterEqualities.type"]], "extract_atom_sets_and_detect_self_joins() (in module neurolang.probabilistic.small_dichotomy_theorem_based_solver)": [[92, "neurolang.probabilistic.small_dichotomy_theorem_based_solver.extract_atom_sets_and_detect_self_joins"]], "is_hierarchical_without_self_joins() (in module neurolang.probabilistic.small_dichotomy_theorem_based_solver)": [[92, "neurolang.probabilistic.small_dichotomy_theorem_based_solver.is_hierarchical_without_self_joins"]], "neurolang.probabilistic.small_dichotomy_theorem_based_solver": [[92, "module-neurolang.probabilistic.small_dichotomy_theorem_based_solver"]], "solve_marg_query() (in module neurolang.probabilistic.small_dichotomy_theorem_based_solver)": [[92, "neurolang.probabilistic.small_dichotomy_theorem_based_solver.solve_marg_query"]], "solve_succ_query() (in module neurolang.probabilistic.small_dichotomy_theorem_based_solver)": [[92, "neurolang.probabilistic.small_dichotomy_theorem_based_solver.solve_succ_query"]], "get_list_of_intensional_rules() (in module neurolang.probabilistic.stratification)": [[93, "neurolang.probabilistic.stratification.get_list_of_intensional_rules"]], "neurolang.probabilistic.stratification": [[93, "module-neurolang.probabilistic.stratification"]], "reachable_code_from_query() (in module neurolang.probabilistic.stratification)": [[93, "neurolang.probabilistic.stratification.reachable_code_from_query"]], "stratify_program() (in module neurolang.probabilistic.stratification)": [[93, "neurolang.probabilistic.stratification.stratify_program"]], "add_existentials_except() (in module neurolang.probabilistic.transforms)": [[94, "neurolang.probabilistic.transforms.add_existentials_except"]], "convert_rule_to_ucq() (in module neurolang.probabilistic.transforms)": [[94, "neurolang.probabilistic.transforms.convert_rule_to_ucq"]], "convert_to_cnf_existential_ucq() (in module neurolang.probabilistic.transforms)": [[94, "neurolang.probabilistic.transforms.convert_to_cnf_existential_ucq"]], "convert_to_dnf_existential_ucq() (in module neurolang.probabilistic.transforms)": [[94, "neurolang.probabilistic.transforms.convert_to_dnf_existential_ucq"]], "minimise_formulas_containment() (in module neurolang.probabilistic.transforms)": [[94, "neurolang.probabilistic.transforms.minimise_formulas_containment"]], "minimize_component_conjunction() (in module neurolang.probabilistic.transforms)": [[94, "neurolang.probabilistic.transforms.minimize_component_conjunction"]], "minimize_component_disjunction() (in module neurolang.probabilistic.transforms)": [[94, "neurolang.probabilistic.transforms.minimize_component_disjunction"]], "minimize_ucq_in_cnf() (in module neurolang.probabilistic.transforms)": [[94, "neurolang.probabilistic.transforms.minimize_ucq_in_cnf"]], "minimize_ucq_in_dnf() (in module neurolang.probabilistic.transforms)": [[94, "neurolang.probabilistic.transforms.minimize_ucq_in_dnf"]], "neurolang.probabilistic.transforms": [[94, "module-neurolang.probabilistic.transforms"]], "split_positive_negative_formulas() (in module neurolang.probabilistic.transforms)": [[94, "neurolang.probabilistic.transforms.split_positive_negative_formulas"]], "unify_existential_variables() (in module neurolang.probabilistic.transforms)": [[94, "neurolang.probabilistic.transforms.unify_existential_variables"]], "deterministicfactsettranslation (class in neurolang.probabilistic.weighted_model_counting)": [[95, "neurolang.probabilistic.weighted_model_counting.DeterministicFactSetTranslation"]], "eliminatesuperfluousprojectionmixin (class in neurolang.probabilistic.weighted_model_counting)": [[95, "neurolang.probabilistic.weighted_model_counting.EliminateSuperfluousProjectionMixin"]], "raqueryoptimiser (class in neurolang.probabilistic.weighted_model_counting)": [[95, "neurolang.probabilistic.weighted_model_counting.RAQueryOptimiser"]], "sddwmcsemiringsolver (class in neurolang.probabilistic.weighted_model_counting)": [[95, "neurolang.probabilistic.weighted_model_counting.SDDWMCSemiRingSolver"]], "semiringraptosdd (class in neurolang.probabilistic.weighted_model_counting)": [[95, "neurolang.probabilistic.weighted_model_counting.SemiRingRAPToSDD"]], "wmcsemiringsolver (class in neurolang.probabilistic.weighted_model_counting)": [[95, "neurolang.probabilistic.weighted_model_counting.WMCSemiRingSolver"]], "add() (neurolang.probabilistic.weighted_model_counting.semiringraptosdd method)": [[95, "neurolang.probabilistic.weighted_model_counting.SemiRingRAPToSDD.add"]], "build_global_sdd_model_rows() (in module neurolang.probabilistic.weighted_model_counting)": [[95, "neurolang.probabilistic.weighted_model_counting.build_global_sdd_model_rows"]], "deterministic_fact_set() (neurolang.probabilistic.weighted_model_counting.sddwmcsemiringsolver method)": [[95, "neurolang.probabilistic.weighted_model_counting.SDDWMCSemiRingSolver.deterministic_fact_set"]], "deterministic_fact_set() (neurolang.probabilistic.weighted_model_counting.wmcsemiringsolver method)": [[95, "neurolang.probabilistic.weighted_model_counting.WMCSemiRingSolver.deterministic_fact_set"]], "deterministic_fact_set_constant() (neurolang.probabilistic.weighted_model_counting.deterministicfactsettranslation method)": [[95, "neurolang.probabilistic.weighted_model_counting.DeterministicFactSetTranslation.deterministic_fact_set_constant"]], "eliminate_superfluous_projection() (neurolang.probabilistic.weighted_model_counting.eliminatesuperfluousprojectionmixin method)": [[95, "neurolang.probabilistic.weighted_model_counting.EliminateSuperfluousProjectionMixin.eliminate_superfluous_projection"]], "eq() (neurolang.probabilistic.weighted_model_counting.semiringraptosdd method)": [[95, "neurolang.probabilistic.weighted_model_counting.SemiRingRAPToSDD.eq"]], "expression_block() (neurolang.probabilistic.weighted_model_counting.semiringraptosdd method)": [[95, "neurolang.probabilistic.weighted_model_counting.SemiRingRAPToSDD.expression_block"]], "generate_probability_table() (in module neurolang.probabilistic.weighted_model_counting)": [[95, "neurolang.probabilistic.weighted_model_counting.generate_probability_table"]], "generate_sdd_expression() (neurolang.probabilistic.weighted_model_counting.sddwmcsemiringsolver method)": [[95, "neurolang.probabilistic.weighted_model_counting.SDDWMCSemiRingSolver.generate_sdd_expression"]], "generate_weights() (in module neurolang.probabilistic.weighted_model_counting)": [[95, "neurolang.probabilistic.weighted_model_counting.generate_weights"]], "get_new_bernoulli_variable() (neurolang.probabilistic.weighted_model_counting.sddwmcsemiringsolver method)": [[95, "neurolang.probabilistic.weighted_model_counting.SDDWMCSemiRingSolver.get_new_bernoulli_variable"]], "model_count_and_per_row_probability() (in module neurolang.probabilistic.weighted_model_counting)": [[95, "neurolang.probabilistic.weighted_model_counting.model_count_and_per_row_probability"]], "mul() (neurolang.probabilistic.weighted_model_counting.semiringraptosdd method)": [[95, "neurolang.probabilistic.weighted_model_counting.SemiRingRAPToSDD.mul"]], "neg() (neurolang.probabilistic.weighted_model_counting.semiringraptosdd method)": [[95, "neurolang.probabilistic.weighted_model_counting.SemiRingRAPToSDD.neg"]], "neurolang.probabilistic.weighted_model_counting": [[95, "module-neurolang.probabilistic.weighted_model_counting"]], "or_() (neurolang.probabilistic.weighted_model_counting.semiringraptosdd method)": [[95, "neurolang.probabilistic.weighted_model_counting.SemiRingRAPToSDD.or_"]], "perform_wmc() (in module neurolang.probabilistic.weighted_model_counting)": [[95, "neurolang.probabilistic.weighted_model_counting.perform_wmc"]], "prepare_initial_query() (in module neurolang.probabilistic.weighted_model_counting)": [[95, "neurolang.probabilistic.weighted_model_counting.prepare_initial_query"]], "probabilistic_choice_set() (neurolang.probabilistic.weighted_model_counting.sddwmcsemiringsolver method)": [[95, "neurolang.probabilistic.weighted_model_counting.SDDWMCSemiRingSolver.probabilistic_choice_set"]], "probabilistic_choice_set() (neurolang.probabilistic.weighted_model_counting.wmcsemiringsolver method)": [[95, "neurolang.probabilistic.weighted_model_counting.WMCSemiRingSolver.probabilistic_choice_set"]], "probabilistic_fact_set() (neurolang.probabilistic.weighted_model_counting.sddwmcsemiringsolver method)": [[95, "neurolang.probabilistic.weighted_model_counting.SDDWMCSemiRingSolver.probabilistic_fact_set"]], "probabilistic_fact_set() (neurolang.probabilistic.weighted_model_counting.wmcsemiringsolver method)": [[95, "neurolang.probabilistic.weighted_model_counting.WMCSemiRingSolver.probabilistic_fact_set"]], "probabilistic_fact_set_invalid() (neurolang.probabilistic.weighted_model_counting.sddwmcsemiringsolver method)": [[95, "neurolang.probabilistic.weighted_model_counting.SDDWMCSemiRingSolver.probabilistic_fact_set_invalid"]], "probabilistic_fact_set_invalid() (neurolang.probabilistic.weighted_model_counting.wmcsemiringsolver method)": [[95, "neurolang.probabilistic.weighted_model_counting.WMCSemiRingSolver.probabilistic_fact_set_invalid"]], "sdd_compilation() (in module neurolang.probabilistic.weighted_model_counting)": [[95, "neurolang.probabilistic.weighted_model_counting.sdd_compilation"]], "sdd_compilation_and_wmc() (in module neurolang.probabilistic.weighted_model_counting)": [[95, "neurolang.probabilistic.weighted_model_counting.sdd_compilation_and_wmc"]], "sdd_solver_global_model() (in module neurolang.probabilistic.weighted_model_counting)": [[95, "neurolang.probabilistic.weighted_model_counting.sdd_solver_global_model"]], "sdd_solver_per_individual_row() (in module neurolang.probabilistic.weighted_model_counting)": [[95, "neurolang.probabilistic.weighted_model_counting.sdd_solver_per_individual_row"]], "solve_marg_query() (in module neurolang.probabilistic.weighted_model_counting)": [[95, "neurolang.probabilistic.weighted_model_counting.solve_marg_query"]], "solve_succ_query() (in module neurolang.probabilistic.weighted_model_counting)": [[95, "neurolang.probabilistic.weighted_model_counting.solve_succ_query"]], "solve_succ_query_boolean_diagram() (in module neurolang.probabilistic.weighted_model_counting)": [[95, "neurolang.probabilistic.weighted_model_counting.solve_succ_query_boolean_diagram"]], "solve_succ_query_sdd_direct() (in module neurolang.probabilistic.weighted_model_counting)": [[95, "neurolang.probabilistic.weighted_model_counting.solve_succ_query_sdd_direct"]], "symbol() (neurolang.probabilistic.weighted_model_counting.semiringraptosdd method)": [[95, "neurolang.probabilistic.weighted_model_counting.SemiRingRAPToSDD.symbol"]], "type (neurolang.probabilistic.weighted_model_counting.deterministicfactsettranslation attribute)": [[95, "neurolang.probabilistic.weighted_model_counting.DeterministicFactSetTranslation.type"]], "type (neurolang.probabilistic.weighted_model_counting.eliminatesuperfluousprojectionmixin attribute)": [[95, "neurolang.probabilistic.weighted_model_counting.EliminateSuperfluousProjectionMixin.type"]], "type (neurolang.probabilistic.weighted_model_counting.raqueryoptimiser attribute)": [[95, "neurolang.probabilistic.weighted_model_counting.RAQueryOptimiser.type"]], "type (neurolang.probabilistic.weighted_model_counting.sddwmcsemiringsolver attribute)": [[95, "neurolang.probabilistic.weighted_model_counting.SDDWMCSemiRingSolver.type"]], "type (neurolang.probabilistic.weighted_model_counting.semiringraptosdd attribute)": [[95, "neurolang.probabilistic.weighted_model_counting.SemiRingRAPToSDD.type"]], "type (neurolang.probabilistic.weighted_model_counting.wmcsemiringsolver attribute)": [[95, "neurolang.probabilistic.weighted_model_counting.WMCSemiRingSolver.type"]], "wmc_weights() (neurolang.probabilistic.weighted_model_counting.sddwmcsemiringsolver method)": [[95, "neurolang.probabilistic.weighted_model_counting.SDDWMCSemiRingSolver.wmc_weights"]], "regionsolver (class in neurolang.region_solver)": [[96, "neurolang.region_solver.RegionSolver"]], "function_regexp() (neurolang.region_solver.regionsolver method)": [[96, "neurolang.region_solver.RegionSolver.function_regexp"]], "function_region_union() (neurolang.region_solver.regionsolver method)": [[96, "neurolang.region_solver.RegionSolver.function_region_union"]], "neurolang.region_solver": [[96, "module-neurolang.region_solver"]], "type (neurolang.region_solver.regionsolver attribute)": [[96, "neurolang.region_solver.RegionSolver.type"]], "type_name (neurolang.region_solver.regionsolver attribute)": [[96, "neurolang.region_solver.RegionSolver.type_name"]], "explicitvbr (class in neurolang.regions)": [[97, "neurolang.regions.ExplicitVBR"]], "explicitvbroverlay (class in neurolang.regions)": [[97, "neurolang.regions.ExplicitVBROverlay"]], "implicitvbr (class in neurolang.regions)": [[97, "neurolang.regions.ImplicitVBR"]], "planarvolume (class in neurolang.regions)": [[97, "neurolang.regions.PlanarVolume"]], "pointset (class in neurolang.regions)": [[97, "neurolang.regions.PointSet"]], "region (class in neurolang.regions)": [[97, "neurolang.regions.Region"]], "sphericalvolume (class in neurolang.regions)": [[97, "neurolang.regions.SphericalVolume"]], "volumetricbrainregion (class in neurolang.regions)": [[97, "neurolang.regions.VolumetricBrainRegion"]], "aabb_tree (neurolang.regions.explicitvbr property)": [[97, "neurolang.regions.ExplicitVBR.aabb_tree"]], "aabb_tree (neurolang.regions.pointset property)": [[97, "neurolang.regions.PointSet.aabb_tree"]], "bounding_box (neurolang.regions.explicitvbr property)": [[97, "neurolang.regions.ExplicitVBR.bounding_box"]], "bounding_box (neurolang.regions.planarvolume property)": [[97, "neurolang.regions.PlanarVolume.bounding_box"]], "bounding_box (neurolang.regions.pointset property)": [[97, "neurolang.regions.PointSet.bounding_box"]], "bounding_box (neurolang.regions.region property)": [[97, "neurolang.regions.Region.bounding_box"]], "bounding_box (neurolang.regions.sphericalvolume property)": [[97, "neurolang.regions.SphericalVolume.bounding_box"]], "build_tree() (neurolang.regions.explicitvbr method)": [[97, "neurolang.regions.ExplicitVBR.build_tree"]], "build_tree() (neurolang.regions.pointset method)": [[97, "neurolang.regions.PointSet.build_tree"]], "center (neurolang.regions.region property)": [[97, "neurolang.regions.Region.center"]], "center (neurolang.regions.sphericalvolume property)": [[97, "neurolang.regions.SphericalVolume.center"]], "from_spatial_image_label() (neurolang.regions.region static method)": [[97, "neurolang.regions.Region.from_spatial_image_label"]], "generate_bounding_box() (neurolang.regions.explicitvbr method)": [[97, "neurolang.regions.ExplicitVBR.generate_bounding_box"]], "generate_bounding_box() (neurolang.regions.pointset method)": [[97, "neurolang.regions.PointSet.generate_bounding_box"]], "neurolang.regions": [[97, "module-neurolang.regions"]], "project_point_to_plane() (neurolang.regions.planarvolume method)": [[97, "neurolang.regions.PlanarVolume.project_point_to_plane"]], "radius (neurolang.regions.sphericalvolume property)": [[97, "neurolang.regions.SphericalVolume.radius"]], "region_difference() (in module neurolang.regions)": [[97, "neurolang.regions.region_difference"]], "region_intersection() (in module neurolang.regions)": [[97, "neurolang.regions.region_intersection"]], "region_set_from_masked_data() (in module neurolang.regions)": [[97, "neurolang.regions.region_set_from_masked_data"]], "region_union() (in module neurolang.regions)": [[97, "neurolang.regions.region_union"]], "remove_empty_bounding_boxes() (neurolang.regions.volumetricbrainregion method)": [[97, "neurolang.regions.VolumetricBrainRegion.remove_empty_bounding_boxes"]], "spatial_image() (neurolang.regions.explicitvbr method)": [[97, "neurolang.regions.ExplicitVBR.spatial_image"]], "spatial_image() (neurolang.regions.explicitvbroverlay method)": [[97, "neurolang.regions.ExplicitVBROverlay.spatial_image"]], "spatial_image() (neurolang.regions.pointset method)": [[97, "neurolang.regions.PointSet.spatial_image"]], "take_principal_regions() (in module neurolang.regions)": [[97, "neurolang.regions.take_principal_regions"]], "to_explicit_vbr() (neurolang.regions.volumetricbrainregion method)": [[97, "neurolang.regions.VolumetricBrainRegion.to_explicit_vbr"]], "to_ijk() (neurolang.regions.explicitvbr method)": [[97, "neurolang.regions.ExplicitVBR.to_ijk"]], "to_ijk() (neurolang.regions.implicitvbr method)": [[97, "neurolang.regions.ImplicitVBR.to_ijk"]], "to_ijk() (neurolang.regions.planarvolume method)": [[97, "neurolang.regions.PlanarVolume.to_ijk"]], "to_ijk() (neurolang.regions.pointset method)": [[97, "neurolang.regions.PointSet.to_ijk"]], "to_ijk() (neurolang.regions.sphericalvolume method)": [[97, "neurolang.regions.SphericalVolume.to_ijk"]], "to_ijk() (neurolang.regions.volumetricbrainregion method)": [[97, "neurolang.regions.VolumetricBrainRegion.to_ijk"]], "to_ijk_set() (neurolang.regions.volumetricbrainregion method)": [[97, "neurolang.regions.VolumetricBrainRegion.to_ijk_set"]], "to_xyz() (neurolang.regions.explicitvbr method)": [[97, "neurolang.regions.ExplicitVBR.to_xyz"]], "to_xyz() (neurolang.regions.implicitvbr method)": [[97, "neurolang.regions.ImplicitVBR.to_xyz"]], "to_xyz() (neurolang.regions.pointset method)": [[97, "neurolang.regions.PointSet.to_xyz"]], "to_xyz() (neurolang.regions.volumetricbrainregion method)": [[97, "neurolang.regions.VolumetricBrainRegion.to_xyz"]], "to_xyz_set() (neurolang.regions.volumetricbrainregion method)": [[97, "neurolang.regions.VolumetricBrainRegion.to_xyz_set"]], "width (neurolang.regions.region property)": [[97, "neurolang.regions.Region.width"]], "neurolang.relational_algebra": [[98, "module-neurolang.relational_algebra"]], "commutejoinsavoidcrossproducts (class in neurolang.relational_algebra.optimisers)": [[99, "neurolang.relational_algebra.optimisers.CommuteJoinsAvoidCrossProducts"]], "eliminatetrivialprojections (class in neurolang.relational_algebra.optimisers)": [[99, "neurolang.relational_algebra.optimisers.EliminateTrivialProjections"]], "productsimplification (class in neurolang.relational_algebra.optimisers)": [[99, "neurolang.relational_algebra.optimisers.ProductSimplification"]], "pushinselections (class in neurolang.relational_algebra.optimisers)": [[99, "neurolang.relational_algebra.optimisers.PushInSelections"]], "pushunnamedselectionsup (class in neurolang.relational_algebra.optimisers)": [[99, "neurolang.relational_algebra.optimisers.PushUnnamedSelectionsUp"]], "relationalalgebraoptimiser (class in neurolang.relational_algebra.optimisers)": [[99, "neurolang.relational_algebra.optimisers.RelationalAlgebraOptimiser"]], "renameoptimizations (class in neurolang.relational_algebra.optimisers)": [[99, "neurolang.relational_algebra.optimisers.RenameOptimizations"]], "rewriteselections (class in neurolang.relational_algebra.optimisers)": [[99, "neurolang.relational_algebra.optimisers.RewriteSelections"]], "simplifyextendedprojectionswithconstants (class in neurolang.relational_algebra.optimisers)": [[99, "neurolang.relational_algebra.optimisers.SimplifyExtendedProjectionsWithConstants"]], "commute_left() (neurolang.relational_algebra.optimisers.commutejoinsavoidcrossproducts method)": [[99, "neurolang.relational_algebra.optimisers.CommuteJoinsAvoidCrossProducts.commute_left"]], "commute_right() (neurolang.relational_algebra.optimisers.commutejoinsavoidcrossproducts method)": [[99, "neurolang.relational_algebra.optimisers.CommuteJoinsAvoidCrossProducts.commute_right"]], "convert_extended_projection_2_projection() (neurolang.relational_algebra.optimisers.eliminatetrivialprojections method)": [[99, "neurolang.relational_algebra.optimisers.EliminateTrivialProjections.convert_extended_projection_2_projection"]], "convert_extended_projection_2_rename() (neurolang.relational_algebra.optimisers.eliminatetrivialprojections method)": [[99, "neurolang.relational_algebra.optimisers.EliminateTrivialProjections.convert_extended_projection_2_rename"]], "convert_rename_column() (neurolang.relational_algebra.optimisers.renameoptimizations method)": [[99, "neurolang.relational_algebra.optimisers.RenameOptimizations.convert_rename_column"]], "eliminate_trivial_nested_projection() (neurolang.relational_algebra.optimisers.eliminatetrivialprojections method)": [[99, "neurolang.relational_algebra.optimisers.EliminateTrivialProjections.eliminate_trivial_nested_projection"]], "eliminate_trivial_nested_unnamed_projection() (neurolang.relational_algebra.optimisers.eliminatetrivialprojections method)": [[99, "neurolang.relational_algebra.optimisers.EliminateTrivialProjections.eliminate_trivial_nested_unnamed_projection"]], "eliminate_trivial_number_columns() (neurolang.relational_algebra.optimisers.renameoptimizations method)": [[99, "neurolang.relational_algebra.optimisers.RenameOptimizations.eliminate_trivial_number_columns"]], "eliminate_trivial_projection() (neurolang.relational_algebra.optimisers.eliminatetrivialprojections method)": [[99, "neurolang.relational_algebra.optimisers.EliminateTrivialProjections.eliminate_trivial_projection"]], "eliminate_trivial_projection_number_columns() (neurolang.relational_algebra.optimisers.renameoptimizations method)": [[99, "neurolang.relational_algebra.optimisers.RenameOptimizations.eliminate_trivial_projection_number_columns"]], "eliminate_trivial_selection_number_columns() (neurolang.relational_algebra.optimisers.renameoptimizations method)": [[99, "neurolang.relational_algebra.optimisers.RenameOptimizations.eliminate_trivial_selection_number_columns"]], "get_arity() (neurolang.relational_algebra.optimisers.rewriteselections static method)": [[99, "neurolang.relational_algebra.optimisers.RewriteSelections.get_arity"]], "invert_selection_order() (neurolang.relational_algebra.optimisers.pushunnamedselectionsup method)": [[99, "neurolang.relational_algebra.optimisers.PushUnnamedSelectionsUp.invert_selection_order"]], "merge_nested_rename_columns() (neurolang.relational_algebra.optimisers.renameoptimizations method)": [[99, "neurolang.relational_algebra.optimisers.RenameOptimizations.merge_nested_rename_columns"]], "merge_rename_column_group_by() (neurolang.relational_algebra.optimisers.renameoptimizations method)": [[99, "neurolang.relational_algebra.optimisers.RenameOptimizations.merge_rename_column_group_by"]], "merge_rename_columns_extended_projection() (neurolang.relational_algebra.optimisers.renameoptimizations method)": [[99, "neurolang.relational_algebra.optimisers.RenameOptimizations.merge_rename_columns_extended_projection"]], "merge_selections() (neurolang.relational_algebra.optimisers.rewriteselections method)": [[99, "neurolang.relational_algebra.optimisers.RewriteSelections.merge_selections"]], "nested_extended_projection_constant() (neurolang.relational_algebra.optimisers.simplifyextendedprojectionswithconstants method)": [[99, "neurolang.relational_algebra.optimisers.SimplifyExtendedProjectionsWithConstants.nested_extended_projection_constant"]], "nested_extended_projection_leftnaturaljoin_constant() (neurolang.relational_algebra.optimisers.simplifyextendedprojectionswithconstants method)": [[99, "neurolang.relational_algebra.optimisers.SimplifyExtendedProjectionsWithConstants.nested_extended_projection_leftnaturaljoin_constant"]], "nested_extended_projection_leftnaturaljoin_constantr() (neurolang.relational_algebra.optimisers.simplifyextendedprojectionswithconstants method)": [[99, "neurolang.relational_algebra.optimisers.SimplifyExtendedProjectionsWithConstants.nested_extended_projection_leftnaturaljoin_constantr"]], "nested_extended_projection_naturaljoin_constant_l() (neurolang.relational_algebra.optimisers.simplifyextendedprojectionswithconstants method)": [[99, "neurolang.relational_algebra.optimisers.SimplifyExtendedProjectionsWithConstants.nested_extended_projection_naturaljoin_constant_l"]], "nested_extended_projection_naturaljoin_constantr() (neurolang.relational_algebra.optimisers.simplifyextendedprojectionswithconstants method)": [[99, "neurolang.relational_algebra.optimisers.SimplifyExtendedProjectionsWithConstants.nested_extended_projection_naturaljoin_constantr"]], "nested_extended_projection_outernaturaljoin_constant() (neurolang.relational_algebra.optimisers.simplifyextendedprojectionswithconstants method)": [[99, "neurolang.relational_algebra.optimisers.SimplifyExtendedProjectionsWithConstants.nested_extended_projection_outernaturaljoin_constant"]], "nested_extended_projection_outernaturaljoin_constantr() (neurolang.relational_algebra.optimisers.simplifyextendedprojectionswithconstants method)": [[99, "neurolang.relational_algebra.optimisers.SimplifyExtendedProjectionsWithConstants.nested_extended_projection_outernaturaljoin_constantr"]], "neurolang.relational_algebra.optimisers": [[99, "module-neurolang.relational_algebra.optimisers"]], "push_and_rename_in_naturaljoin() (neurolang.relational_algebra.optimisers.pushinselections method)": [[99, "neurolang.relational_algebra.optimisers.PushInSelections.push_and_rename_in_naturaljoin"]], "push_computed_columns_up() (neurolang.relational_algebra.optimisers.simplifyextendedprojectionswithconstants method)": [[99, "neurolang.relational_algebra.optimisers.SimplifyExtendedProjectionsWithConstants.push_computed_columns_up"]], "push_computed_columns_up_flip() (neurolang.relational_algebra.optimisers.simplifyextendedprojectionswithconstants method)": [[99, "neurolang.relational_algebra.optimisers.SimplifyExtendedProjectionsWithConstants.push_computed_columns_up_flip"]], "push_computed_columns_up_left() (neurolang.relational_algebra.optimisers.simplifyextendedprojectionswithconstants method)": [[99, "neurolang.relational_algebra.optimisers.SimplifyExtendedProjectionsWithConstants.push_computed_columns_up_left"]], "push_computed_columns_up_outer() (neurolang.relational_algebra.optimisers.simplifyextendedprojectionswithconstants method)": [[99, "neurolang.relational_algebra.optimisers.SimplifyExtendedProjectionsWithConstants.push_computed_columns_up_outer"]], "push_rename_past_groupby() (neurolang.relational_algebra.optimisers.renameoptimizations method)": [[99, "neurolang.relational_algebra.optimisers.RenameOptimizations.push_rename_past_groupby"]], "push_rename_past_projection() (neurolang.relational_algebra.optimisers.renameoptimizations method)": [[99, "neurolang.relational_algebra.optimisers.RenameOptimizations.push_rename_past_projection"]], "push_rename_past_selection() (neurolang.relational_algebra.optimisers.renameoptimizations method)": [[99, "neurolang.relational_algebra.optimisers.RenameOptimizations.push_rename_past_selection"]], "push_replace_null_in_ext_proj() (neurolang.relational_algebra.optimisers.simplifyextendedprojectionswithconstants method)": [[99, "neurolang.relational_algebra.optimisers.SimplifyExtendedProjectionsWithConstants.push_replace_null_in_ext_proj"]], "push_selection_above_name_columns() (neurolang.relational_algebra.optimisers.pushunnamedselectionsup method)": [[99, "neurolang.relational_algebra.optimisers.PushUnnamedSelectionsUp.push_selection_above_name_columns"]], "push_selection_above_projection() (neurolang.relational_algebra.optimisers.pushunnamedselectionsup method)": [[99, "neurolang.relational_algebra.optimisers.PushUnnamedSelectionsUp.push_selection_above_projection"]], "push_selection_in_extended_projection() (neurolang.relational_algebra.optimisers.pushinselections method)": [[99, "neurolang.relational_algebra.optimisers.PushInSelections.push_selection_in_extended_projection"]], "push_selection_in_groupby() (neurolang.relational_algebra.optimisers.pushinselections method)": [[99, "neurolang.relational_algebra.optimisers.PushInSelections.push_selection_in_groupby"]], "push_selection_in_left() (neurolang.relational_algebra.optimisers.pushinselections method)": [[99, "neurolang.relational_algebra.optimisers.PushInSelections.push_selection_in_left"]], "push_selection_in_leftnaturaljoin_left() (neurolang.relational_algebra.optimisers.pushinselections method)": [[99, "neurolang.relational_algebra.optimisers.PushInSelections.push_selection_in_leftnaturaljoin_left"]], "push_selection_in_leftnaturaljoin_right() (neurolang.relational_algebra.optimisers.pushinselections method)": [[99, "neurolang.relational_algebra.optimisers.PushInSelections.push_selection_in_leftnaturaljoin_right"]], "push_selection_in_outernaturaljoin_left() (neurolang.relational_algebra.optimisers.pushinselections method)": [[99, "neurolang.relational_algebra.optimisers.PushInSelections.push_selection_in_outernaturaljoin_left"]], "push_selection_in_outernaturaljoin_right() (neurolang.relational_algebra.optimisers.pushinselections method)": [[99, "neurolang.relational_algebra.optimisers.PushInSelections.push_selection_in_outernaturaljoin_right"]], "push_selection_in_projection() (neurolang.relational_algebra.optimisers.pushinselections method)": [[99, "neurolang.relational_algebra.optimisers.PushInSelections.push_selection_in_projection"]], "push_selection_in_replace_null() (neurolang.relational_algebra.optimisers.pushinselections method)": [[99, "neurolang.relational_algebra.optimisers.PushInSelections.push_selection_in_replace_null"]], "push_selection_in_right() (neurolang.relational_algebra.optimisers.pushinselections method)": [[99, "neurolang.relational_algebra.optimisers.PushInSelections.push_selection_in_right"]], "remove_trivial_rename() (neurolang.relational_algebra.optimisers.renameoptimizations method)": [[99, "neurolang.relational_algebra.optimisers.RenameOptimizations.remove_trivial_rename"]], "replace_trivial_agg_groupby() (neurolang.relational_algebra.optimisers.simplifyextendedprojectionswithconstants method)": [[99, "neurolang.relational_algebra.optimisers.SimplifyExtendedProjectionsWithConstants.replace_trivial_agg_groupby"]], "selection_between_columns_product() (neurolang.relational_algebra.optimisers.rewriteselections method)": [[99, "neurolang.relational_algebra.optimisers.RewriteSelections.selection_between_columns_product"]], "selection_by_constant_on_product() (neurolang.relational_algebra.optimisers.rewriteselections method)": [[99, "neurolang.relational_algebra.optimisers.RewriteSelections.selection_by_constant_on_product"]], "selection_on_equijoin() (neurolang.relational_algebra.optimisers.rewriteselections method)": [[99, "neurolang.relational_algebra.optimisers.RewriteSelections.selection_on_equijoin"]], "selection_on_equijoin_columns() (neurolang.relational_algebra.optimisers.rewriteselections method)": [[99, "neurolang.relational_algebra.optimisers.RewriteSelections.selection_on_equijoin_columns"]], "selection_push_right() (neurolang.relational_algebra.optimisers.rewriteselections method)": [[99, "neurolang.relational_algebra.optimisers.RewriteSelections.selection_push_right"]], "selection_selection_swap() (neurolang.relational_algebra.optimisers.rewriteselections method)": [[99, "neurolang.relational_algebra.optimisers.RewriteSelections.selection_selection_swap"]], "selection_shorten_right() (neurolang.relational_algebra.optimisers.rewriteselections method)": [[99, "neurolang.relational_algebra.optimisers.RewriteSelections.selection_shorten_right"]], "simplify_projection_extended_projection() (neurolang.relational_algebra.optimisers.eliminatetrivialprojections method)": [[99, "neurolang.relational_algebra.optimisers.EliminateTrivialProjections.simplify_projection_extended_projection"]], "simplify_renames_name() (neurolang.relational_algebra.optimisers.renameoptimizations method)": [[99, "neurolang.relational_algebra.optimisers.RenameOptimizations.simplify_renames_name"]], "single_product() (neurolang.relational_algebra.optimisers.productsimplification method)": [[99, "neurolang.relational_algebra.optimisers.ProductSimplification.single_product"]], "sort_formula_args() (neurolang.relational_algebra.optimisers.rewriteselections method)": [[99, "neurolang.relational_algebra.optimisers.RewriteSelections.sort_formula_args"]], "split_relations_column() (neurolang.relational_algebra.optimisers.rewriteselections static method)": [[99, "neurolang.relational_algebra.optimisers.RewriteSelections.split_relations_column"]], "split_rename_left_naturaljoin() (neurolang.relational_algebra.optimisers.renameoptimizations method)": [[99, "neurolang.relational_algebra.optimisers.RenameOptimizations.split_rename_left_naturaljoin"]], "split_rename_naturaljoin() (neurolang.relational_algebra.optimisers.renameoptimizations method)": [[99, "neurolang.relational_algebra.optimisers.RenameOptimizations.split_rename_naturaljoin"]], "split_rename_outer_naturaljoin() (neurolang.relational_algebra.optimisers.renameoptimizations method)": [[99, "neurolang.relational_algebra.optimisers.RenameOptimizations.split_rename_outer_naturaljoin"]], "standardize_projected_column() (neurolang.relational_algebra.optimisers.pushunnamedselectionsup method)": [[99, "neurolang.relational_algebra.optimisers.PushUnnamedSelectionsUp.standardize_projected_column"]], "swap_formula_args() (neurolang.relational_algebra.optimisers.rewriteselections method)": [[99, "neurolang.relational_algebra.optimisers.RewriteSelections.swap_formula_args"]], "switch_rename_replace_null() (neurolang.relational_algebra.optimisers.renameoptimizations method)": [[99, "neurolang.relational_algebra.optimisers.RenameOptimizations.switch_rename_replace_null"]], "type (neurolang.relational_algebra.optimisers.commutejoinsavoidcrossproducts attribute)": [[99, "neurolang.relational_algebra.optimisers.CommuteJoinsAvoidCrossProducts.type"]], "type (neurolang.relational_algebra.optimisers.eliminatetrivialprojections attribute)": [[99, "neurolang.relational_algebra.optimisers.EliminateTrivialProjections.type"]], "type (neurolang.relational_algebra.optimisers.productsimplification attribute)": [[99, "neurolang.relational_algebra.optimisers.ProductSimplification.type"]], "type (neurolang.relational_algebra.optimisers.pushinselections attribute)": [[99, "neurolang.relational_algebra.optimisers.PushInSelections.type"]], "type (neurolang.relational_algebra.optimisers.pushunnamedselectionsup attribute)": [[99, "neurolang.relational_algebra.optimisers.PushUnnamedSelectionsUp.type"]], "type (neurolang.relational_algebra.optimisers.relationalalgebraoptimiser attribute)": [[99, "neurolang.relational_algebra.optimisers.RelationalAlgebraOptimiser.type"]], "type (neurolang.relational_algebra.optimisers.renameoptimizations attribute)": [[99, "neurolang.relational_algebra.optimisers.RenameOptimizations.type"]], "type (neurolang.relational_algebra.optimisers.rewriteselections attribute)": [[99, "neurolang.relational_algebra.optimisers.RewriteSelections.type"]], "type (neurolang.relational_algebra.optimisers.simplifyextendedprojectionswithconstants attribute)": [[99, "neurolang.relational_algebra.optimisers.SimplifyExtendedProjectionsWithConstants.type"]], "binaryrelationalalgebraoperation (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.BinaryRelationalAlgebraOperation"]], "column (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.Column"]], "columnint (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.ColumnInt"]], "columnstr (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.ColumnStr"]], "concatenateconstantcolumn (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.ConcatenateConstantColumn"]], "destroy (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.Destroy"]], "difference (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.Difference"]], "equijoin (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.EquiJoin"]], "extendedprojection (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.ExtendedProjection"]], "fullouternaturaljoin (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.FullOuterNaturalJoin"]], "functionapplicationlistmember (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.FunctionApplicationListMember"]], "groupbyaggregation (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.GroupByAggregation"]], "intersection (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.Intersection"]], "leftnaturaljoin (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.LeftNaturalJoin"]], "naryrelationalalgebraoperation (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.NAryRelationalAlgebraOperation"]], "namecolumns (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.NameColumns"]], "naturaljoin (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.NaturalJoin"]], "numbercolumns (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.NumberColumns"]], "product (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.Product"]], "projection (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.Projection"]], "relationalalgebraoperation (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraOperation"]], "relationalalgebrasolver (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver"]], "renamecolumn (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.RenameColumn"]], "renamecolumns (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.RenameColumns"]], "replaceconstantcolumnstrbysymbol (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.ReplaceConstantColumnStrBySymbol"]], "replacenull (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.ReplaceNull"]], "selection (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.Selection"]], "stringarithmeticwalker (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.StringArithmeticWalker"]], "unaryrelationalalgebraoperation (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.UnaryRelationalAlgebraOperation"]], "union (class in neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.Union"]], "aggregate() (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.aggregate"]], "arithmetic_operation() (neurolang.relational_algebra.relational_algebra.stringarithmeticwalker method)": [[100, "neurolang.relational_algebra.relational_algebra.StringArithmeticWalker.arithmetic_operation"]], "arithmetic_string_expression() (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.arithmetic_string_expression"]], "column_int() (neurolang.relational_algebra.relational_algebra.replaceconstantcolumnstrbysymbol method)": [[100, "neurolang.relational_algebra.relational_algebra.ReplaceConstantColumnStrBySymbol.column_int"]], "column_str() (neurolang.relational_algebra.relational_algebra.replaceconstantcolumnstrbysymbol method)": [[100, "neurolang.relational_algebra.relational_algebra.ReplaceConstantColumnStrBySymbol.column_str"]], "columns() (neurolang.relational_algebra.relational_algebra.binaryrelationalalgebraoperation method)": [[100, "neurolang.relational_algebra.relational_algebra.BinaryRelationalAlgebraOperation.columns"]], "columns() (neurolang.relational_algebra.relational_algebra.concatenateconstantcolumn method)": [[100, "neurolang.relational_algebra.relational_algebra.ConcatenateConstantColumn.columns"]], "columns() (neurolang.relational_algebra.relational_algebra.extendedprojection method)": [[100, "neurolang.relational_algebra.relational_algebra.ExtendedProjection.columns"]], "columns() (neurolang.relational_algebra.relational_algebra.groupbyaggregation method)": [[100, "neurolang.relational_algebra.relational_algebra.GroupByAggregation.columns"]], "columns() (neurolang.relational_algebra.relational_algebra.naryrelationalalgebraoperation method)": [[100, "neurolang.relational_algebra.relational_algebra.NAryRelationalAlgebraOperation.columns"]], "columns() (neurolang.relational_algebra.relational_algebra.namecolumns method)": [[100, "neurolang.relational_algebra.relational_algebra.NameColumns.columns"]], "columns() (neurolang.relational_algebra.relational_algebra.numbercolumns method)": [[100, "neurolang.relational_algebra.relational_algebra.NumberColumns.columns"]], "columns() (neurolang.relational_algebra.relational_algebra.relationalalgebraoperation method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraOperation.columns"]], "columns() (neurolang.relational_algebra.relational_algebra.renamecolumn method)": [[100, "neurolang.relational_algebra.relational_algebra.RenameColumn.columns"]], "columns() (neurolang.relational_algebra.relational_algebra.renamecolumns method)": [[100, "neurolang.relational_algebra.relational_algebra.RenameColumns.columns"]], "columns() (neurolang.relational_algebra.relational_algebra.unaryrelationalalgebraoperation method)": [[100, "neurolang.relational_algebra.relational_algebra.UnaryRelationalAlgebraOperation.columns"]], "concatenate_constant_column() (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.concatenate_constant_column"]], "extended_projection() (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.extended_projection"]], "get_expression_columns() (in module neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.get_expression_columns"]], "int2columnint_constant() (in module neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.int2columnint_constant"]], "is_arithmetic_operation() (in module neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.is_arithmetic_operation"]], "is_translatable_operation() (in module neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.is_translatable_operation"]], "negative_value() (neurolang.relational_algebra.relational_algebra.stringarithmeticwalker method)": [[100, "neurolang.relational_algebra.relational_algebra.StringArithmeticWalker.negative_value"]], "neurolang.relational_algebra.relational_algebra": [[100, "module-neurolang.relational_algebra.relational_algebra"]], "operation_sum() (neurolang.relational_algebra.relational_algebra.stringarithmeticwalker method)": [[100, "neurolang.relational_algebra.relational_algebra.StringArithmeticWalker.operation_sum"]], "process_constant_column_int() (neurolang.relational_algebra.relational_algebra.stringarithmeticwalker method)": [[100, "neurolang.relational_algebra.relational_algebra.StringArithmeticWalker.process_constant_column_int"]], "process_constant_column_str() (neurolang.relational_algebra.relational_algebra.stringarithmeticwalker method)": [[100, "neurolang.relational_algebra.relational_algebra.StringArithmeticWalker.process_constant_column_str"]], "process_constant_float() (neurolang.relational_algebra.relational_algebra.stringarithmeticwalker method)": [[100, "neurolang.relational_algebra.relational_algebra.StringArithmeticWalker.process_constant_float"]], "process_constant_int() (neurolang.relational_algebra.relational_algebra.stringarithmeticwalker method)": [[100, "neurolang.relational_algebra.relational_algebra.StringArithmeticWalker.process_constant_int"]], "process_constant_str() (neurolang.relational_algebra.relational_algebra.stringarithmeticwalker method)": [[100, "neurolang.relational_algebra.relational_algebra.StringArithmeticWalker.process_constant_str"]], "prov_arithmetic_operation() (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.prov_arithmetic_operation"]], "ra_constant() (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.ra_constant"]], "ra_difference() (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.ra_difference"]], "ra_equijoin() (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.ra_equijoin"]], "ra_full_outer_naturaljoin() (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.ra_full_outer_naturaljoin"]], "ra_intersection() (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.ra_intersection"]], "ra_left_naturaljoin() (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.ra_left_naturaljoin"]], "ra_name_columns() (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.ra_name_columns"]], "ra_naturaljoin() (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.ra_naturaljoin"]], "ra_number_columns() (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.ra_number_columns"]], "ra_product() (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.ra_product"]], "ra_projection() (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.ra_projection"]], "ra_rename_column() (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.ra_rename_column"]], "ra_rename_columns() (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.ra_rename_columns"]], "ra_symbol() (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.ra_symbol"]], "ra_union() (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.ra_union"]], "replace_null() (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.replace_null"]], "selection_between_columns() (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.selection_between_columns"]], "selection_by_constant() (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.selection_by_constant"]], "selection_general_selection_by_constant() (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.selection_general_selection_by_constant"]], "set_destroy() (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver method)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.set_destroy"]], "str2columnstr_constant() (in module neurolang.relational_algebra.relational_algebra)": [[100, "neurolang.relational_algebra.relational_algebra.str2columnstr_constant"]], "translatable_numpy_operation() (neurolang.relational_algebra.relational_algebra.stringarithmeticwalker method)": [[100, "neurolang.relational_algebra.relational_algebra.StringArithmeticWalker.translatable_numpy_operation"]], "type (neurolang.relational_algebra.relational_algebra.binaryrelationalalgebraoperation attribute)": [[100, "neurolang.relational_algebra.relational_algebra.BinaryRelationalAlgebraOperation.type"]], "type (neurolang.relational_algebra.relational_algebra.concatenateconstantcolumn attribute)": [[100, "neurolang.relational_algebra.relational_algebra.ConcatenateConstantColumn.type"]], "type (neurolang.relational_algebra.relational_algebra.destroy attribute)": [[100, "neurolang.relational_algebra.relational_algebra.Destroy.type"]], "type (neurolang.relational_algebra.relational_algebra.difference attribute)": [[100, "neurolang.relational_algebra.relational_algebra.Difference.type"]], "type (neurolang.relational_algebra.relational_algebra.equijoin attribute)": [[100, "neurolang.relational_algebra.relational_algebra.EquiJoin.type"]], "type (neurolang.relational_algebra.relational_algebra.extendedprojection attribute)": [[100, "neurolang.relational_algebra.relational_algebra.ExtendedProjection.type"]], "type (neurolang.relational_algebra.relational_algebra.fullouternaturaljoin attribute)": [[100, "neurolang.relational_algebra.relational_algebra.FullOuterNaturalJoin.type"]], "type (neurolang.relational_algebra.relational_algebra.functionapplicationlistmember attribute)": [[100, "neurolang.relational_algebra.relational_algebra.FunctionApplicationListMember.type"]], "type (neurolang.relational_algebra.relational_algebra.groupbyaggregation attribute)": [[100, "neurolang.relational_algebra.relational_algebra.GroupByAggregation.type"]], "type (neurolang.relational_algebra.relational_algebra.intersection attribute)": [[100, "neurolang.relational_algebra.relational_algebra.Intersection.type"]], "type (neurolang.relational_algebra.relational_algebra.leftnaturaljoin attribute)": [[100, "neurolang.relational_algebra.relational_algebra.LeftNaturalJoin.type"]], "type (neurolang.relational_algebra.relational_algebra.naryrelationalalgebraoperation attribute)": [[100, "neurolang.relational_algebra.relational_algebra.NAryRelationalAlgebraOperation.type"]], "type (neurolang.relational_algebra.relational_algebra.namecolumns attribute)": [[100, "neurolang.relational_algebra.relational_algebra.NameColumns.type"]], "type (neurolang.relational_algebra.relational_algebra.naturaljoin attribute)": [[100, "neurolang.relational_algebra.relational_algebra.NaturalJoin.type"]], "type (neurolang.relational_algebra.relational_algebra.numbercolumns attribute)": [[100, "neurolang.relational_algebra.relational_algebra.NumberColumns.type"]], "type (neurolang.relational_algebra.relational_algebra.product attribute)": [[100, "neurolang.relational_algebra.relational_algebra.Product.type"]], "type (neurolang.relational_algebra.relational_algebra.projection attribute)": [[100, "neurolang.relational_algebra.relational_algebra.Projection.type"]], "type (neurolang.relational_algebra.relational_algebra.relationalalgebraoperation attribute)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraOperation.type"]], "type (neurolang.relational_algebra.relational_algebra.relationalalgebrasolver attribute)": [[100, "neurolang.relational_algebra.relational_algebra.RelationalAlgebraSolver.type"]], "type (neurolang.relational_algebra.relational_algebra.renamecolumn attribute)": [[100, "neurolang.relational_algebra.relational_algebra.RenameColumn.type"]], "type (neurolang.relational_algebra.relational_algebra.renamecolumns attribute)": [[100, "neurolang.relational_algebra.relational_algebra.RenameColumns.type"]], "type (neurolang.relational_algebra.relational_algebra.replaceconstantcolumnstrbysymbol attribute)": [[100, "neurolang.relational_algebra.relational_algebra.ReplaceConstantColumnStrBySymbol.type"]], "type (neurolang.relational_algebra.relational_algebra.replacenull attribute)": [[100, "neurolang.relational_algebra.relational_algebra.ReplaceNull.type"]], "type (neurolang.relational_algebra.relational_algebra.selection attribute)": [[100, "neurolang.relational_algebra.relational_algebra.Selection.type"]], "type (neurolang.relational_algebra.relational_algebra.stringarithmeticwalker attribute)": [[100, "neurolang.relational_algebra.relational_algebra.StringArithmeticWalker.type"]], "type (neurolang.relational_algebra.relational_algebra.unaryrelationalalgebraoperation attribute)": [[100, "neurolang.relational_algebra.relational_algebra.UnaryRelationalAlgebraOperation.type"]], "type (neurolang.relational_algebra.relational_algebra.union attribute)": [[100, "neurolang.relational_algebra.relational_algebra.Union.type"]], "neurolang.relational_algebra_provenance": [[101, "module-neurolang.relational_algebra_provenance"]], "booleanoperationssolver (class in neurolang.solver)": [[102, "neurolang.solver.BooleanOperationsSolver"]], "booleanrewritesolver (class in neurolang.solver)": [[102, "neurolang.solver.BooleanRewriteSolver"]], "firstorderlogicsolver (class in neurolang.solver)": [[102, "neurolang.solver.FirstOrderLogicSolver"]], "genericsolver (class in neurolang.solver)": [[102, "neurolang.solver.GenericSolver"]], "neurolangpredicateexception": [[102, "neurolang.solver.NeuroLangPredicateException"]], "numericoperationssolver (class in neurolang.solver)": [[102, "neurolang.solver.NumericOperationsSolver"]], "bring_constants_up_left() (neurolang.solver.booleanrewritesolver method)": [[102, "neurolang.solver.BooleanRewriteSolver.bring_constants_up_left"]], "cast_binary() (neurolang.solver.booleanrewritesolver method)": [[102, "neurolang.solver.BooleanRewriteSolver.cast_binary"]], "cast_binary() (neurolang.solver.numericoperationssolver method)": [[102, "neurolang.solver.NumericOperationsSolver.cast_binary"]], "cast_unary() (neurolang.solver.booleanrewritesolver method)": [[102, "neurolang.solver.BooleanRewriteSolver.cast_unary"]], "cast_unary() (neurolang.solver.numericoperationssolver method)": [[102, "neurolang.solver.NumericOperationsSolver.cast_unary"]], "conjunction_composition_dual() (neurolang.solver.booleanrewritesolver method)": [[102, "neurolang.solver.BooleanRewriteSolver.conjunction_composition_dual"]], "conjunction_definition_dual() (neurolang.solver.booleanrewritesolver method)": [[102, "neurolang.solver.BooleanRewriteSolver.conjunction_definition_dual"]], "conjunction_distribution() (neurolang.solver.booleanrewritesolver method)": [[102, "neurolang.solver.BooleanRewriteSolver.conjunction_distribution"]], "dual_operator() (neurolang.solver.booleanrewritesolver method)": [[102, "neurolang.solver.BooleanRewriteSolver.dual_operator"]], "existential_predicate() (neurolang.solver.firstorderlogicsolver method)": [[102, "neurolang.solver.FirstOrderLogicSolver.existential_predicate"]], "neg_disj_to_conj() (neurolang.solver.booleanrewritesolver method)": [[102, "neurolang.solver.BooleanRewriteSolver.neg_disj_to_conj"]], "neurolang.solver": [[102, "module-neurolang.solver"]], "new_set() (neurolang.solver.firstorderlogicsolver static method)": [[102, "neurolang.solver.FirstOrderLogicSolver.new_set"]], "partial_binary_evaluation() (neurolang.solver.booleanrewritesolver method)": [[102, "neurolang.solver.BooleanRewriteSolver.partial_binary_evaluation"]], "plural_type_name (neurolang.solver.genericsolver property)": [[102, "neurolang.solver.GenericSolver.plural_type_name"]], "quantifier_head_symbols_and_adom() (neurolang.solver.firstorderlogicsolver method)": [[102, "neurolang.solver.FirstOrderLogicSolver.quantifier_head_symbols_and_adom"]], "query_resolution() (neurolang.solver.firstorderlogicsolver method)": [[102, "neurolang.solver.FirstOrderLogicSolver.query_resolution"]], "rewrite_boolean_and() (neurolang.solver.booleanoperationssolver method)": [[102, "neurolang.solver.BooleanOperationsSolver.rewrite_boolean_and"]], "rewrite_boolean_and_l() (neurolang.solver.booleanoperationssolver method)": [[102, "neurolang.solver.BooleanOperationsSolver.rewrite_boolean_and_l"]], "rewrite_boolean_and_r() (neurolang.solver.booleanoperationssolver method)": [[102, "neurolang.solver.BooleanOperationsSolver.rewrite_boolean_and_r"]], "rewrite_boolean_inversion() (neurolang.solver.booleanoperationssolver method)": [[102, "neurolang.solver.BooleanOperationsSolver.rewrite_boolean_inversion"]], "rewrite_boolean_or() (neurolang.solver.booleanoperationssolver method)": [[102, "neurolang.solver.BooleanOperationsSolver.rewrite_boolean_or"]], "rewrite_boolean_or_l() (neurolang.solver.booleanoperationssolver method)": [[102, "neurolang.solver.BooleanOperationsSolver.rewrite_boolean_or_l"]], "rewrite_boolean_or_r() (neurolang.solver.booleanoperationssolver method)": [[102, "neurolang.solver.BooleanOperationsSolver.rewrite_boolean_or_r"]], "set_symbol_table() (neurolang.solver.genericsolver method)": [[102, "neurolang.solver.GenericSolver.set_symbol_table"]], "simplify_double_inversion() (neurolang.solver.booleanrewritesolver method)": [[102, "neurolang.solver.BooleanRewriteSolver.simplify_double_inversion"]], "type (neurolang.solver.booleanoperationssolver attribute)": [[102, "neurolang.solver.BooleanOperationsSolver.type"]], "type (neurolang.solver.booleanrewritesolver attribute)": [[102, "neurolang.solver.BooleanRewriteSolver.type"]], "type (neurolang.solver.firstorderlogicsolver attribute)": [[102, "neurolang.solver.FirstOrderLogicSolver.type"]], "type (neurolang.solver.genericsolver attribute)": [[102, "neurolang.solver.GenericSolver.type"]], "type (neurolang.solver.numericoperationssolver attribute)": [[102, "neurolang.solver.NumericOperationsSolver.type"]], "universal_predicate() (neurolang.solver.firstorderlogicsolver method)": [[102, "neurolang.solver.FirstOrderLogicSolver.universal_predicate"]], "neurolangtypeexception": [[103, "neurolang.type_system.NeuroLangTypeException"]], "unknown (class in neurolang.type_system)": [[103, "neurolang.type_system.Unknown"]], "get_args() (in module neurolang.type_system)": [[103, "neurolang.type_system.get_args"]], "get_generic_type() (in module neurolang.type_system)": [[103, "neurolang.type_system.get_generic_type"]], "infer_type() (in module neurolang.type_system)": [[103, "neurolang.type_system.infer_type"]], "infer_type_builtins() (in module neurolang.type_system)": [[103, "neurolang.type_system.infer_type_builtins"]], "infer_type_iterables() (in module neurolang.type_system)": [[103, "neurolang.type_system.infer_type_iterables"]], "infer_type_mapping() (in module neurolang.type_system)": [[103, "neurolang.type_system.infer_type_mapping"]], "is_consistent() (in module neurolang.type_system)": [[103, "neurolang.type_system.is_consistent"]], "is_leq_informative() (in module neurolang.type_system)": [[103, "neurolang.type_system.is_leq_informative"]], "is_leq_informative_parameterized_right() (in module neurolang.type_system)": [[103, "neurolang.type_system.is_leq_informative_parameterized_right"]], "is_leq_informative_union() (in module neurolang.type_system)": [[103, "neurolang.type_system.is_leq_informative_union"]], "is_parameterized() (in module neurolang.type_system)": [[103, "neurolang.type_system.is_parameterized"]], "is_parametrical() (in module neurolang.type_system)": [[103, "neurolang.type_system.is_parametrical"]], "is_type() (in module neurolang.type_system)": [[103, "neurolang.type_system.is_type"]], "neurolang.type_system": [[103, "module-neurolang.type_system"]], "replace_type_variable() (in module neurolang.type_system)": [[103, "neurolang.type_system.replace_type_variable"]], "replace_type_variable_fix_python36_37() (in module neurolang.type_system)": [[103, "neurolang.type_system.replace_type_variable_fix_python36_37"]], "typing_callable_from_annotated_function() (in module neurolang.type_system)": [[103, "neurolang.type_system.typing_callable_from_annotated_function"]], "unify_types() (in module neurolang.type_system)": [[103, "neurolang.type_system.unify_types"]], "typedsymboltable (class in neurolang.typed_symbol_table)": [[104, "neurolang.typed_symbol_table.TypedSymbolTable"]], "create_scope() (neurolang.typed_symbol_table.typedsymboltable method)": [[104, "neurolang.typed_symbol_table.TypedSymbolTable.create_scope"]], "neurolang.typed_symbol_table": [[104, "module-neurolang.typed_symbol_table"]], "set_readonly() (neurolang.typed_symbol_table.typedsymboltable method)": [[104, "neurolang.typed_symbol_table.TypedSymbolTable.set_readonly"]], "symbols_by_type() (neurolang.typed_symbol_table.typedsymboltable method)": [[104, "neurolang.typed_symbol_table.TypedSymbolTable.symbols_by_type"]], "types() (neurolang.typed_symbol_table.typedsymboltable method)": [[104, "neurolang.typed_symbol_table.TypedSymbolTable.types"]], "namedrelationalalgebrafrozenset (class in neurolang.utils)": [[105, "neurolang.utils.NamedRelationalAlgebraFrozenSet"]], "orderedset (class in neurolang.utils)": [[105, "neurolang.utils.OrderedSet"]], "relationalalgebrafrozenset (class in neurolang.utils)": [[105, "neurolang.utils.RelationalAlgebraFrozenSet"]], "relationalalgebraset (class in neurolang.utils)": [[105, "neurolang.utils.RelationalAlgebraSet"]], "relationalalgebrastringexpression (class in neurolang.utils)": [[105, "neurolang.utils.RelationalAlgebraStringExpression"]], "add() (neurolang.utils.orderedset method)": [[105, "neurolang.utils.OrderedSet.add"]], "add() (neurolang.utils.relationalalgebraset method)": [[105, "neurolang.utils.RelationalAlgebraSet.add"]], "aggregate() (neurolang.utils.namedrelationalalgebrafrozenset method)": [[105, "neurolang.utils.NamedRelationalAlgebraFrozenSet.aggregate"]], "arity (neurolang.utils.namedrelationalalgebrafrozenset property)": [[105, "neurolang.utils.NamedRelationalAlgebraFrozenSet.arity"]], "arity (neurolang.utils.relationalalgebrafrozenset property)": [[105, "neurolang.utils.RelationalAlgebraFrozenSet.arity"]], "as_numpy_array() (neurolang.utils.relationalalgebrafrozenset method)": [[105, "neurolang.utils.RelationalAlgebraFrozenSet.as_numpy_array"]], "as_pandas_dataframe() (neurolang.utils.relationalalgebrafrozenset method)": [[105, "neurolang.utils.RelationalAlgebraFrozenSet.as_pandas_dataframe"]], "columns (neurolang.utils.namedrelationalalgebrafrozenset property)": [[105, "neurolang.utils.NamedRelationalAlgebraFrozenSet.columns"]], "columns (neurolang.utils.relationalalgebrafrozenset property)": [[105, "neurolang.utils.RelationalAlgebraFrozenSet.columns"]], "copy() (neurolang.utils.orderedset method)": [[105, "neurolang.utils.OrderedSet.copy"]], "copy() (neurolang.utils.relationalalgebrafrozenset method)": [[105, "neurolang.utils.RelationalAlgebraFrozenSet.copy"]], "create_view_from() (neurolang.utils.namedrelationalalgebrafrozenset class method)": [[105, "neurolang.utils.NamedRelationalAlgebraFrozenSet.create_view_from"]], "create_view_from() (neurolang.utils.relationalalgebrafrozenset class method)": [[105, "neurolang.utils.RelationalAlgebraFrozenSet.create_view_from"]], "cross_product() (neurolang.utils.namedrelationalalgebrafrozenset method)": [[105, "neurolang.utils.NamedRelationalAlgebraFrozenSet.cross_product"]], "cross_product() (neurolang.utils.relationalalgebrafrozenset method)": [[105, "neurolang.utils.RelationalAlgebraFrozenSet.cross_product"]], "dee() (neurolang.utils.namedrelationalalgebrafrozenset class method)": [[105, "neurolang.utils.NamedRelationalAlgebraFrozenSet.dee"]], "dee() (neurolang.utils.relationalalgebrafrozenset class method)": [[105, "neurolang.utils.RelationalAlgebraFrozenSet.dee"]], "discard() (neurolang.utils.orderedset method)": [[105, "neurolang.utils.OrderedSet.discard"]], "discard() (neurolang.utils.relationalalgebraset method)": [[105, "neurolang.utils.RelationalAlgebraSet.discard"]], "dum() (neurolang.utils.namedrelationalalgebrafrozenset class method)": [[105, "neurolang.utils.NamedRelationalAlgebraFrozenSet.dum"]], "dum() (neurolang.utils.relationalalgebrafrozenset class method)": [[105, "neurolang.utils.RelationalAlgebraFrozenSet.dum"]], "equijoin() (neurolang.utils.namedrelationalalgebrafrozenset method)": [[105, "neurolang.utils.NamedRelationalAlgebraFrozenSet.equijoin"]], "equijoin() (neurolang.utils.relationalalgebrafrozenset method)": [[105, "neurolang.utils.RelationalAlgebraFrozenSet.equijoin"]], "explode() (neurolang.utils.namedrelationalalgebrafrozenset method)": [[105, "neurolang.utils.NamedRelationalAlgebraFrozenSet.explode"]], "extended_projection() (neurolang.utils.namedrelationalalgebrafrozenset method)": [[105, "neurolang.utils.NamedRelationalAlgebraFrozenSet.extended_projection"]], "fetch_one() (neurolang.utils.namedrelationalalgebrafrozenset method)": [[105, "neurolang.utils.NamedRelationalAlgebraFrozenSet.fetch_one"]], "fetch_one() (neurolang.utils.relationalalgebrafrozenset method)": [[105, "neurolang.utils.RelationalAlgebraFrozenSet.fetch_one"]], "groupby() (neurolang.utils.namedrelationalalgebrafrozenset method)": [[105, "neurolang.utils.NamedRelationalAlgebraFrozenSet.groupby"]], "groupby() (neurolang.utils.relationalalgebrafrozenset method)": [[105, "neurolang.utils.RelationalAlgebraFrozenSet.groupby"]], "index() (neurolang.utils.orderedset method)": [[105, "neurolang.utils.OrderedSet.index"]], "is_empty() (neurolang.utils.relationalalgebrafrozenset method)": [[105, "neurolang.utils.RelationalAlgebraFrozenSet.is_empty"]], "issubset() (neurolang.utils.orderedset method)": [[105, "neurolang.utils.OrderedSet.issubset"]], "issuperset() (neurolang.utils.orderedset method)": [[105, "neurolang.utils.OrderedSet.issuperset"]], "itervalues() (neurolang.utils.relationalalgebrafrozenset method)": [[105, "neurolang.utils.RelationalAlgebraFrozenSet.itervalues"]], "left_naturaljoin() (neurolang.utils.namedrelationalalgebrafrozenset method)": [[105, "neurolang.utils.NamedRelationalAlgebraFrozenSet.left_naturaljoin"]], "log_performance() (in module neurolang.utils)": [[105, "neurolang.utils.log_performance"]], "might_have_duplicates (neurolang.utils.relationalalgebrafrozenset property)": [[105, "neurolang.utils.RelationalAlgebraFrozenSet.might_have_duplicates"]], "naturaljoin() (neurolang.utils.namedrelationalalgebrafrozenset method)": [[105, "neurolang.utils.NamedRelationalAlgebraFrozenSet.naturaljoin"]], "neurolang.utils": [[105, "module-neurolang.utils"]], "powerset() (in module neurolang.utils)": [[105, "neurolang.utils.powerset"]], "projection() (neurolang.utils.namedrelationalalgebrafrozenset method)": [[105, "neurolang.utils.NamedRelationalAlgebraFrozenSet.projection"]], "projection() (neurolang.utils.relationalalgebrafrozenset method)": [[105, "neurolang.utils.RelationalAlgebraFrozenSet.projection"]], "projection_to_unnamed() (neurolang.utils.namedrelationalalgebrafrozenset method)": [[105, "neurolang.utils.NamedRelationalAlgebraFrozenSet.projection_to_unnamed"]], "rename_column() (neurolang.utils.namedrelationalalgebrafrozenset method)": [[105, "neurolang.utils.NamedRelationalAlgebraFrozenSet.rename_column"]], "rename_columns() (neurolang.utils.namedrelationalalgebrafrozenset method)": [[105, "neurolang.utils.NamedRelationalAlgebraFrozenSet.rename_columns"]], "replace() (neurolang.utils.orderedset method)": [[105, "neurolang.utils.OrderedSet.replace"]], "replace_null() (neurolang.utils.namedrelationalalgebrafrozenset method)": [[105, "neurolang.utils.NamedRelationalAlgebraFrozenSet.replace_null"]], "selection() (neurolang.utils.relationalalgebrafrozenset method)": [[105, "neurolang.utils.RelationalAlgebraFrozenSet.selection"]], "selection_columns() (neurolang.utils.relationalalgebrafrozenset method)": [[105, "neurolang.utils.RelationalAlgebraFrozenSet.selection_columns"]], "to_unnamed() (neurolang.utils.namedrelationalalgebrafrozenset method)": [[105, "neurolang.utils.NamedRelationalAlgebraFrozenSet.to_unnamed"]], "neurolang.utils.data_manipulation": [[106, "module-neurolang.utils.data_manipulation"]], "parse_region_label_map() (in module neurolang.utils.data_manipulation)": [[106, "neurolang.utils.data_manipulation.parse_region_label_map"]], "completeresult (class in neurolang.utils.interactive_parsing)": [[107, "neurolang.utils.interactive_parsing.CompleteResult"]], "larkcompleter (class in neurolang.utils.interactive_parsing)": [[107, "neurolang.utils.interactive_parsing.LarkCompleter"]], "complete() (neurolang.utils.interactive_parsing.larkcompleter method)": [[107, "neurolang.utils.interactive_parsing.LarkCompleter.complete"]], "compute_options_no_error() (neurolang.utils.interactive_parsing.larkcompleter method)": [[107, "neurolang.utils.interactive_parsing.LarkCompleter.compute_options_no_error"]], "compute_options_unexpected_char() (neurolang.utils.interactive_parsing.larkcompleter method)": [[107, "neurolang.utils.interactive_parsing.LarkCompleter.compute_options_unexpected_char"]], "neurolang.utils.interactive_parsing": [[107, "module-neurolang.utils.interactive_parsing"]], "pos (neurolang.utils.interactive_parsing.completeresult attribute)": [[107, "neurolang.utils.interactive_parsing.CompleteResult.pos"]], "prefix (neurolang.utils.interactive_parsing.completeresult attribute)": [[107, "neurolang.utils.interactive_parsing.CompleteResult.prefix"]], "to_dictionary() (neurolang.utils.interactive_parsing.completeresult method)": [[107, "neurolang.utils.interactive_parsing.CompleteResult.to_dictionary"]], "token_options (neurolang.utils.interactive_parsing.completeresult attribute)": [[107, "neurolang.utils.interactive_parsing.CompleteResult.token_options"]], "orderedset (class in neurolang.utils.orderedset)": [[108, "neurolang.utils.orderedset.OrderedSet"]], "add() (neurolang.utils.orderedset.orderedset method)": [[108, "neurolang.utils.orderedset.OrderedSet.add"]], "copy() (neurolang.utils.orderedset.orderedset method)": [[108, "neurolang.utils.orderedset.OrderedSet.copy"]], "discard() (neurolang.utils.orderedset.orderedset method)": [[108, "neurolang.utils.orderedset.OrderedSet.discard"]], "index() (neurolang.utils.orderedset.orderedset method)": [[108, "neurolang.utils.orderedset.OrderedSet.index"]], "issubset() (neurolang.utils.orderedset.orderedset method)": [[108, "neurolang.utils.orderedset.OrderedSet.issubset"]], "issuperset() (neurolang.utils.orderedset.orderedset method)": [[108, "neurolang.utils.orderedset.OrderedSet.issuperset"]], "neurolang.utils.orderedset": [[108, "module-neurolang.utils.orderedset"]], "replace() (neurolang.utils.orderedset.orderedset method)": [[108, "neurolang.utils.orderedset.OrderedSet.replace"]], "namedrelationalalgebrafrozenset (class in neurolang.utils.relational_algebra_set)": [[109, "neurolang.utils.relational_algebra_set.NamedRelationalAlgebraFrozenSet"]], "relationalalgebracolumnint (class in neurolang.utils.relational_algebra_set)": [[109, "neurolang.utils.relational_algebra_set.RelationalAlgebraColumnInt"]], "relationalalgebracolumnstr (class in neurolang.utils.relational_algebra_set)": [[109, "neurolang.utils.relational_algebra_set.RelationalAlgebraColumnStr"]], "relationalalgebrafrozenset (class in neurolang.utils.relational_algebra_set)": [[109, "neurolang.utils.relational_algebra_set.RelationalAlgebraFrozenSet"]], "relationalalgebraset (class in neurolang.utils.relational_algebra_set)": [[109, "neurolang.utils.relational_algebra_set.RelationalAlgebraSet"]], "relationalalgebrastringexpression (class in neurolang.utils.relational_algebra_set)": [[109, "neurolang.utils.relational_algebra_set.RelationalAlgebraStringExpression"]], "add() (neurolang.utils.relational_algebra_set.relationalalgebraset method)": [[109, "neurolang.utils.relational_algebra_set.RelationalAlgebraSet.add"]], "aggregate() (neurolang.utils.relational_algebra_set.namedrelationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.NamedRelationalAlgebraFrozenSet.aggregate"]], "arity (neurolang.utils.relational_algebra_set.namedrelationalalgebrafrozenset property)": [[109, "neurolang.utils.relational_algebra_set.NamedRelationalAlgebraFrozenSet.arity"]], "arity (neurolang.utils.relational_algebra_set.relationalalgebrafrozenset property)": [[109, "neurolang.utils.relational_algebra_set.RelationalAlgebraFrozenSet.arity"]], "as_numpy_array() (neurolang.utils.relational_algebra_set.relationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.RelationalAlgebraFrozenSet.as_numpy_array"]], "as_pandas_dataframe() (neurolang.utils.relational_algebra_set.relationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.RelationalAlgebraFrozenSet.as_pandas_dataframe"]], "columns (neurolang.utils.relational_algebra_set.namedrelationalalgebrafrozenset property)": [[109, "neurolang.utils.relational_algebra_set.NamedRelationalAlgebraFrozenSet.columns"]], "columns (neurolang.utils.relational_algebra_set.relationalalgebrafrozenset property)": [[109, "neurolang.utils.relational_algebra_set.RelationalAlgebraFrozenSet.columns"]], "copy() (neurolang.utils.relational_algebra_set.relationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.RelationalAlgebraFrozenSet.copy"]], "create_view_from() (neurolang.utils.relational_algebra_set.namedrelationalalgebrafrozenset class method)": [[109, "neurolang.utils.relational_algebra_set.NamedRelationalAlgebraFrozenSet.create_view_from"]], "create_view_from() (neurolang.utils.relational_algebra_set.relationalalgebrafrozenset class method)": [[109, "neurolang.utils.relational_algebra_set.RelationalAlgebraFrozenSet.create_view_from"]], "cross_product() (neurolang.utils.relational_algebra_set.namedrelationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.NamedRelationalAlgebraFrozenSet.cross_product"]], "cross_product() (neurolang.utils.relational_algebra_set.relationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.RelationalAlgebraFrozenSet.cross_product"]], "dee() (neurolang.utils.relational_algebra_set.namedrelationalalgebrafrozenset class method)": [[109, "neurolang.utils.relational_algebra_set.NamedRelationalAlgebraFrozenSet.dee"]], "dee() (neurolang.utils.relational_algebra_set.relationalalgebrafrozenset class method)": [[109, "neurolang.utils.relational_algebra_set.RelationalAlgebraFrozenSet.dee"]], "discard() (neurolang.utils.relational_algebra_set.relationalalgebraset method)": [[109, "neurolang.utils.relational_algebra_set.RelationalAlgebraSet.discard"]], "dum() (neurolang.utils.relational_algebra_set.namedrelationalalgebrafrozenset class method)": [[109, "neurolang.utils.relational_algebra_set.NamedRelationalAlgebraFrozenSet.dum"]], "dum() (neurolang.utils.relational_algebra_set.relationalalgebrafrozenset class method)": [[109, "neurolang.utils.relational_algebra_set.RelationalAlgebraFrozenSet.dum"]], "equijoin() (neurolang.utils.relational_algebra_set.namedrelationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.NamedRelationalAlgebraFrozenSet.equijoin"]], "equijoin() (neurolang.utils.relational_algebra_set.relationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.RelationalAlgebraFrozenSet.equijoin"]], "explode() (neurolang.utils.relational_algebra_set.namedrelationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.NamedRelationalAlgebraFrozenSet.explode"]], "extended_projection() (neurolang.utils.relational_algebra_set.namedrelationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.NamedRelationalAlgebraFrozenSet.extended_projection"]], "fetch_one() (neurolang.utils.relational_algebra_set.namedrelationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.NamedRelationalAlgebraFrozenSet.fetch_one"]], "fetch_one() (neurolang.utils.relational_algebra_set.relationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.RelationalAlgebraFrozenSet.fetch_one"]], "groupby() (neurolang.utils.relational_algebra_set.namedrelationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.NamedRelationalAlgebraFrozenSet.groupby"]], "groupby() (neurolang.utils.relational_algebra_set.relationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.RelationalAlgebraFrozenSet.groupby"]], "is_empty() (neurolang.utils.relational_algebra_set.relationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.RelationalAlgebraFrozenSet.is_empty"]], "itervalues() (neurolang.utils.relational_algebra_set.relationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.RelationalAlgebraFrozenSet.itervalues"]], "left_naturaljoin() (neurolang.utils.relational_algebra_set.namedrelationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.NamedRelationalAlgebraFrozenSet.left_naturaljoin"]], "might_have_duplicates (neurolang.utils.relational_algebra_set.relationalalgebrafrozenset property)": [[109, "neurolang.utils.relational_algebra_set.RelationalAlgebraFrozenSet.might_have_duplicates"]], "naturaljoin() (neurolang.utils.relational_algebra_set.namedrelationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.NamedRelationalAlgebraFrozenSet.naturaljoin"]], "neurolang.utils.relational_algebra_set": [[109, "module-neurolang.utils.relational_algebra_set"]], "projection() (neurolang.utils.relational_algebra_set.namedrelationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.NamedRelationalAlgebraFrozenSet.projection"]], "projection() (neurolang.utils.relational_algebra_set.relationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.RelationalAlgebraFrozenSet.projection"]], "projection_to_unnamed() (neurolang.utils.relational_algebra_set.namedrelationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.NamedRelationalAlgebraFrozenSet.projection_to_unnamed"]], "rename_column() (neurolang.utils.relational_algebra_set.namedrelationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.NamedRelationalAlgebraFrozenSet.rename_column"]], "rename_columns() (neurolang.utils.relational_algebra_set.namedrelationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.NamedRelationalAlgebraFrozenSet.rename_columns"]], "replace_null() (neurolang.utils.relational_algebra_set.namedrelationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.NamedRelationalAlgebraFrozenSet.replace_null"]], "selection() (neurolang.utils.relational_algebra_set.relationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.RelationalAlgebraFrozenSet.selection"]], "selection_columns() (neurolang.utils.relational_algebra_set.relationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.RelationalAlgebraFrozenSet.selection_columns"]], "to_unnamed() (neurolang.utils.relational_algebra_set.namedrelationalalgebrafrozenset method)": [[109, "neurolang.utils.relational_algebra_set.NamedRelationalAlgebraFrozenSet.to_unnamed"]], "namedrelationalalgebrafrozenset (class in neurolang.utils.relational_algebra_set.abstract)": [[110, "neurolang.utils.relational_algebra_set.abstract.NamedRelationalAlgebraFrozenSet"]], "relationalalgebracolumn (class in neurolang.utils.relational_algebra_set.abstract)": [[110, "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraColumn"]], "relationalalgebracolumnint (class in neurolang.utils.relational_algebra_set.abstract)": [[110, "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraColumnInt"]], "relationalalgebracolumnstr (class in neurolang.utils.relational_algebra_set.abstract)": [[110, "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraColumnStr"]], "relationalalgebrafrozenset (class in neurolang.utils.relational_algebra_set.abstract)": [[110, "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraFrozenSet"]], "relationalalgebraset (class in neurolang.utils.relational_algebra_set.abstract)": [[110, "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraSet"]], "add() (neurolang.utils.relational_algebra_set.abstract.relationalalgebraset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraSet.add"]], "aggregate() (neurolang.utils.relational_algebra_set.abstract.namedrelationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.NamedRelationalAlgebraFrozenSet.aggregate"]], "arity (neurolang.utils.relational_algebra_set.abstract.namedrelationalalgebrafrozenset property)": [[110, "neurolang.utils.relational_algebra_set.abstract.NamedRelationalAlgebraFrozenSet.arity"]], "arity (neurolang.utils.relational_algebra_set.abstract.relationalalgebrafrozenset property)": [[110, "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraFrozenSet.arity"]], "as_numpy_array() (neurolang.utils.relational_algebra_set.abstract.relationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraFrozenSet.as_numpy_array"]], "columns (neurolang.utils.relational_algebra_set.abstract.namedrelationalalgebrafrozenset property)": [[110, "neurolang.utils.relational_algebra_set.abstract.NamedRelationalAlgebraFrozenSet.columns"]], "columns (neurolang.utils.relational_algebra_set.abstract.relationalalgebrafrozenset property)": [[110, "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraFrozenSet.columns"]], "copy() (neurolang.utils.relational_algebra_set.abstract.relationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraFrozenSet.copy"]], "create_view_from() (neurolang.utils.relational_algebra_set.abstract.relationalalgebrafrozenset class method)": [[110, "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraFrozenSet.create_view_from"]], "cross_product() (neurolang.utils.relational_algebra_set.abstract.namedrelationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.NamedRelationalAlgebraFrozenSet.cross_product"]], "cross_product() (neurolang.utils.relational_algebra_set.abstract.relationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraFrozenSet.cross_product"]], "dee() (neurolang.utils.relational_algebra_set.abstract.namedrelationalalgebrafrozenset class method)": [[110, "neurolang.utils.relational_algebra_set.abstract.NamedRelationalAlgebraFrozenSet.dee"]], "dee() (neurolang.utils.relational_algebra_set.abstract.relationalalgebrafrozenset class method)": [[110, "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraFrozenSet.dee"]], "discard() (neurolang.utils.relational_algebra_set.abstract.relationalalgebraset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraSet.discard"]], "dum() (neurolang.utils.relational_algebra_set.abstract.namedrelationalalgebrafrozenset class method)": [[110, "neurolang.utils.relational_algebra_set.abstract.NamedRelationalAlgebraFrozenSet.dum"]], "dum() (neurolang.utils.relational_algebra_set.abstract.relationalalgebrafrozenset class method)": [[110, "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraFrozenSet.dum"]], "equijoin() (neurolang.utils.relational_algebra_set.abstract.namedrelationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.NamedRelationalAlgebraFrozenSet.equijoin"]], "equijoin() (neurolang.utils.relational_algebra_set.abstract.relationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraFrozenSet.equijoin"]], "explode() (neurolang.utils.relational_algebra_set.abstract.namedrelationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.NamedRelationalAlgebraFrozenSet.explode"]], "extended_projection() (neurolang.utils.relational_algebra_set.abstract.namedrelationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.NamedRelationalAlgebraFrozenSet.extended_projection"]], "fetch_one() (neurolang.utils.relational_algebra_set.abstract.namedrelationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.NamedRelationalAlgebraFrozenSet.fetch_one"]], "fetch_one() (neurolang.utils.relational_algebra_set.abstract.relationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraFrozenSet.fetch_one"]], "groupby() (neurolang.utils.relational_algebra_set.abstract.namedrelationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.NamedRelationalAlgebraFrozenSet.groupby"]], "groupby() (neurolang.utils.relational_algebra_set.abstract.relationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraFrozenSet.groupby"]], "is_dee() (neurolang.utils.relational_algebra_set.abstract.relationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraFrozenSet.is_dee"]], "is_dum() (neurolang.utils.relational_algebra_set.abstract.relationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraFrozenSet.is_dum"]], "is_empty() (neurolang.utils.relational_algebra_set.abstract.relationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraFrozenSet.is_empty"]], "itervalues() (neurolang.utils.relational_algebra_set.abstract.relationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraFrozenSet.itervalues"]], "left_naturaljoin() (neurolang.utils.relational_algebra_set.abstract.namedrelationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.NamedRelationalAlgebraFrozenSet.left_naturaljoin"]], "naturaljoin() (neurolang.utils.relational_algebra_set.abstract.namedrelationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.NamedRelationalAlgebraFrozenSet.naturaljoin"]], "neurolang.utils.relational_algebra_set.abstract": [[110, "module-neurolang.utils.relational_algebra_set.abstract"]], "projection() (neurolang.utils.relational_algebra_set.abstract.namedrelationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.NamedRelationalAlgebraFrozenSet.projection"]], "projection() (neurolang.utils.relational_algebra_set.abstract.relationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraFrozenSet.projection"]], "projection_to_unnamed() (neurolang.utils.relational_algebra_set.abstract.namedrelationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.NamedRelationalAlgebraFrozenSet.projection_to_unnamed"]], "rename_column() (neurolang.utils.relational_algebra_set.abstract.namedrelationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.NamedRelationalAlgebraFrozenSet.rename_column"]], "rename_columns() (neurolang.utils.relational_algebra_set.abstract.namedrelationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.NamedRelationalAlgebraFrozenSet.rename_columns"]], "replace_null() (neurolang.utils.relational_algebra_set.abstract.namedrelationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.NamedRelationalAlgebraFrozenSet.replace_null"]], "selection() (neurolang.utils.relational_algebra_set.abstract.relationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraFrozenSet.selection"]], "selection_columns() (neurolang.utils.relational_algebra_set.abstract.relationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.RelationalAlgebraFrozenSet.selection_columns"]], "to_unnamed() (neurolang.utils.relational_algebra_set.abstract.namedrelationalalgebrafrozenset method)": [[110, "neurolang.utils.relational_algebra_set.abstract.NamedRelationalAlgebraFrozenSet.to_unnamed"]], "namedrelationalalgebrafrozenset (class in neurolang.utils.relational_algebra_set.pandas)": [[113, "neurolang.utils.relational_algebra_set.pandas.NamedRelationalAlgebraFrozenSet"]], "relationalalgebrafrozenset (class in neurolang.utils.relational_algebra_set.pandas)": [[113, "neurolang.utils.relational_algebra_set.pandas.RelationalAlgebraFrozenSet"]], "relationalalgebraset (class in neurolang.utils.relational_algebra_set.pandas)": [[113, "neurolang.utils.relational_algebra_set.pandas.RelationalAlgebraSet"]], "relationalalgebrastringexpression (class in neurolang.utils.relational_algebra_set.pandas)": [[113, "neurolang.utils.relational_algebra_set.pandas.RelationalAlgebraStringExpression"]], "add() (neurolang.utils.relational_algebra_set.pandas.relationalalgebraset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.RelationalAlgebraSet.add"]], "aggregate() (neurolang.utils.relational_algebra_set.pandas.namedrelationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.NamedRelationalAlgebraFrozenSet.aggregate"]], "arity (neurolang.utils.relational_algebra_set.pandas.namedrelationalalgebrafrozenset property)": [[113, "neurolang.utils.relational_algebra_set.pandas.NamedRelationalAlgebraFrozenSet.arity"]], "arity (neurolang.utils.relational_algebra_set.pandas.relationalalgebrafrozenset property)": [[113, "neurolang.utils.relational_algebra_set.pandas.RelationalAlgebraFrozenSet.arity"]], "as_numpy_array() (neurolang.utils.relational_algebra_set.pandas.relationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.RelationalAlgebraFrozenSet.as_numpy_array"]], "as_pandas_dataframe() (neurolang.utils.relational_algebra_set.pandas.relationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.RelationalAlgebraFrozenSet.as_pandas_dataframe"]], "columns (neurolang.utils.relational_algebra_set.pandas.namedrelationalalgebrafrozenset property)": [[113, "neurolang.utils.relational_algebra_set.pandas.NamedRelationalAlgebraFrozenSet.columns"]], "columns (neurolang.utils.relational_algebra_set.pandas.relationalalgebrafrozenset property)": [[113, "neurolang.utils.relational_algebra_set.pandas.RelationalAlgebraFrozenSet.columns"]], "copy() (neurolang.utils.relational_algebra_set.pandas.relationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.RelationalAlgebraFrozenSet.copy"]], "create_view_from() (neurolang.utils.relational_algebra_set.pandas.namedrelationalalgebrafrozenset class method)": [[113, "neurolang.utils.relational_algebra_set.pandas.NamedRelationalAlgebraFrozenSet.create_view_from"]], "create_view_from() (neurolang.utils.relational_algebra_set.pandas.relationalalgebrafrozenset class method)": [[113, "neurolang.utils.relational_algebra_set.pandas.RelationalAlgebraFrozenSet.create_view_from"]], "cross_product() (neurolang.utils.relational_algebra_set.pandas.namedrelationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.NamedRelationalAlgebraFrozenSet.cross_product"]], "cross_product() (neurolang.utils.relational_algebra_set.pandas.relationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.RelationalAlgebraFrozenSet.cross_product"]], "dee() (neurolang.utils.relational_algebra_set.pandas.namedrelationalalgebrafrozenset class method)": [[113, "neurolang.utils.relational_algebra_set.pandas.NamedRelationalAlgebraFrozenSet.dee"]], "dee() (neurolang.utils.relational_algebra_set.pandas.relationalalgebrafrozenset class method)": [[113, "neurolang.utils.relational_algebra_set.pandas.RelationalAlgebraFrozenSet.dee"]], "discard() (neurolang.utils.relational_algebra_set.pandas.relationalalgebraset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.RelationalAlgebraSet.discard"]], "dum() (neurolang.utils.relational_algebra_set.pandas.namedrelationalalgebrafrozenset class method)": [[113, "neurolang.utils.relational_algebra_set.pandas.NamedRelationalAlgebraFrozenSet.dum"]], "dum() (neurolang.utils.relational_algebra_set.pandas.relationalalgebrafrozenset class method)": [[113, "neurolang.utils.relational_algebra_set.pandas.RelationalAlgebraFrozenSet.dum"]], "equijoin() (neurolang.utils.relational_algebra_set.pandas.namedrelationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.NamedRelationalAlgebraFrozenSet.equijoin"]], "equijoin() (neurolang.utils.relational_algebra_set.pandas.relationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.RelationalAlgebraFrozenSet.equijoin"]], "explode() (neurolang.utils.relational_algebra_set.pandas.namedrelationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.NamedRelationalAlgebraFrozenSet.explode"]], "extended_projection() (neurolang.utils.relational_algebra_set.pandas.namedrelationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.NamedRelationalAlgebraFrozenSet.extended_projection"]], "fetch_one() (neurolang.utils.relational_algebra_set.pandas.namedrelationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.NamedRelationalAlgebraFrozenSet.fetch_one"]], "fetch_one() (neurolang.utils.relational_algebra_set.pandas.relationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.RelationalAlgebraFrozenSet.fetch_one"]], "groupby() (neurolang.utils.relational_algebra_set.pandas.namedrelationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.NamedRelationalAlgebraFrozenSet.groupby"]], "groupby() (neurolang.utils.relational_algebra_set.pandas.relationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.RelationalAlgebraFrozenSet.groupby"]], "is_empty() (neurolang.utils.relational_algebra_set.pandas.relationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.RelationalAlgebraFrozenSet.is_empty"]], "itervalues() (neurolang.utils.relational_algebra_set.pandas.relationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.RelationalAlgebraFrozenSet.itervalues"]], "left_naturaljoin() (neurolang.utils.relational_algebra_set.pandas.namedrelationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.NamedRelationalAlgebraFrozenSet.left_naturaljoin"]], "might_have_duplicates (neurolang.utils.relational_algebra_set.pandas.relationalalgebrafrozenset property)": [[113, "neurolang.utils.relational_algebra_set.pandas.RelationalAlgebraFrozenSet.might_have_duplicates"]], "naturaljoin() (neurolang.utils.relational_algebra_set.pandas.namedrelationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.NamedRelationalAlgebraFrozenSet.naturaljoin"]], "neurolang.utils.relational_algebra_set.pandas": [[113, "module-neurolang.utils.relational_algebra_set.pandas"]], "projection() (neurolang.utils.relational_algebra_set.pandas.namedrelationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.NamedRelationalAlgebraFrozenSet.projection"]], "projection() (neurolang.utils.relational_algebra_set.pandas.relationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.RelationalAlgebraFrozenSet.projection"]], "projection_to_unnamed() (neurolang.utils.relational_algebra_set.pandas.namedrelationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.NamedRelationalAlgebraFrozenSet.projection_to_unnamed"]], "rename_column() (neurolang.utils.relational_algebra_set.pandas.namedrelationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.NamedRelationalAlgebraFrozenSet.rename_column"]], "rename_columns() (neurolang.utils.relational_algebra_set.pandas.namedrelationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.NamedRelationalAlgebraFrozenSet.rename_columns"]], "replace_null() (neurolang.utils.relational_algebra_set.pandas.namedrelationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.NamedRelationalAlgebraFrozenSet.replace_null"]], "selection() (neurolang.utils.relational_algebra_set.pandas.relationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.RelationalAlgebraFrozenSet.selection"]], "selection_columns() (neurolang.utils.relational_algebra_set.pandas.relationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.RelationalAlgebraFrozenSet.selection_columns"]], "to_unnamed() (neurolang.utils.relational_algebra_set.pandas.namedrelationalalgebrafrozenset method)": [[113, "neurolang.utils.relational_algebra_set.pandas.NamedRelationalAlgebraFrozenSet.to_unnamed"]], "neurolang.utils.server": [[114, "module-neurolang.utils.server"]], "destrieuxengineconf (class in neurolang.utils.server.engines)": [[116, "neurolang.utils.server.engines.DestrieuxEngineConf"]], "neurolangengineconfiguration (class in neurolang.utils.server.engines)": [[116, "neurolang.utils.server.engines.NeurolangEngineConfiguration"]], "neurolangengineset (class in neurolang.utils.server.engines)": [[116, "neurolang.utils.server.engines.NeurolangEngineSet"]], "neurosynthengineconf (class in neurolang.utils.server.engines)": [[116, "neurolang.utils.server.engines.NeurosynthEngineConf"]], "add_engine() (neurolang.utils.server.engines.neurolangengineset method)": [[116, "neurolang.utils.server.engines.NeurolangEngineSet.add_engine"]], "add_ploting_functions() (in module neurolang.utils.server.engines)": [[116, "neurolang.utils.server.engines.add_ploting_functions"]], "atlas (neurolang.utils.server.engines.destrieuxengineconf property)": [[116, "neurolang.utils.server.engines.DestrieuxEngineConf.atlas"]], "atlas (neurolang.utils.server.engines.neurolangengineconfiguration property)": [[116, "neurolang.utils.server.engines.NeurolangEngineConfiguration.atlas"]], "atlas (neurolang.utils.server.engines.neurosynthengineconf property)": [[116, "neurolang.utils.server.engines.NeurosynthEngineConf.atlas"]], "brain_mask (neurolang.utils.server.engines.neurosynthengineconf property)": [[116, "neurolang.utils.server.engines.NeurosynthEngineConf.brain_mask"]], "create() (neurolang.utils.server.engines.destrieuxengineconf method)": [[116, "neurolang.utils.server.engines.DestrieuxEngineConf.create"]], "create() (neurolang.utils.server.engines.neurolangengineconfiguration method)": [[116, "neurolang.utils.server.engines.NeurolangEngineConfiguration.create"]], "create() (neurolang.utils.server.engines.neurosynthengineconf method)": [[116, "neurolang.utils.server.engines.NeurosynthEngineConf.create"]], "engine() (neurolang.utils.server.engines.neurolangengineset method)": [[116, "neurolang.utils.server.engines.NeurolangEngineSet.engine"]], "init_frontend() (in module neurolang.utils.server.engines)": [[116, "neurolang.utils.server.engines.init_frontend"]], "key (neurolang.utils.server.engines.destrieuxengineconf property)": [[116, "neurolang.utils.server.engines.DestrieuxEngineConf.key"]], "key (neurolang.utils.server.engines.neurolangengineconfiguration property)": [[116, "neurolang.utils.server.engines.NeurolangEngineConfiguration.key"]], "key (neurolang.utils.server.engines.neurosynthengineconf property)": [[116, "neurolang.utils.server.engines.NeurosynthEngineConf.key"]], "load_destrieux_atlas() (in module neurolang.utils.server.engines)": [[116, "neurolang.utils.server.engines.load_destrieux_atlas"]], "load_neurosynth_data() (in module neurolang.utils.server.engines)": [[116, "neurolang.utils.server.engines.load_neurosynth_data"]], "neurolang.utils.server.engines": [[116, "module-neurolang.utils.server.engines"]], "lrucachedict (class in neurolang.utils.server.queries)": [[117, "neurolang.utils.server.queries.LRUCacheDict"]], "neurolangquerymanager (class in neurolang.utils.server.queries)": [[117, "neurolang.utils.server.queries.NeurolangQueryManager"]], "cancel() (neurolang.utils.server.queries.neurolangquerymanager method)": [[117, "neurolang.utils.server.queries.NeurolangQueryManager.cancel"]], "get_atlas() (neurolang.utils.server.queries.neurolangquerymanager method)": [[117, "neurolang.utils.server.queries.NeurolangQueryManager.get_atlas"]], "get_result() (neurolang.utils.server.queries.neurolangquerymanager method)": [[117, "neurolang.utils.server.queries.NeurolangQueryManager.get_result"]], "get_symbols() (neurolang.utils.server.queries.neurolangquerymanager method)": [[117, "neurolang.utils.server.queries.NeurolangQueryManager.get_symbols"]], "neurolang.utils.server.queries": [[117, "module-neurolang.utils.server.queries"]], "submit_query() (neurolang.utils.server.queries.neurolangquerymanager method)": [[117, "neurolang.utils.server.queries.NeurolangQueryManager.submit_query"]], "customqueryresultsencoder (class in neurolang.utils.server.responses)": [[118, "neurolang.utils.server.responses.CustomQueryResultsEncoder"]], "queryresults (class in neurolang.utils.server.responses)": [[118, "neurolang.utils.server.responses.QueryResults"]], "base64_encode_nifti() (in module neurolang.utils.server.responses)": [[118, "neurolang.utils.server.responses.base64_encode_nifti"]], "base64_encode_spatial() (in module neurolang.utils.server.responses)": [[118, "neurolang.utils.server.responses.base64_encode_spatial"]], "calculate_image_center() (in module neurolang.utils.server.responses)": [[118, "neurolang.utils.server.responses.calculate_image_center"]], "default() (neurolang.utils.server.responses.customqueryresultsencoder method)": [[118, "neurolang.utils.server.responses.CustomQueryResultsEncoder.default"]], "get_function_metadata() (neurolang.utils.server.responses.queryresults method)": [[118, "neurolang.utils.server.responses.QueryResults.get_function_metadata"]], "get_result_item() (neurolang.utils.server.responses.queryresults method)": [[118, "neurolang.utils.server.responses.QueryResults.get_result_item"]], "get_result_item_columns() (neurolang.utils.server.responses.queryresults method)": [[118, "neurolang.utils.server.responses.QueryResults.get_result_item_columns"]], "get_result_item_values() (neurolang.utils.server.responses.queryresults method)": [[118, "neurolang.utils.server.responses.QueryResults.get_result_item_values"]], "neurolang.utils.server.responses": [[118, "module-neurolang.utils.server.responses"]], "serializevbr() (in module neurolang.utils.server.responses)": [[118, "neurolang.utils.server.responses.serializeVBR"]], "serialize_mplt_thumbnails() (in module neurolang.utils.server.responses)": [[118, "neurolang.utils.server.responses.serialize_mplt_thumbnails"]], "set_error_details() (neurolang.utils.server.responses.queryresults method)": [[118, "neurolang.utils.server.responses.QueryResults.set_error_details"]], "set_results_details() (neurolang.utils.server.responses.queryresults method)": [[118, "neurolang.utils.server.responses.QueryResults.set_results_details"]], "neurolang.utils.testing": [[119, "module-neurolang.utils.testing"]], "logic_exp_commutative_equal() (in module neurolang.utils.testing.logic)": [[120, "neurolang.utils.testing.logic.logic_exp_commutative_equal"]], "neurolang.utils.testing.logic": [[120, "module-neurolang.utils.testing.logic"]], "log_performance() (in module neurolang.utils.various)": [[121, "neurolang.utils.various.log_performance"]], "neurolang.utils.various": [[121, "module-neurolang.utils.various"]], "powerset() (in module neurolang.utils.various)": [[121, "neurolang.utils.various.powerset"]]}})